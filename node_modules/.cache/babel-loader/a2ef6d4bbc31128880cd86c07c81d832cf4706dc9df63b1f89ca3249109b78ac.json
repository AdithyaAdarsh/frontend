{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { addPostMessageListener, loadFrame } from './util/browser.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { prepareTokenParams } from './util/prepareTokenParams.js';\nimport './types/Token.js';\nimport { buildAuthorizeParams } from './endpoints/authorize.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nfunction getToken(sdk, options) {\n  if (arguments.length > 2) {\n    return Promise.reject(new AuthSdkError('As of version 3.0, \"getToken\" takes only a single set of options'));\n  }\n  options = options || {};\n  const popupWindow = options.popupWindow;\n  options.popupWindow = undefined;\n  return prepareTokenParams(sdk, options).then(function (tokenParams) {\n    var sessionTokenOverrides = {\n      prompt: 'none',\n      responseMode: 'okta_post_message',\n      display: null\n    };\n    var idpOverrides = {\n      display: 'popup'\n    };\n    if (options.sessionToken) {\n      Object.assign(tokenParams, sessionTokenOverrides);\n    } else if (options.idp) {\n      Object.assign(tokenParams, idpOverrides);\n    }\n    var requestUrl, endpoint, urls;\n    urls = getOAuthUrls(sdk, tokenParams);\n    endpoint = options.codeVerifier ? urls.tokenUrl : urls.authorizeUrl;\n    requestUrl = endpoint + buildAuthorizeParams(tokenParams);\n    var flowType;\n    if (tokenParams.sessionToken || tokenParams.display === null) {\n      flowType = 'IFRAME';\n    } else if (tokenParams.display === 'popup') {\n      flowType = 'POPUP';\n    } else {\n      flowType = 'IMPLICIT';\n    }\n    switch (flowType) {\n      case 'IFRAME':\n        var iframePromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n        var iframeEl = loadFrame(requestUrl);\n        return iframePromise.then(function (res) {\n          return handleOAuthResponse(sdk, tokenParams, res, urls);\n        }).finally(function () {\n          var _a;\n          if (document.body.contains(iframeEl)) {\n            (_a = iframeEl.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(iframeEl);\n          }\n        });\n      case 'POPUP':\n        var oauthPromise;\n        if (tokenParams.responseMode === 'okta_post_message') {\n          if (!sdk.features.isPopupPostMessageSupported()) {\n            throw new AuthSdkError('This browser doesn\\'t have full postMessage support');\n          }\n          oauthPromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n        }\n        if (popupWindow) {\n          popupWindow.location.assign(requestUrl);\n        }\n        var popupPromise = new Promise(function (resolve, reject) {\n          var closePoller = setInterval(function () {\n            if (!popupWindow || popupWindow.closed) {\n              clearInterval(closePoller);\n              reject(new AuthSdkError('Unable to parse OAuth flow response'));\n            }\n          }, 100);\n          oauthPromise.then(function (res) {\n            clearInterval(closePoller);\n            resolve(res);\n          }).catch(function (err) {\n            clearInterval(closePoller);\n            reject(err);\n          });\n        });\n        return popupPromise.then(function (res) {\n          return handleOAuthResponse(sdk, tokenParams, res, urls);\n        }).finally(function () {\n          if (popupWindow && !popupWindow.closed) {\n            popupWindow.close();\n          }\n        });\n      default:\n        throw new AuthSdkError('The full page redirect flow is not supported');\n    }\n  });\n}\nexport { getToken };","map":{"version":3,"names":["getToken","sdk","options","arguments","length","Promise","reject","AuthSdkError","popupWindow","undefined","prepareTokenParams","then","tokenParams","sessionTokenOverrides","prompt","responseMode","display","idpOverrides","sessionToken","Object","assign","idp","requestUrl","endpoint","urls","getOAuthUrls","codeVerifier","tokenUrl","authorizeUrl","buildAuthorizeParams","flowType","iframePromise","addPostMessageListener","timeout","state","iframeEl","loadFrame","res","handleOAuthResponse","finally","document","body","contains","_a","parentElement","removeChild","oauthPromise","features","isPopupPostMessageSupported","location","popupPromise","resolve","closePoller","setInterval","closed","clearInterval","catch","err","close"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/getToken.ts"],"sourcesContent":["\n/* global document */\n/* eslint-disable complexity, max-statements */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n  getOAuthUrls,\n  loadFrame,\n  addPostMessageListener\n} from './util';\n\nimport AuthSdkError from '../errors/AuthSdkError';\n\nimport {\n  OktaAuthOAuthInterface,\n  TokenParams,\n  PopupParams,\n  OAuthResponse,\n} from './types';\n\nimport { prepareTokenParams } from './util/prepareTokenParams';\nimport { buildAuthorizeParams } from './endpoints/authorize';\nimport { handleOAuthResponse } from './handleOAuthResponse';\n/*\n * Retrieve an idToken from an Okta or a third party idp\n *\n * Two main flows:\n *\n *  1) Exchange a sessionToken for a token\n *\n *    Required:\n *      clientId: passed via the OktaAuth constructor or into getToken\n *      sessionToken: 'yourtoken'\n *\n *    Optional:\n *      redirectUri: defaults to window.location.href\n *      scopes: defaults to ['openid', 'email']\n *\n *    Forced:\n *      prompt: 'none'\n *      responseMode: 'okta_post_message'\n *      display: undefined\n *\n *  2) Get a token from an idp\n *\n *    Required:\n *      clientId: passed via the OktaAuth constructor or into getToken\n *\n *    Optional:\n *      redirectUri: defaults to window.location.href\n *      scopes: defaults to ['openid', 'email']\n *      idp: defaults to Okta as an idp\n *      prompt: no default. Pass 'none' to throw an error if user is not signed in\n *\n *    Forced:\n *      display: 'popup'\n *\n *  Only common optional params shown. Any OAuth parameters not explicitly forced are available to override\n *\n * @param {Object} oauthOptions\n * @param {String} [oauthOptions.clientId] ID of this client\n * @param {String} [oauthOptions.redirectUri] URI that the iframe or popup will go to once authenticated\n * @param {String[]} [oauthOptions.scopes] OAuth 2.0 scopes to request (openid must be specified)\n * @param {String} [oauthOptions.idp] ID of an external IdP to use for user authentication\n * @param {String} [oauthOptions.sessionToken] Bootstrap Session Token returned by the Okta Authentication API\n * @param {String} [oauthOptions.prompt] Determines whether the Okta login will be displayed on failure.\n *                                       Use 'none' to prevent this behavior\n *\n * @param {Object} options\n * @param {Integer} [options.timeout] Time in ms before the flow is automatically terminated. Defaults to 120000\n * @param {String} [options.popupTitle] Title dispayed in the popup.\n *                                      Defaults to 'External Identity Provider User Authentication'\n */\nexport function getToken(sdk: OktaAuthOAuthInterface, options: TokenParams & PopupParams) {\n  if (arguments.length > 2) {\n    return Promise.reject(new AuthSdkError('As of version 3.0, \"getToken\" takes only a single set of options'));\n  }\n\n  options = options || {};\n\n  // window object cannot be serialized, save for later use\n  // TODO: move popup related params into a separate options object\n  const popupWindow = options.popupWindow;\n  options.popupWindow = undefined;\n\n  return prepareTokenParams(sdk, options)\n    .then(function (tokenParams: TokenParams) {\n\n      // Start overriding any options that don't make sense\n      var sessionTokenOverrides = {\n        prompt: 'none',\n        responseMode: 'okta_post_message',\n        display: null\n      };\n\n      var idpOverrides = {\n        display: 'popup'\n      };\n\n      if (options.sessionToken) {\n        Object.assign(tokenParams, sessionTokenOverrides);\n      } else if (options.idp) {\n        Object.assign(tokenParams, idpOverrides);\n      }\n\n      // Use the query params to build the authorize url\n      var requestUrl,\n        endpoint,\n        urls;\n\n      // Get authorizeUrl and issuer\n      urls = getOAuthUrls(sdk, tokenParams);\n      endpoint = options.codeVerifier ? urls.tokenUrl : urls.authorizeUrl;\n      requestUrl = endpoint + buildAuthorizeParams(tokenParams);\n\n      // Determine the flow type\n      var flowType;\n      if (tokenParams.sessionToken || tokenParams.display === null) {\n        flowType = 'IFRAME';\n      } else if (tokenParams.display === 'popup') {\n        flowType = 'POPUP';\n      } else {\n        flowType = 'IMPLICIT';\n      }\n\n      // Execute the flow type\n      switch (flowType) {\n        case 'IFRAME':\n          var iframePromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n          var iframeEl = loadFrame(requestUrl);\n          return iframePromise\n            .then(function (res) {\n              return handleOAuthResponse(sdk, tokenParams, res as OAuthResponse, urls);\n            })\n            .finally(function () {\n              if (document.body.contains(iframeEl)) {\n                iframeEl.parentElement?.removeChild(iframeEl);\n              }\n            });\n\n        case 'POPUP':\n          var oauthPromise; // resolves with OAuth response\n\n          // Add listener on postMessage before window creation, so\n          // postMessage isn't triggered before we're listening\n          if (tokenParams.responseMode === 'okta_post_message') {\n            if (!sdk.features.isPopupPostMessageSupported()) {\n              throw new AuthSdkError('This browser doesn\\'t have full postMessage support');\n            }\n            oauthPromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n          }\n\n          // Redirect for authorization\n          // popupWindown can be null when popup is blocked\n          if (popupWindow) { \n            popupWindow.location.assign(requestUrl);\n          }\n\n          // The popup may be closed without receiving an OAuth response. Setup a poller to monitor the window.\n          var popupPromise = new Promise(function (resolve, reject) {\n            var closePoller = setInterval(function () {\n              if (!popupWindow || popupWindow.closed) {\n                clearInterval(closePoller);\n                reject(new AuthSdkError('Unable to parse OAuth flow response'));\n              }\n            }, 100);\n\n            // Proxy the OAuth promise results\n            oauthPromise\n              .then(function (res) {\n                clearInterval(closePoller);\n                resolve(res);\n              })\n              .catch(function (err) {\n                clearInterval(closePoller);\n                reject(err);\n              });\n          });\n\n          return popupPromise\n            .then(function (res) {\n              return handleOAuthResponse(sdk, tokenParams, res as OAuthResponse, urls);\n            })\n            .finally(function () {\n              if (popupWindow && !popupWindow.closed) {\n                popupWindow.close();\n              }\n            });\n\n        default:\n          throw new AuthSdkError('The full page redirect flow is not supported');\n      }\n    });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}