{"ast":null,"code":"var _jsxFileName = \"/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/src/LoginCallback.js\",\n  _s = $RefreshSig$();\nimport { useOktaAuth } from '@okta/okta-react';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginCallback = () => {\n  _s();\n  const {\n    oktaAuth\n  } = useOktaAuth();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const handleTokenExchange = async () => {\n      try {\n        // Get the Okta token from the URL parameters or from auth state\n        const {\n          tokens\n        } = await oktaAuth.handleRedirect();\n        console.log(\"The console okta token is:\");\n        if (tokens && tokens.idToken) {\n          // Send the Okta token to your server's /login endpoint\n          axios.post('http://localhost:5000/login', {\n            okta_token: tokens.idToken\n          }).then(response => {\n            if (response.data.access_token) {\n              // Store the token securely (localStorage or sessionStorage)\n              localStorage.setItem('token', response.data.access_token);\n\n              // Redirect to the /customer_service route\n              navigate('/customer_service');\n\n              // You can now navigate to the protected route if needed\n              // Example: navigate('/customer_service');\n            } else {\n              console.error('Access token not received');\n            }\n          }).catch(error => {\n            console.error('Error sending token to server:', error);\n          });\n        }\n      } catch (error) {\n        console.error('Token exchange error:', error);\n      }\n    };\n    handleTokenExchange();\n  }, [oktaAuth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Logging in...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n_s(LoginCallback, \"oN4G2EAv9MYL7hGF8b5HAAvxlbg=\", false, function () {\n  return [useOktaAuth, useNavigate];\n});\n_c = LoginCallback;\nexport default LoginCallback;\nvar _c;\n$RefreshReg$(_c, \"LoginCallback\");","map":{"version":3,"names":["useOktaAuth","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","LoginCallback","_s","oktaAuth","navigate","handleTokenExchange","tokens","handleRedirect","console","log","idToken","post","okta_token","then","response","data","access_token","localStorage","setItem","error","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/src/LoginCallback.js"],"sourcesContent":["import { useOktaAuth } from '@okta/okta-react';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst LoginCallback = () => {\n  const { oktaAuth } = useOktaAuth();  \n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleTokenExchange = async () => {\n      try {\n        // Get the Okta token from the URL parameters or from auth state\n        const { tokens } = await oktaAuth.handleRedirect();\n        console.log(\"The console okta token is:\", )\n\n        if (tokens && tokens.idToken) {\n          // Send the Okta token to your server's /login endpoint\n          axios\n            .post('http://localhost:5000/login', { okta_token: tokens.idToken })\n            .then((response) => {\n              if (response.data.access_token) {\n                // Store the token securely (localStorage or sessionStorage)\n                localStorage.setItem('token', response.data.access_token);\n\n                // Redirect to the /customer_service route\n                navigate('/customer_service');\n\n                // You can now navigate to the protected route if needed\n                // Example: navigate('/customer_service');\n              } else {\n                console.error('Access token not received');\n              }\n            })\n            .catch((error) => {\n              console.error('Error sending token to server:', error);\n            });\n        }\n      } catch (error) {\n        console.error('Token exchange error:', error);\n      }\n    };\n\n    handleTokenExchange();\n  }, [oktaAuth]);\n\n  return <div>Logging in...</div>;\n};\n\nexport default LoginCallback;\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAS,CAAC,GAAGR,WAAW,CAAC,CAAC;EAClC,MAAMS,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMS,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,MAAM;UAAEC;QAAO,CAAC,GAAG,MAAMH,QAAQ,CAACI,cAAc,CAAC,CAAC;QAClDC,OAAO,CAACC,GAAG,CAAC,4BAA8B,CAAC;QAE3C,IAAIH,MAAM,IAAIA,MAAM,CAACI,OAAO,EAAE;UAC5B;UACAb,KAAK,CACFc,IAAI,CAAC,6BAA6B,EAAE;YAAEC,UAAU,EAAEN,MAAM,CAACI;UAAQ,CAAC,CAAC,CACnEG,IAAI,CAAEC,QAAQ,IAAK;YAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,YAAY,EAAE;cAC9B;cACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC;;cAEzD;cACAZ,QAAQ,CAAC,mBAAmB,CAAC;;cAE7B;cACA;YACF,CAAC,MAAM;cACLI,OAAO,CAACW,KAAK,CAAC,2BAA2B,CAAC;YAC5C;UACF,CAAC,CAAC,CACDC,KAAK,CAAED,KAAK,IAAK;YAChBX,OAAO,CAACW,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;UACxD,CAAC,CAAC;QACN;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDd,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,oBAAOH,OAAA;IAAAqB,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACjC,CAAC;AAACvB,EAAA,CA1CID,aAAa;EAAA,QACIN,WAAW,EACfG,WAAW;AAAA;AAAA4B,EAAA,GAFxBzB,aAAa;AA4CnB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}