{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\nvar Remediator = /*#__PURE__*/function () {\n  function Remediator(remediation) {\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, Remediator);\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n  _createClass(Remediator, [{\n    key: \"formatAuthenticators\",\n    value: function formatAuthenticators() {\n      this.values.authenticators = this.values.authenticators || [];\n      this.values.authenticators = this.values.authenticators.map(function (authenticator) {\n        return formatAuthenticator(authenticator);\n      });\n      if (this.values.authenticator) {\n        var authenticator = formatAuthenticator(this.values.authenticator);\n        var hasAuthenticatorInList = this.values.authenticators.some(function (existing) {\n          return compareAuthenticators(authenticator, existing);\n        });\n        if (!hasAuthenticatorInList) {\n          this.values.authenticators.push(authenticator);\n        }\n      }\n      this.values.authenticatorsData = this.values.authenticators.reduce(function (acc, authenticator) {\n        if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n          acc.push(authenticator);\n        }\n        return acc;\n      }, this.values.authenticatorsData || []);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.remediation.name;\n    }\n  }, {\n    key: \"canRemediate\",\n    value: function canRemediate(context) {\n      var _this = this;\n      var required = getRequiredValues(this.remediation);\n      var needed = required.find(function (key) {\n        return !_this.hasData(key);\n      });\n      if (needed) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key) {\n      var _this2 = this;\n      if (!key) {\n        var allValues = getAllValues(this.remediation);\n        var res = allValues.reduce(function (data, key) {\n          data[key] = _this2.getData(key);\n          return data;\n        }, {});\n        return res;\n      }\n      if (typeof this[\"map\".concat(titleCase(key))] === 'function') {\n        var val = this[\"map\".concat(titleCase(key))](this.remediation.value.find(function (_ref) {\n          var name = _ref.name;\n          return name === key;\n        }));\n        if (val) {\n          return val;\n        }\n      }\n      if (this.map && this.map[key]) {\n        var entry = this.map[key];\n        for (var i = 0; i < entry.length; i++) {\n          var _val = this.values[entry[i]];\n          if (_val) {\n            return _val;\n          }\n        }\n      }\n      return this.values[key];\n    }\n  }, {\n    key: \"hasData\",\n    value: function hasData(key) {\n      return !!this.getData(key);\n    }\n  }, {\n    key: \"getNextStep\",\n    value: function getNextStep(_authClient, _context) {\n      var name = this.getName();\n      var inputs = this.getInputs();\n      var authenticator = this.getAuthenticator();\n      var type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n      return Object.assign(Object.assign({\n        name: name,\n        inputs: inputs\n      }, type && {\n        type: type\n      }), authenticator && {\n        authenticator: authenticator\n      });\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs() {\n      var _this3 = this;\n      var inputs = [];\n      var inputsFromRemediation = this.remediation.value || [];\n      inputsFromRemediation.forEach(function (inputFromRemediation) {\n        var input;\n        var name = inputFromRemediation.name,\n          type = inputFromRemediation.type,\n          visible = inputFromRemediation.visible,\n          messages = inputFromRemediation.messages;\n        if (visible === false) {\n          return;\n        }\n        if (typeof _this3[\"getInput\".concat(titleCase(name))] === 'function') {\n          input = _this3[\"getInput\".concat(titleCase(name))](inputFromRemediation);\n        } else if (type !== 'object') {\n          var alias;\n          var aliases = (_this3.map ? _this3.map[name] : null) || [];\n          if (aliases.length === 1) {\n            alias = aliases[0];\n          } else {\n            alias = aliases.find(function (name) {\n              return Object.keys(_this3.values).includes(name);\n            });\n          }\n          if (alias) {\n            input = Object.assign(Object.assign({}, inputFromRemediation), {\n              name: alias\n            });\n          }\n        }\n        if (!input) {\n          input = inputFromRemediation;\n        }\n        if (Array.isArray(input)) {\n          input.forEach(function (i) {\n            return inputs.push(i);\n          });\n        } else {\n          if (messages) {\n            input.messages = messages;\n          }\n          inputs.push(input);\n        }\n      });\n      return inputs;\n    }\n  }, {\n    key: \"getValuesAfterProceed\",\n    value: function getValuesAfterProceed() {\n      var inputsFromRemediation = this.remediation.value || [];\n      var inputsFromRemediator = this.getInputs();\n      var inputs = [].concat(_toConsumableArray(inputsFromRemediation), _toConsumableArray(inputsFromRemediator));\n      var _iterator = _createForOfIteratorHelper(inputs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var input = _step.value;\n          delete this.values[input.name];\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this.values;\n    }\n  }, {\n    key: \"getAuthenticator\",\n    value: function getAuthenticator() {\n      var _a, _b;\n      var relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n      if (!relatesTo) {\n        return;\n      }\n      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n      if (!authenticatorFromRemediation) {\n        return relatesTo;\n      }\n      var id = authenticatorFromRemediation.form.value.find(function (_ref2) {\n        var name = _ref2.name;\n        return name === 'id';\n      }).value;\n      var enrollmentId = (_b = authenticatorFromRemediation.form.value.find(function (_ref3) {\n        var name = _ref3.name;\n        return name === 'enrollmentId';\n      })) === null || _b === void 0 ? void 0 : _b.value;\n      return Object.assign(Object.assign({}, relatesTo), {\n        id: id,\n        enrollmentId: enrollmentId\n      });\n    }\n  }], [{\n    key: \"getMessages\",\n    value: function getMessages(remediation) {\n      var _a, _b;\n      if (!remediation.value) {\n        return;\n      }\n      return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce(function (messages, field) {\n        if (field.messages) {\n          messages = [].concat(_toConsumableArray(messages), _toConsumableArray(field.messages.value));\n        }\n        return messages;\n      }, []);\n    }\n  }]);\n  return Remediator;\n}();\nexport { Remediator };","map":{"version":3,"names":["Remediator","remediation","values","arguments","length","undefined","options","_classCallCheck","Object","assign","formatAuthenticators","_createClass","key","value","authenticators","map","authenticator","formatAuthenticator","hasAuthenticatorInList","some","existing","compareAuthenticators","push","authenticatorsData","reduce","acc","keys","getName","name","canRemediate","context","_this","required","getRequiredValues","needed","find","hasData","getData","_this2","allValues","getAllValues","res","data","concat","titleCase","val","_ref","entry","i","getNextStep","_authClient","_context","inputs","getInputs","getAuthenticator","type","_this3","inputsFromRemediation","forEach","inputFromRemediation","input","visible","messages","alias","aliases","includes","Array","isArray","getValuesAfterProceed","inputsFromRemediator","_toConsumableArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","relatesTo","_a","authenticatorFromRemediation","getAuthenticatorFromRemediation","id","form","_ref2","enrollmentId","_b","_ref3","getMessages","field"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/Base/Remediator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable complexity */\nimport { OktaAuthIdxInterface, NextStep, IdxMessage, Authenticator, Input, RemediateOptions } from '../../types';\nimport { IdxAuthenticator, IdxRemediation, IdxContext } from '../../types/idx-js';\nimport { getAllValues, getRequiredValues, titleCase, getAuthenticatorFromRemediation } from '../util';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util';\n\n// A map from IDX data values (server spec) to RemediationValues (client spec)\nexport type IdxToRemediationValueMap = Record<string, string[]>;\n\nexport interface RemediationValues {\n  stateHandle?: string;\n  authenticators?: (Authenticator | string)[];\n  authenticator?: string | Authenticator;\n  authenticatorsData?: Authenticator[];\n  resend?: boolean;\n}\n\nexport interface RemediatorConstructor {\n  new<T extends RemediationValues>(\n    remediation: IdxRemediation, \n    values?: T, \n    options?: RemediateOptions\n  ): any;\n}\n\n// Base class - DO NOT expose static remediationName\nexport class Remediator<T extends RemediationValues = RemediationValues> {\n  static remediationName: string;\n\n  remediation: IdxRemediation;\n  values: T;\n  options: RemediateOptions;\n  map?: IdxToRemediationValueMap;\n\n  constructor(\n    remediation: IdxRemediation, \n    values: T = {} as T, \n    options: RemediateOptions = {}\n  ) {\n    // assign fields to the instance\n    this.values = { ...values };\n    this.options = { ...options };\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  private formatAuthenticators() {\n    this.values.authenticators = (this.values.authenticators || []) as Authenticator[];\n\n    // ensure authenticators are in the correct format\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    // add authenticator (if any) to \"authenticators\"\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    // save non-key meta to \"authenticatorsData\" field\n    // authenticators will be removed after selection to avoid select-authenticator loop\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        // save authenticator meta into authenticator data\n        acc.push(authenticator);\n      }\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName(): string {\n    return this.remediation.name;\n  }\n\n  // Override this method to provide custom check\n  /* eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars */\n  canRemediate(context?: IdxContext): boolean {\n    const required = getRequiredValues(this.remediation);\n    const needed = required!.find((key) => !this.hasData(key));\n    if (needed) {\n      return false; // missing data for a required field\n    }\n    return true; // all required fields have available data\n  }\n\n  // returns an object for the entire remediation form, or just a part\n  getData(key?: string) {\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues!.reduce((data, key) => {\n        data[key] = this.getData(key); // recursive\n        return data;\n      }, {});\n      return res;\n    }\n\n    // Map value by \"map${Property}\" function in each subClass\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](\n        this.remediation.value!.find(({name}) => name === key)\n      );\n      if (val) {\n        return val;\n      }\n    }\n\n    // If a map is defined for this key, return the first aliased property that returns a truthy value\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    // fallback: return the value by key\n    return this.values[key];\n  }\n\n  hasData(\n    key: string // idx name\n  ): boolean \n  {\n    // no attempt to format, we want simple true/false\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient: OktaAuthIdxInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    // TODO: remove type field in the next major version change\n    // https://oktainc.atlassian.net/browse/OKTA-431749\n    const type = authenticator?.type;\n    return { \n      name, \n      inputs, \n      ...(type && { type }),\n      ...(authenticator && { authenticator }),\n    };\n  }\n\n  // Get inputs for the next step\n  getInputs(): Input[] {\n    const inputs: Input[] = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let { name, type, visible, messages } = inputFromRemediation;\n      if (visible === false) {\n        return; // Filter out invisible inputs, like stateHandle\n      }\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        // handle general primitive types\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          // try find key from values\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n        if (alias) {\n          input = { ...inputFromRemediation, name: alias };\n        }\n      }\n      if (!input) {\n        input = inputFromRemediation;\n      }\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        // guarantees field-level messages are passed back\n        if (messages) {\n          input.messages = messages;\n        }\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation: IdxRemediation): IdxMessage[] | undefined {\n    if (!remediation.value) {\n      return;\n    }\n    return remediation.value[0]?.form?.value.reduce((messages: IdxMessage[], field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n      return messages;\n    }, []);\n  }\n\n  // Prepare values for the next remediation\n  // In general, remove used values from inputs for the current remediation\n  // Override this method if special cases need be handled\n  getValuesAfterProceed(): T {\n    const inputsFromRemediation = this.remediation.value || []; // \"raw\" inputs from server response\n    const inputsFromRemediator = this.getInputs(); // \"aliased\" inputs from SDK remediator\n    const inputs = [\n      ...inputsFromRemediation,\n      ...inputsFromRemediator\n    ];\n    // scrub all values related to this remediation\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n    return this.values;\n  }\n\n  protected getAuthenticator(): IdxAuthenticator | undefined {\n    // relatesTo value may be an authenticator or an authenticatorEnrollment\n    const relatesTo = this.remediation.relatesTo?.value;\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    if (!authenticatorFromRemediation) {\n      // Hopefully value is an authenticator\n      return relatesTo;\n    }\n\n    // If relatesTo is an authenticatorEnrollment, the id is actually the enrollmentId\n    // Let's get the correct authenticator id from the form value\n    const id = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'id')!.value as string;\n    const enrollmentId = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'enrollmentId')?.value as string;\n\n    return {\n      ...relatesTo,\n      id,\n      enrollmentId\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}