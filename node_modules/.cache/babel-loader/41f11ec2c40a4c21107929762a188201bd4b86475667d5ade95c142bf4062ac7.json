{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\nclass EnrollmentChannelData extends Remediator {\n  getInputEmail() {\n    return [{\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: 'Email'\n    }];\n  }\n  getInputPhoneNumber() {\n    return [{\n      name: 'phoneNumber',\n      type: 'string',\n      required: true,\n      label: 'Phone Number'\n    }];\n  }\n  canRemediate() {\n    return Boolean(this.values.email || this.values.phoneNumber);\n  }\n  getNextStep(authClient, context) {\n    const common = super.getNextStep(authClient, context);\n    const authenticator = context.currentAuthenticator.value;\n    return Object.assign(Object.assign({}, common), {\n      authenticator\n    });\n  }\n  getData() {\n    return {\n      stateHandle: this.values.stateHandle,\n      email: this.values.email,\n      phoneNumber: this.values.phoneNumber\n    };\n  }\n  getValuesAfterProceed() {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n}\nEnrollmentChannelData.remediationName = 'enrollment-channel-data';\nexport { EnrollmentChannelData };","map":{"version":3,"names":["EnrollmentChannelData","Remediator","getInputEmail","name","type","required","label","getInputPhoneNumber","canRemediate","Boolean","values","email","phoneNumber","getNextStep","authClient","context","common","authenticator","currentAuthenticator","value","Object","assign","getData","stateHandle","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","includes","reduce","remediationName"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/EnrollmentChannelData.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { IdxContext } from '../types/idx-js';\nimport { OktaAuthIdxInterface } from '../types';\n\n\nexport type EnrollmentChannelDataValues = RemediationValues & {\n  email?: string;\n  phoneNumber?: string;\n};\n\nexport class EnrollmentChannelData extends Remediator<EnrollmentChannelDataValues> {\n  static remediationName = 'enrollment-channel-data';\n\n  getInputEmail() {\n    return [\n      { name: 'email', type: 'string', required: true, label: 'Email' },\n    ];\n  }\n\n  getInputPhoneNumber() {\n    return [\n      { name: 'phoneNumber', type: 'string', required: true, label: 'Phone Number' },\n    ];\n  }\n\n  canRemediate() {\n    return Boolean(this.values.email || this.values.phoneNumber);\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, context: IdxContext) {\n    const common = super.getNextStep(authClient, context);\n    const authenticator = context.currentAuthenticator.value;\n    return {\n      ...common,\n      authenticator,\n    };\n  }\n\n  getData() {\n    return {\n      stateHandle: this.values.stateHandle,\n      email: this.values.email,\n      phoneNumber: this.values.phoneNumber\n    };\n  }\n\n  getValuesAfterProceed(): EnrollmentChannelDataValues {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAuBM,MAAOA,qBAAsB,SAAQC,UAAuC;EAGhFC,aAAaA,CAAA;IACX,OAAO,CACL;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAS,EAClE;EACF;EAEDC,mBAAmBA,CAAA;IACjB,OAAO,CACL;MAAEJ,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAgB,EAC/E;EACF;EAEDE,YAAYA,CAAA;IACV,OAAOC,OAAO,CAAC,IAAI,CAACC,MAAM,CAACC,KAAK,IAAI,IAAI,CAACD,MAAM,CAACE,WAAW,CAAC;EAC7D;EAEDC,WAAWA,CAACC,UAAgC,EAAEC,OAAmB;IAC/D,MAAMC,MAAM,GAAG,KAAK,CAACH,WAAW,CAACC,UAAU,EAAEC,OAAO,CAAC;IACrD,MAAME,aAAa,GAAGF,OAAO,CAACG,oBAAoB,CAACC,KAAK;IACxD,OACKC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAL,MAAM,CACT;MAAAC;IAAa,CACb;EACH;EAEDK,OAAOA,CAAA;IACL,OAAO;MACLC,WAAW,EAAE,IAAI,CAACb,MAAM,CAACa,WAAW;MACpCZ,KAAK,EAAE,IAAI,CAACD,MAAM,CAACC,KAAK;MACxBC,WAAW,EAAE,IAAI,CAACF,MAAM,CAACE;KAC1B;EACF;EAEDY,qBAAqBA,CAAA;IACnB,IAAIC,aAAa,GAAGL,MAAM,CAACM,IAAI,CAAC,IAAI,CAAChB,MAAM,CAAC,CAACiB,MAAM,CAACC,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,CAAC;IAC7G,OAAOH,aAAa,CAACK,MAAM,CAAC,CAACpB,MAAM,EAAEkB,QAAQ,KAAKR,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAKX,MAAM;MAAE,CAACkB,QAAQ,GAAG,IAAI,CAAClB,MAAM,CAACkB,QAAQ;IAAG,IAAE,EAAE,CAAC;EACxG;;AAtCM5B,qBAAe,CAAA+B,eAAA,GAAG,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}