{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getSavedTransactionMeta, createTransactionMeta, saveTransactionMeta } from './transactionMeta.js';\nimport { removeNils } from '../util/object.js';\nimport { getOAuthBaseUrl } from '../oidc/util/oauth.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nfunction getResponse(meta) {\n  return {\n    meta: meta,\n    interactionHandle: meta.interactionHandle,\n    state: meta.state\n  };\n}\nfunction interact(_x) {\n  return _interact.apply(this, arguments);\n}\nfunction _interact() {\n  _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n      meta,\n      baseUrl,\n      _meta,\n      clientId,\n      redirectUri,\n      state,\n      scopes,\n      withCredentials,\n      codeChallenge,\n      codeChallengeMethod,\n      activationToken,\n      recoveryToken,\n      maxAge,\n      acrValues,\n      nonce,\n      clientSecret,\n      url,\n      params,\n      headers,\n      resp,\n      interactionHandle,\n      newMeta,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          options = removeNils(options);\n          meta = getSavedTransactionMeta(authClient, options);\n          if (!(meta === null || meta === void 0 ? void 0 : meta.interactionHandle)) {\n            _context.next = 5;\n            break;\n          }\n          return _context.abrupt(\"return\", getResponse(meta));\n        case 5:\n          _context.next = 7;\n          return createTransactionMeta(authClient, Object.assign(Object.assign({}, meta), options));\n        case 7:\n          meta = _context.sent;\n          baseUrl = getOAuthBaseUrl(authClient);\n          _meta = meta, clientId = _meta.clientId, redirectUri = _meta.redirectUri, state = _meta.state, scopes = _meta.scopes, withCredentials = _meta.withCredentials, codeChallenge = _meta.codeChallenge, codeChallengeMethod = _meta.codeChallengeMethod, activationToken = _meta.activationToken, recoveryToken = _meta.recoveryToken, maxAge = _meta.maxAge, acrValues = _meta.acrValues, nonce = _meta.nonce;\n          clientSecret = options.clientSecret || authClient.options.clientSecret;\n          withCredentials = withCredentials !== null && withCredentials !== void 0 ? withCredentials : true;\n          url = \"\".concat(baseUrl, \"/v1/interact\");\n          params = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n            client_id: clientId,\n            scope: scopes.join(' '),\n            redirect_uri: redirectUri,\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n            state: state\n          }, activationToken && {\n            activation_token: activationToken\n          }), recoveryToken && {\n            recovery_token: recoveryToken\n          }), clientSecret && {\n            client_secret: clientSecret\n          }), maxAge && {\n            max_age: maxAge\n          }), acrValues && {\n            acr_values: acrValues\n          }), nonce && {\n            nonce: nonce\n          });\n          headers = {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          };\n          _context.next = 17;\n          return httpRequest(authClient, {\n            method: 'POST',\n            url: url,\n            headers: headers,\n            withCredentials: withCredentials,\n            args: params\n          });\n        case 17:\n          resp = _context.sent;\n          interactionHandle = resp.interaction_handle;\n          newMeta = Object.assign(Object.assign({}, meta), {\n            interactionHandle: interactionHandle,\n            withCredentials: withCredentials,\n            state: state,\n            scopes: scopes,\n            recoveryToken: recoveryToken,\n            activationToken: activationToken\n          });\n          saveTransactionMeta(authClient, newMeta);\n          return _context.abrupt(\"return\", getResponse(newMeta));\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _interact.apply(this, arguments);\n}\nexport { interact };","map":{"version":3,"names":["getResponse","meta","interactionHandle","state","interact","_x","_interact","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authClient","options","baseUrl","_meta","clientId","redirectUri","scopes","withCredentials","codeChallenge","codeChallengeMethod","activationToken","recoveryToken","maxAge","acrValues","nonce","clientSecret","url","params","headers","resp","newMeta","_args","wrap","_callee$","_context","prev","next","length","undefined","removeNils","getSavedTransactionMeta","abrupt","createTransactionMeta","Object","assign","sent","getOAuthBaseUrl","concat","client_id","scope","join","redirect_uri","code_challenge","code_challenge_method","activation_token","recovery_token","client_secret","max_age","acr_values","httpRequest","method","args","interaction_handle","saveTransactionMeta","stop"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/interact.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/* eslint complexity:[0,8] */\nimport { OktaAuthIdxInterface, IdxTransactionMeta, InteractOptions, InteractResponse } from './types';\nimport { getSavedTransactionMeta, saveTransactionMeta, createTransactionMeta } from './transactionMeta';\nimport { getOAuthBaseUrl } from '../oidc';\nimport { removeNils } from '../util';\nimport { httpRequest } from '../http';\n\n\n/* eslint-disable camelcase */\nexport interface InteractParams {\n  client_id: string;\n  scope: string;\n  redirect_uri: string;\n  code_challenge: string;\n  code_challenge_method: string;\n  state: string;\n  activation_token?: string;\n  recovery_token?: string;\n  client_secret?: string;\n  max_age?: string | number;\n  acr_values?: string;\n  nonce?: string;\n}\n/* eslint-enable camelcase */\n\nfunction getResponse(meta: IdxTransactionMeta): InteractResponse {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle!,\n    state: meta.state\n  };\n}\n\n// Begin or resume a transaction. Returns an interaction handle\nexport async function interact (\n  authClient: OktaAuthIdxInterface, \n  options: InteractOptions = {}\n): Promise<InteractResponse> {\n  options = removeNils(options);\n\n  let meta = getSavedTransactionMeta(authClient, options);\n  // If meta exists, it has been validated against all options\n\n  if (meta?.interactionHandle) {\n    return getResponse(meta); // Saved transaction, return meta\n  }\n\n  // Create new meta, respecting previous meta if it has been set and is not overridden\n  meta = await createTransactionMeta(authClient, { ...meta, ...options });\n  const baseUrl = getOAuthBaseUrl(authClient);\n  let {\n    clientId,\n    redirectUri,\n    state,\n    scopes,\n    withCredentials,\n    codeChallenge,\n    codeChallengeMethod,\n    activationToken,\n    recoveryToken,\n    maxAge,\n    acrValues,\n    nonce\n  } = meta as IdxTransactionMeta;\n  const clientSecret = options.clientSecret || authClient.options.clientSecret;\n  withCredentials = withCredentials ?? true;\n\n  /* eslint-disable camelcase */\n  const url = `${baseUrl}/v1/interact`;\n  const params = {\n    client_id: clientId,\n    scope: scopes!.join(' '),\n    redirect_uri: redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: codeChallengeMethod,\n    state,\n    ...(activationToken && { activation_token: activationToken }),\n    ...(recoveryToken && { recovery_token: recoveryToken }),\n    // X-Device-Token header need to pair with `client_secret`\n    // eslint-disable-next-line max-len\n    // https://oktawiki.atlassian.net/wiki/spaces/eng/pages/2445902453/Support+Device+Binding+in+interact#Scenario-1%3A-Non-User-Agent-with-Confidential-Client-(top-priority)\n    ...(clientSecret && { client_secret: clientSecret }),\n    ...(maxAge && { max_age: maxAge }),\n    ...(acrValues && { acr_values: acrValues }),\n    ...(nonce && { nonce }),\n  } as InteractParams;\n  /* eslint-enable camelcase */\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n\n  const resp = await httpRequest(authClient, {\n    method: 'POST',\n    url,\n    headers,\n    withCredentials,\n    args: params\n  });\n  const interactionHandle = resp.interaction_handle;\n\n  const newMeta = {\n    ...meta,\n    interactionHandle,\n    \n    // Options which can be passed into interact() should be saved in the meta\n    withCredentials,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken\n  };\n  // Save transaction meta so it can be resumed\n  saveTransactionMeta(authClient, newMeta);\n\n  return getResponse(newMeta);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAqCA,SAASA,WAAWA,CAACC,IAAwB;EAC3C,OAAO;IACLA,IAAI,EAAJA,IAAI;IACJC,iBAAiB,EAAED,IAAI,CAACC,iBAAkB;IAC1CC,KAAK,EAAEF,IAAI,CAACE;GACb;AACH;AAAC,SAGqBC,QAAQA,CAAAC,EAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,UAAA;EAAAA,SAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAvB,SAAAC,QACLC,UAAgC;IAAA,IAAAC,OAAA;MAAAb,IAAA;MAAAc,OAAA;MAAAC,KAAA;MAAAC,QAAA;MAAAC,WAAA;MAAAf,KAAA;MAAAgB,MAAA;MAAAC,eAAA;MAAAC,aAAA;MAAAC,mBAAA;MAAAC,eAAA;MAAAC,aAAA;MAAAC,MAAA;MAAAC,SAAA;MAAAC,KAAA;MAAAC,YAAA;MAAAC,GAAA;MAAAC,MAAA;MAAAC,OAAA;MAAAC,IAAA;MAAA9B,iBAAA;MAAA+B,OAAA;MAAAC,KAAA,GAAA1B,SAAA;IAAA,OAAAE,mBAAA,GAAAyB,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAChCzB,OAAA,GAAAoB,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAA2B,EAAE;UAE7BpB,OAAO,GAAG4B,UAAU,CAAC5B,OAAO,CAAC;UAEzBb,IAAI,GAAG0C,uBAAuB,CAAC9B,UAAU,EAAEC,OAAO,CAAC;UAAA,MAGnDb,IAAI,KAAJ,QAAAA,IAAI,uBAAJA,IAAI,CAAEC,iBAAiB;YAAAmC,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAO,MAAA,WAClB5C,WAAW,CAACC,IAAI,CAAC;QAAA;UAAAoC,QAAA,CAAAE,IAAA;UAAA,OAIbM,qBAAqB,CAAChC,UAAU,EAAAiC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAO9C,IAAI,GAAKa,OAAO,EAAG;QAAA;UAAvEb,IAAI,GAAAoC,QAAA,CAAAW,IAAA;UACEjC,OAAO,GAAGkC,eAAe,CAACpC,UAAU,CAAC;UAAAG,KAAA,GAcvCf,IAA0B,EAZ5BgB,QAAQ,GAAAD,KAAA,CAARC,QAAQ,EACRC,WAAW,GAAAF,KAAA,CAAXE,WAAW,EACXf,KAAK,GAAAa,KAAA,CAALb,KAAK,EACLgB,MAAM,GAAAH,KAAA,CAANG,MAAM,EACNC,eAAe,GAAAJ,KAAA,CAAfI,eAAe,EACfC,aAAa,GAAAL,KAAA,CAAbK,aAAa,EACbC,mBAAmB,GAAAN,KAAA,CAAnBM,mBAAmB,EACnBC,eAAe,GAAAP,KAAA,CAAfO,eAAe,EACfC,aAAa,GAAAR,KAAA,CAAbQ,aAAa,EACbC,MAAM,GAAAT,KAAA,CAANS,MAAM,EACNC,SAAS,GAAAV,KAAA,CAATU,SAAS,EACTC,KAAK,GAAAX,KAAA,CAALW,KAAK;UAEDC,YAAY,GAAGd,OAAO,CAACc,YAAY,IAAIf,UAAU,CAACC,OAAO,CAACc,YAAY;UAC5ER,eAAe,GAAGA,eAAe,KAAf,QAAAA,eAAe,cAAfA,eAAe,GAAI,IAAI;UAGnCS,GAAG,MAAAqB,MAAA,CAAMnC,OAAO;UAChBe,MAAM,GAAGgB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;YACbI,SAAS,EAAElC,QAAQ;YACnBmC,KAAK,EAAEjC,MAAO,CAACkC,IAAI,CAAC,GAAG,CAAC;YACxBC,YAAY,EAAEpC,WAAW;YACzBqC,cAAc,EAAElC,aAAa;YAC7BmC,qBAAqB,EAAElC,mBAAmB;YAC1CnB,KAAK,EAALA;UAAK,GACDoB,eAAe,IAAI;YAAEkC,gBAAgB,EAAElC;UAAe,CACvD,GAACC,aAAa,IAAI;YAAEkC,cAAc,EAAElC;UAAa,CAAE,GAIlDI,YAAY,IAAI;YAAE+B,aAAa,EAAE/B;UAAY,CAAE,CAChD,EAACH,MAAM,IAAI;YAAEmC,OAAO,EAAEnC;UAAQ,IAC7BC,SAAS,IAAI;YAAEmC,UAAU,EAAEnC;UAAW,EACvC,EAACC,KAAK,IAAI;YAAEA,KAAK,EAALA;UAAO,EACL;UAGbI,OAAO,GAAG;YACd,cAAc,EAAE;WACjB;UAAAM,QAAA,CAAAE,IAAA;UAAA,OAEkBuB,WAAW,CAACjD,UAAU,EAAE;YACzCkD,MAAM,EAAE,MAAM;YACdlC,GAAG,EAAHA,GAAG;YACHE,OAAO,EAAPA,OAAO;YACPX,eAAe,EAAfA,eAAe;YACf4C,IAAI,EAAElC;UACP,EAAC;QAAA;UANIE,IAAI,GAAAK,QAAA,CAAAW,IAAA;UAOJ9C,iBAAiB,GAAG8B,IAAI,CAACiC,kBAAkB;UAE3ChC,OAAO,GAAAa,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACR9C,IAAI;YACPC,iBAAiB,EAAjBA,iBAAiB;YAGjBkB,eAAe,EAAfA,eAAe;YACfjB,KAAK,EAALA,KAAK;YACLgB,MAAM,EAANA,MAAM;YACNK,aAAa,EAAbA,aAAa;YACbD,eAAe,EAAfA;UAAe,EAChB;UAED2C,mBAAmB,CAACrD,UAAU,EAAEoB,OAAO,CAAC;UAAC,OAAAI,QAAA,CAAAO,MAAA,WAElC5C,WAAW,CAACiC,OAAO,CAAC;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAA8B,IAAA;MAAA;IAAA,GAAAvD,OAAA;EAAA,CAC7B;EAAA,OAAAN,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}