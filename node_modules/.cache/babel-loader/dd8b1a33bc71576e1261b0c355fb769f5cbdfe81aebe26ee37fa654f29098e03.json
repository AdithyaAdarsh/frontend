{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport PCancelable from 'p-cancelable';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getConsole } from '../util/console.js';\nimport { PromiseQueue } from '../util/PromiseQueue.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nimport { EVENT_ADDED, EVENT_REMOVED } from '../oidc/types/TokenManager.js';\nconst INITIAL_AUTH_STATE = null;\nconst DEFAULT_PENDING = {\n  updateAuthStatePromise: null,\n  canceledTimes: 0\n};\nconst EVENT_AUTH_STATE_CHANGE = 'authStateChange';\nconst MAX_PROMISE_CANCEL_TIMES = 10;\nconst isSameAuthState = (prevState, state) => {\n  if (!prevState) {\n    return false;\n  }\n  return prevState.isAuthenticated === state.isAuthenticated && JSON.stringify(prevState.idToken) === JSON.stringify(state.idToken) && JSON.stringify(prevState.accessToken) === JSON.stringify(state.accessToken) && prevState.error === state.error;\n};\nclass AuthStateManager {\n  constructor(sdk) {\n    if (!sdk.emitter) {\n      throw new AuthSdkError('Emitter should be initialized before AuthStateManager');\n    }\n    this._sdk = sdk;\n    this._pending = Object.assign({}, DEFAULT_PENDING);\n    this._authState = INITIAL_AUTH_STATE;\n    this._logOptions = {};\n    this._prevAuthState = null;\n    this._transformQueue = new PromiseQueue({\n      quiet: true\n    });\n    sdk.tokenManager.on(EVENT_ADDED, (key, token) => {\n      this._setLogOptions({\n        event: EVENT_ADDED,\n        key,\n        token\n      });\n      this.updateAuthState();\n    });\n    sdk.tokenManager.on(EVENT_REMOVED, (key, token) => {\n      this._setLogOptions({\n        event: EVENT_REMOVED,\n        key,\n        token\n      });\n      this.updateAuthState();\n    });\n  }\n  _setLogOptions(options) {\n    this._logOptions = options;\n  }\n  getAuthState() {\n    return this._authState;\n  }\n  getPreviousAuthState() {\n    return this._prevAuthState;\n  }\n  async updateAuthState() {\n    const {\n      transformAuthState,\n      devMode\n    } = this._sdk.options;\n    const log = status => {\n      const {\n        event,\n        key,\n        token\n      } = this._logOptions;\n      getConsole().group(`OKTA-AUTH-JS:updateAuthState: Event:${event} Status:${status}`);\n      getConsole().log(key, token);\n      getConsole().log('Current authState', this._authState);\n      getConsole().groupEnd();\n      this._logOptions = {};\n    };\n    const emitAuthStateChange = authState => {\n      if (isSameAuthState(this._authState, authState)) {\n        devMode && log('unchanged');\n        return;\n      }\n      this._prevAuthState = this._authState;\n      this._authState = authState;\n      this._sdk.emitter.emit(EVENT_AUTH_STATE_CHANGE, Object.assign({}, authState));\n      devMode && log('emitted');\n    };\n    const finalPromise = origPromise => {\n      return this._pending.updateAuthStatePromise.then(() => {\n        const curPromise = this._pending.updateAuthStatePromise;\n        if (curPromise && curPromise !== origPromise) {\n          return finalPromise(curPromise);\n        }\n        return this.getAuthState();\n      });\n    };\n    if (this._pending.updateAuthStatePromise) {\n      if (this._pending.canceledTimes >= MAX_PROMISE_CANCEL_TIMES) {\n        devMode && log('terminated');\n        return finalPromise(this._pending.updateAuthStatePromise);\n      } else {\n        this._pending.updateAuthStatePromise.cancel();\n      }\n    }\n    const cancelablePromise = new PCancelable((resolve, _, onCancel) => {\n      onCancel.shouldReject = false;\n      onCancel(() => {\n        this._pending.updateAuthStatePromise = null;\n        this._pending.canceledTimes = this._pending.canceledTimes + 1;\n        devMode && log('canceled');\n      });\n      const emitAndResolve = authState => {\n        if (cancelablePromise.isCanceled) {\n          resolve();\n          return;\n        }\n        emitAuthStateChange(authState);\n        resolve();\n        this._pending = Object.assign({}, DEFAULT_PENDING);\n      };\n      this._sdk.isAuthenticated().then(() => {\n        if (cancelablePromise.isCanceled) {\n          resolve();\n          return;\n        }\n        const {\n          accessToken,\n          idToken,\n          refreshToken\n        } = this._sdk.tokenManager.getTokensSync();\n        const authState = {\n          accessToken,\n          idToken,\n          refreshToken,\n          isAuthenticated: !!(accessToken && idToken)\n        };\n        const promise = transformAuthState ? this._transformQueue.push(transformAuthState, null, this._sdk, authState) : Promise.resolve(authState);\n        promise.then(authState => emitAndResolve(authState)).catch(error => emitAndResolve({\n          accessToken,\n          idToken,\n          refreshToken,\n          isAuthenticated: false,\n          error\n        }));\n      });\n    });\n    this._pending.updateAuthStatePromise = cancelablePromise;\n    return finalPromise(cancelablePromise);\n  }\n  subscribe(handler) {\n    this._sdk.emitter.on(EVENT_AUTH_STATE_CHANGE, handler);\n  }\n  unsubscribe(handler) {\n    this._sdk.emitter.off(EVENT_AUTH_STATE_CHANGE, handler);\n  }\n}\nexport { AuthStateManager, INITIAL_AUTH_STATE };","map":{"version":3,"names":["INITIAL_AUTH_STATE","DEFAULT_PENDING","updateAuthStatePromise","canceledTimes","EVENT_AUTH_STATE_CHANGE","MAX_PROMISE_CANCEL_TIMES","isSameAuthState","prevState","state","isAuthenticated","JSON","stringify","idToken","accessToken","error","AuthStateManager","constructor","sdk","emitter","AuthSdkError","_sdk","_pending","Object","assign","_authState","_logOptions","_prevAuthState","_transformQueue","PromiseQueue","quiet","tokenManager","on","EVENT_ADDED","key","token","_setLogOptions","event","updateAuthState","EVENT_REMOVED","options","getAuthState","getPreviousAuthState","transformAuthState","devMode","log","status","getConsole","group","groupEnd","emitAuthStateChange","authState","emit","finalPromise","origPromise","then","curPromise","cancel","cancelablePromise","PCancelable","resolve","_","onCancel","shouldReject","emitAndResolve","isCanceled","refreshToken","getTokensSync","promise","push","Promise","catch","subscribe","handler","unsubscribe","off"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/core/AuthStateManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n \n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \n// Do not use this type in code, so it won't be emitted in the declaration output\nimport PCancelable from 'p-cancelable';\nimport { AuthSdkError } from '../errors';\nimport {\n  EVENT_ADDED,\n  EVENT_REMOVED,\n  OAuthStorageManagerInterface,\n  OAuthTransactionMeta,\n  OktaAuthOAuthInterface\n} from '../oidc';\nimport {\n  AuthState,\n  AuthStateLogOptions,\n  OktaAuthCoreOptions,\n} from './types';\nimport { PromiseQueue, getConsole } from '../util';\n\nexport const INITIAL_AUTH_STATE = null;\nconst DEFAULT_PENDING = {\n  updateAuthStatePromise: null,\n  canceledTimes: 0\n};\nconst EVENT_AUTH_STATE_CHANGE = 'authStateChange';\nconst MAX_PROMISE_CANCEL_TIMES = 10;\n\n// only compare first level of authState\nconst isSameAuthState = (prevState: AuthState | null, state: AuthState) => {\n  // initial state is null\n  if (!prevState) {\n    return false;\n  }\n\n  return prevState.isAuthenticated === state.isAuthenticated \n    && JSON.stringify(prevState.idToken) === JSON.stringify(state.idToken)\n    && JSON.stringify(prevState.accessToken) === JSON.stringify(state.accessToken)\n    && prevState.error === state.error;\n};\n\n\nexport class AuthStateManager\n<\n  M extends OAuthTransactionMeta,\n  S extends OAuthStorageManagerInterface<M>,\n  O extends OktaAuthCoreOptions\n>\n{\n  _sdk: OktaAuthOAuthInterface<M, S, O>;\n  _pending: { \n    updateAuthStatePromise: any;\n    canceledTimes: number; \n  };\n  _authState: AuthState | null;\n  _prevAuthState: AuthState | null;\n  _logOptions: AuthStateLogOptions;\n  _transformQueue: PromiseQueue;\n\n  constructor(sdk: OktaAuthOAuthInterface<M, S, O>) {\n    if (!sdk.emitter) {\n      throw new AuthSdkError('Emitter should be initialized before AuthStateManager');\n    }\n\n    this._sdk = sdk;\n    this._pending = { ...DEFAULT_PENDING };\n    this._authState = INITIAL_AUTH_STATE;\n    this._logOptions = {};\n    this._prevAuthState = null;\n    this._transformQueue = new PromiseQueue({\n      quiet: true\n    });\n\n    // Listen on tokenManager events to start updateState process\n    // \"added\" event is emitted in both add and renew process\n    // Only listen on \"added\" event to update auth state\n    sdk.tokenManager.on(EVENT_ADDED, (key, token) => {\n      this._setLogOptions({ event: EVENT_ADDED, key, token });\n      this.updateAuthState();\n    });\n    sdk.tokenManager.on(EVENT_REMOVED, (key, token) => {\n      this._setLogOptions({ event: EVENT_REMOVED, key, token });\n      this.updateAuthState();\n    });\n  }\n\n  _setLogOptions(options) {\n    this._logOptions = options;\n  }\n\n  getAuthState(): AuthState | null {\n    return this._authState;\n  }\n\n  getPreviousAuthState(): AuthState | null {\n    return this._prevAuthState;\n  }\n\n  async updateAuthState(): Promise<AuthState> {\n    const { transformAuthState, devMode } = this._sdk.options;\n\n    const log = (status) => {\n      const { event, key, token } = this._logOptions;\n      getConsole().group(`OKTA-AUTH-JS:updateAuthState: Event:${event} Status:${status}`);\n      getConsole().log(key, token);\n      getConsole().log('Current authState', this._authState);\n      getConsole().groupEnd();\n      \n      // clear log options after logging\n      this._logOptions = {};\n    };\n\n    const emitAuthStateChange = (authState) => {\n      if (isSameAuthState(this._authState, authState)) {\n        devMode && log('unchanged'); \n        return;\n      }\n      this._prevAuthState = this._authState;\n      this._authState = authState;\n      // emit new authState object\n      this._sdk.emitter.emit(EVENT_AUTH_STATE_CHANGE, { ...authState });\n      devMode && log('emitted');\n    };\n\n    const finalPromise = (origPromise) => {       \n      return this._pending.updateAuthStatePromise.then(() => {\n        const curPromise = this._pending.updateAuthStatePromise;\n        if (curPromise && curPromise !== origPromise) {\n          return finalPromise(curPromise);\n        }\n        return this.getAuthState();\n      });\n    };\n\n    if (this._pending.updateAuthStatePromise) {\n      if (this._pending.canceledTimes >= MAX_PROMISE_CANCEL_TIMES) {\n        // stop canceling then starting a new promise\n        // let existing promise finish to prevent running into loops\n        devMode && log('terminated');\n        return finalPromise(this._pending.updateAuthStatePromise);\n      } else {\n        this._pending.updateAuthStatePromise.cancel();\n      }\n    }\n\n    /* eslint-disable complexity */\n    const cancelablePromise = new PCancelable((resolve, _, onCancel) => {\n      onCancel.shouldReject = false;\n      onCancel(() => {\n        this._pending.updateAuthStatePromise = null;\n        this._pending.canceledTimes = this._pending.canceledTimes + 1;\n        devMode && log('canceled');\n      });\n\n      const emitAndResolve = (authState) => {\n        if (cancelablePromise.isCanceled) {\n          resolve();\n          return;\n        }\n        // emit event and resolve promise \n        emitAuthStateChange(authState);\n        resolve();\n\n        // clear pending states after resolve\n        this._pending = { ...DEFAULT_PENDING };\n      };\n\n      this._sdk.isAuthenticated()\n        .then(() => {\n          if (cancelablePromise.isCanceled) {\n            resolve();\n            return;\n          }\n\n          const { accessToken, idToken, refreshToken } = this._sdk.tokenManager.getTokensSync();\n          const authState = {\n            accessToken,\n            idToken,\n            refreshToken,\n            isAuthenticated: !!(accessToken && idToken)\n          };\n\n          // Enqueue transformAuthState so that it does not run concurrently\n          const promise: Promise<AuthState> = transformAuthState\n            ? this._transformQueue.push(transformAuthState, null, this._sdk, authState) as Promise<AuthState>\n            : Promise.resolve(authState);\n\n          promise\n            .then(authState => emitAndResolve(authState))\n            .catch(error => emitAndResolve({\n              accessToken, \n              idToken, \n              refreshToken,\n              isAuthenticated: false, \n              error\n            }));\n        });\n    });\n    /* eslint-enable complexity */\n    this._pending.updateAuthStatePromise = cancelablePromise;\n\n    return finalPromise(cancelablePromise);\n  }\n\n  subscribe(handler): void {\n    this._sdk.emitter.on(EVENT_AUTH_STATE_CHANGE, handler);\n  }\n\n  unsubscribe(handler?): void {\n    this._sdk.emitter.off(EVENT_AUTH_STATE_CHANGE, handler);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}