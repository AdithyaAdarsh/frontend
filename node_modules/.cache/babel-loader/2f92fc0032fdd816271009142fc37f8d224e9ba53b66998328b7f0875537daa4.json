{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { warn } from '../util/console.js';\nimport { removeNils } from '../util/object.js';\nimport { createOAuthMeta } from '../oidc/util/oauthMeta.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nfunction createTransactionMeta(_x) {\n  return _createTransactionMeta.apply(this, arguments);\n}\nfunction _createTransactionMeta() {\n  _createTransactionMeta = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n      tokenParams,\n      pkceMeta,\n      _Object$assign,\n      _Object$assign$flow,\n      flow,\n      _Object$assign$withCr,\n      withCredentials,\n      _Object$assign$activa,\n      activationToken,\n      _Object$assign$recove,\n      recoveryToken,\n      _Object$assign$maxAge,\n      maxAge,\n      _Object$assign$acrVal,\n      acrValues,\n      meta,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _context.next = 3;\n          return authClient.token.prepareTokenParams(options);\n        case 3:\n          tokenParams = _context.sent;\n          pkceMeta = createOAuthMeta(authClient, tokenParams);\n          _Object$assign = Object.assign(Object.assign({}, authClient.options), options), _Object$assign$flow = _Object$assign.flow, flow = _Object$assign$flow === void 0 ? 'default' : _Object$assign$flow, _Object$assign$withCr = _Object$assign.withCredentials, withCredentials = _Object$assign$withCr === void 0 ? true : _Object$assign$withCr, _Object$assign$activa = _Object$assign.activationToken, activationToken = _Object$assign$activa === void 0 ? undefined : _Object$assign$activa, _Object$assign$recove = _Object$assign.recoveryToken, recoveryToken = _Object$assign$recove === void 0 ? undefined : _Object$assign$recove, _Object$assign$maxAge = _Object$assign.maxAge, maxAge = _Object$assign$maxAge === void 0 ? undefined : _Object$assign$maxAge, _Object$assign$acrVal = _Object$assign.acrValues, acrValues = _Object$assign$acrVal === void 0 ? undefined : _Object$assign$acrVal;\n          meta = Object.assign(Object.assign({}, pkceMeta), {\n            flow: flow,\n            withCredentials: withCredentials,\n            activationToken: activationToken,\n            recoveryToken: recoveryToken,\n            maxAge: maxAge,\n            acrValues: acrValues\n          });\n          return _context.abrupt(\"return\", meta);\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _createTransactionMeta.apply(this, arguments);\n}\nfunction hasSavedInteractionHandle(authClient, options) {\n  var savedMeta = getSavedTransactionMeta(authClient, options);\n  if (savedMeta === null || savedMeta === void 0 ? void 0 : savedMeta.interactionHandle) {\n    return true;\n  }\n  return false;\n}\nfunction getSavedTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  var savedMeta;\n  try {\n    savedMeta = authClient.transactionManager.load(options);\n  } catch (e) {}\n  if (!savedMeta) {\n    return;\n  }\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n  warn('Saved transaction meta does not match the current configuration. ' + 'This may indicate that two apps are sharing a storage key.');\n}\nfunction getTransactionMeta(_x2, _x3) {\n  return _getTransactionMeta.apply(this, arguments);\n}\nfunction _getTransactionMeta() {\n  _getTransactionMeta = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(authClient, options) {\n    var validExistingMeta;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          options = removeNils(options);\n          options = Object.assign(Object.assign({}, authClient.options), options);\n          validExistingMeta = getSavedTransactionMeta(authClient, options);\n          if (!validExistingMeta) {\n            _context2.next = 5;\n            break;\n          }\n          return _context2.abrupt(\"return\", validExistingMeta);\n        case 5:\n          return _context2.abrupt(\"return\", createTransactionMeta(authClient, options));\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getTransactionMeta.apply(this, arguments);\n}\nfunction saveTransactionMeta(authClient, meta) {\n  authClient.transactionManager.save(meta, {\n    muteWarning: true\n  });\n}\nfunction clearTransactionMeta(authClient) {\n  authClient.transactionManager.clear();\n}\nfunction isTransactionMetaValid(meta) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var keys = ['issuer', 'clientId', 'redirectUri', 'state', 'codeChallenge', 'codeChallengeMethod', 'activationToken', 'recoveryToken'];\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n  var flow = options.flow;\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n  return true;\n}\nfunction isTransactionMetaValidForFlow(meta, flow) {\n  var shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isTransactionMetaValidForOptions(meta, options, keys) {\n  var mismatch = keys.some(function (key) {\n    var value = options[key];\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\nexport { clearTransactionMeta, createTransactionMeta, getSavedTransactionMeta, getTransactionMeta, hasSavedInteractionHandle, isTransactionMetaValid, isTransactionMetaValidForFlow, isTransactionMetaValidForOptions, saveTransactionMeta };","map":{"version":3,"names":["createTransactionMeta","_x","_createTransactionMeta","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authClient","options","tokenParams","pkceMeta","_Object$assign","_Object$assign$flow","flow","_Object$assign$withCr","withCredentials","_Object$assign$activa","activationToken","_Object$assign$recove","recoveryToken","_Object$assign$maxAge","maxAge","_Object$assign$acrVal","acrValues","meta","_args","wrap","_callee$","_context","prev","next","length","undefined","token","prepareTokenParams","sent","createOAuthMeta","Object","assign","abrupt","stop","hasSavedInteractionHandle","savedMeta","getSavedTransactionMeta","interactionHandle","removeNils","transactionManager","load","e","isTransactionMetaValid","warn","getTransactionMeta","_x2","_x3","_getTransactionMeta","_callee2","validExistingMeta","_callee2$","_context2","saveTransactionMeta","save","muteWarning","clearTransactionMeta","clear","keys","isTransactionMetaValidForOptions","isTransactionMetaValidForFlow","shouldValidateFlow","mismatch","some","key","value"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/transactionMeta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthIdxInterface, IdxTransactionMeta, IdxTransactionMetaOptions } from './types';\nimport { removeNils, warn } from '../util';\nimport { createOAuthMeta, PKCETransactionMeta } from '../oidc';\n\n// Calculate new values\nexport async function createTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options: IdxTransactionMetaOptions = {}\n): Promise<IdxTransactionMeta> {\n  const tokenParams = await authClient.token.prepareTokenParams(options);\n  const pkceMeta = createOAuthMeta(authClient, tokenParams) as PKCETransactionMeta;\n  let {\n    flow = 'default',\n    withCredentials = true,\n    activationToken = undefined,\n    recoveryToken = undefined,\n    maxAge = undefined,\n    acrValues = undefined,\n  } = { ...authClient.options, ...options }; // local options override SDK options\n\n  const meta: IdxTransactionMeta = {\n    ...pkceMeta,\n    flow,\n    withCredentials,\n    activationToken,\n    recoveryToken,\n    maxAge,\n    acrValues\n  };\n  return meta;\n}\n\nexport function hasSavedInteractionHandle(\n  authClient: OktaAuthIdxInterface,\n  options?: IdxTransactionMetaOptions\n): boolean {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n  if (savedMeta?.interactionHandle) {\n    return true;\n  }\n  return false;\n}\n\n// Returns the saved transaction meta, if it exists and is valid\nexport function getSavedTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options?: IdxTransactionMetaOptions\n): IdxTransactionMeta | undefined {\n  options = removeNils(options);\n  options = { ...authClient.options, ...options }; // local options override SDK options\n  let savedMeta;\n  try {\n    savedMeta = authClient.transactionManager.load(options) as IdxTransactionMeta;\n  } catch (e) {\n    // ignore errors here\n  }\n\n  if (!savedMeta) {\n    return;\n  }\n\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n\n  // existing meta is not valid for this configuration\n  // this is common when changing configuration in local development environment\n  // in a production environment, this may indicate that two apps are sharing a storage key\n  warn('Saved transaction meta does not match the current configuration. ' + \n    'This may indicate that two apps are sharing a storage key.');\n\n}\n\nexport async function getTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options?: IdxTransactionMetaOptions\n): Promise<IdxTransactionMeta> {\n  options = removeNils(options);\n  options = { ...authClient.options, ...options }; // local options override SDK options\n  // Load existing transaction meta from storage\n  const validExistingMeta = getSavedTransactionMeta(authClient, options);\n  if (validExistingMeta) {\n    return validExistingMeta;\n  }\n  // No existing? Create new transaction meta.\n  return createTransactionMeta(authClient, options);\n}\n\nexport function saveTransactionMeta (authClient: OktaAuthIdxInterface, meta): void {\n  authClient.transactionManager.save(meta, { muteWarning: true });\n}\n\nexport function clearTransactionMeta (authClient: OktaAuthIdxInterface): void {\n  authClient.transactionManager.clear();\n}\n\nexport function isTransactionMetaValid (meta, options: IdxTransactionMetaOptions  = {}): boolean {\n  // Validate against certain options. If these exist in options, they must match in meta\n  const keys = [\n    'issuer',\n    'clientId',\n    'redirectUri',\n    'state',\n    'codeChallenge',\n    'codeChallengeMethod',\n    'activationToken',\n    'recoveryToken'\n  ];\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n\n  // Validate configured flow\n  const { flow } = options;\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function isTransactionMetaValidForFlow(meta, flow) {\n  // Specific flows should not share transaction data\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      // The flow has changed; abandon the old transaction\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isTransactionMetaValidForOptions(meta, options, keys) {\n  // returns false if values in meta do not match options\n  // if the option does not have a value for a specific key, it is ignored\n  const mismatch = keys.some(key => {\n    const value = options[key];\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}