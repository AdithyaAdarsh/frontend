{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { __rest } from '../_virtual/_tslib.js';\nimport { warn } from '../util/console.js';\nimport { split2 } from '../util/misc.js';\nimport * as index from './remediators/index.js';\nimport { GenericRemediator } from './remediators/GenericRemediator/GenericRemediator.js';\nimport { IdxFeature } from './types/api.js';\nfunction isTerminalResponse(idxResponse) {\n  var neededToProceed = idxResponse.neededToProceed,\n    interactionCode = idxResponse.interactionCode;\n  return !neededToProceed.length && !interactionCode;\n}\nfunction canSkipFn(idxResponse) {\n  return idxResponse.neededToProceed.some(function (_ref) {\n    var name = _ref.name;\n    return name === 'skip';\n  });\n}\nfunction canResendFn(idxResponse) {\n  return Object.keys(idxResponse.actions).some(function (actionName) {\n    return actionName.includes('resend');\n  });\n}\nfunction getMessagesFromIdxRemediationValue(value) {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n  return value.reduce(function (messages, value) {\n    if (value.messages) {\n      messages = [].concat(_toConsumableArray(messages), _toConsumableArray(value.messages.value));\n    }\n    if (value.form) {\n      var messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [].concat(_toConsumableArray(messages), _toConsumableArray(messagesFromForm));\n    }\n    if (value.options) {\n      var optionValues = [];\n      value.options.forEach(function (option) {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n        optionValues = [].concat(_toConsumableArray(optionValues), [option.value]);\n      });\n      var messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [].concat(_toConsumableArray(messages), _toConsumableArray(messagesFromOptions));\n    }\n    return messages;\n  }, []);\n}\nfunction getMessagesFromResponse(idxResponse, options) {\n  var _a;\n  var messages = [];\n  var rawIdxState = idxResponse.rawIdxState,\n    neededToProceed = idxResponse.neededToProceed;\n  var globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(function (message) {\n    return message;\n  });\n  if (globalMessages) {\n    messages = [].concat(_toConsumableArray(messages), _toConsumableArray(globalMessages));\n  }\n  if (!options.useGenericRemediator) {\n    var _iterator = _createForOfIteratorHelper(neededToProceed),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var remediation = _step.value;\n        var fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n        if (fieldMessages) {\n          messages = [].concat(_toConsumableArray(messages), _toConsumableArray(fieldMessages));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  var seen = {};\n  messages = messages.reduce(function (filtered, message) {\n    var _a;\n    var key = (_a = message.i18n) === null || _a === void 0 ? void 0 : _a.key;\n    if (key && seen[key] && message.message === seen[key].message) {\n      return filtered;\n    }\n    seen[key] = message;\n    filtered = [].concat(_toConsumableArray(filtered), [message]);\n    return filtered;\n  }, []);\n  return messages;\n}\nfunction getEnabledFeatures(idxResponse) {\n  var res = [];\n  var actions = idxResponse.actions,\n    neededToProceed = idxResponse.neededToProceed;\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY);\n  }\n  if (neededToProceed.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === 'select-enroll-profile';\n  })) {\n    res.push(IdxFeature.REGISTRATION);\n  }\n  if (neededToProceed.some(function (_ref3) {\n    var name = _ref3.name;\n    return name === 'redirect-idp';\n  })) {\n    res.push(IdxFeature.SOCIAL_IDP);\n  }\n  if (neededToProceed.some(function (_ref4) {\n    var name = _ref4.name;\n    return name === 'unlock-account';\n  })) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK);\n  }\n  return res;\n}\nfunction getAvailableSteps(authClient, idxResponse, useGenericRemediator) {\n  var _a;\n  var res = [];\n  var remediatorMap = Object.values(index).reduce(function (map, remediatorClass) {\n    if (remediatorClass.remediationName) {\n      map[remediatorClass.remediationName] = remediatorClass;\n    }\n    return map;\n  }, {});\n  var _iterator2 = _createForOfIteratorHelper(idxResponse.neededToProceed),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var remediation = _step2.value;\n      var T = getRemediatorClass(remediation, {\n        useGenericRemediator: useGenericRemediator,\n        remediators: remediatorMap\n      });\n      if (T) {\n        var remediator = new T(remediation);\n        res.push(remediator.getNextStep(authClient, idxResponse.context));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var _loop = function _loop() {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),\n      name = _Object$entries$_i[0];\n    var stepObj = {\n      name: name,\n      action: function () {\n        var _action = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", authClient.idx.proceed({\n                  actions: [{\n                    name: name,\n                    params: params\n                  }]\n                }));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        function action(_x) {\n          return _action.apply(this, arguments);\n        }\n        return action;\n      }()\n    };\n    if (name.startsWith('currentAuthenticator')) {\n      var _split = split2(name, '-'),\n        _split2 = _slicedToArray(_split, 2),\n        part1 = _split2[0],\n        part2 = _split2[1];\n      var actionObj = idxResponse.rawIdxState[part1].value[part2];\n      var rest = __rest(actionObj, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\"]);\n      var value = (_a = actionObj.value) === null || _a === void 0 ? void 0 : _a.filter(function (item) {\n        return item.name !== 'stateHandle';\n      });\n      stepObj = Object.assign(Object.assign(Object.assign({}, rest), value && {\n        value: value\n      }), stepObj);\n    }\n    res.push(stepObj);\n  };\n  for (var _i = 0, _Object$entries = Object.entries(idxResponse.actions || {}); _i < _Object$entries.length; _i++) {\n    _loop();\n  }\n  return res;\n}\nfunction filterValuesForRemediation(idxResponse, remediationName, values) {\n  var remediations = idxResponse.neededToProceed || [];\n  var remediation = remediations.find(function (r) {\n    return r.name === remediationName;\n  });\n  if (!remediation) {\n    warn(\"filterValuesForRemediation: \\\"\".concat(remediationName, \"\\\" did not match any remediations\"));\n    return values;\n  }\n  var valuesForRemediation = remediation.value.reduce(function (res, entry) {\n    var name = entry.name,\n      value = entry.value;\n    if (name === 'stateHandle') {\n      res[name] = value;\n    } else {\n      res[name] = values[name];\n    }\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\nfunction getRemediatorClass(remediation, options) {\n  var useGenericRemediator = options.useGenericRemediator,\n    remediators = options.remediators;\n  if (!remediation) {\n    return undefined;\n  }\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n  return remediators[remediation.name];\n}\nfunction getRemediator(idxResponse, values, options) {\n  var remediators = options.remediators;\n  var useGenericRemediator = options.useGenericRemediator;\n  var idxRemediations = idxResponse.neededToProceed,\n    context = idxResponse.context;\n  var remediator;\n  if (options.step) {\n    var remediation = idxRemediations.find(function (_ref5) {\n      var name = _ref5.name;\n      return name === options.step;\n    });\n    if (remediation) {\n      var T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      warn(\"step \\\"\".concat(options.step, \"\\\" did not match any remediations\"));\n      return;\n    }\n  }\n  var remediatorCandidates = [];\n  if (useGenericRemediator) {\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    var _iterator3 = _createForOfIteratorHelper(idxRemediations),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _remediation = _step3.value;\n        var isRemeditionInFlow = Object.keys(remediators).includes(_remediation.name);\n        if (!isRemeditionInFlow) {\n          continue;\n        }\n        var _T = getRemediatorClass(_remediation, options);\n        remediator = new _T(_remediation, values, options);\n        if (remediator.canRemediate(context)) {\n          return remediator;\n        }\n        remediatorCandidates.push(remediator);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  return remediatorCandidates[0];\n}\nfunction getNextStep(authClient, remediator, idxResponse) {\n  var nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  var canSkip = canSkipFn(idxResponse);\n  var canResend = canResendFn(idxResponse);\n  return Object.assign(Object.assign(Object.assign({}, nextStep), canSkip && {\n    canSkip: canSkip\n  }), canResend && {\n    canResend: canResend\n  });\n}\nfunction handleFailedResponse(authClient, idxResponse) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var terminal = isTerminalResponse(idxResponse);\n  var messages = getMessagesFromResponse(idxResponse, options);\n  if (terminal) {\n    return {\n      idxResponse: idxResponse,\n      terminal: terminal,\n      messages: messages\n    };\n  } else {\n    var remediator = getRemediator(idxResponse, {}, options);\n    var nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return Object.assign({\n      idxResponse: idxResponse,\n      messages: messages\n    }, nextStep && {\n      nextStep: nextStep\n    });\n  }\n}\nexport { canResendFn, canSkipFn, filterValuesForRemediation, getAvailableSteps, getEnabledFeatures, getMessagesFromIdxRemediationValue, getMessagesFromResponse, getNextStep, getRemediator, handleFailedResponse, isTerminalResponse };","map":{"version":3,"names":["isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","_ref","name","canResendFn","Object","keys","actions","actionName","includes","getMessagesFromIdxRemediationValue","value","Array","isArray","reduce","messages","concat","_toConsumableArray","form","messagesFromForm","options","optionValues","forEach","option","messagesFromOptions","getMessagesFromResponse","rawIdxState","globalMessages","_a","map","message","useGenericRemediator","_iterator","_createForOfIteratorHelper","_step","s","n","done","remediation","fieldMessages","err","e","f","seen","filtered","key","i18n","getEnabledFeatures","res","push","IdxFeature","PASSWORD_RECOVERY","_ref2","REGISTRATION","_ref3","SOCIAL_IDP","_ref4","ACCOUNT_UNLOCK","getAvailableSteps","authClient","remediatorMap","values","index","remediatorClass","remediationName","_iterator2","_step2","T","getRemediatorClass","remediators","remediator","getNextStep","context","_loop","_Object$entries$_i","_slicedToArray","_Object$entries","_i","stepObj","action","_action","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","wrap","_callee$","_context","prev","next","abrupt","idx","proceed","stop","_x","apply","arguments","startsWith","_split","split2","_split2","part1","part2","actionObj","rest","__rest","filter","item","assign","entries","filterValuesForRemediation","remediations","find","r","warn","valuesForRemediation","entry","undefined","GenericRemediator","getRemediator","idxRemediations","step","_ref5","remediatorCandidates","_iterator3","_step3","isRemeditionInFlow","canRemediate","nextStep","canSkip","canResend","handleFailedResponse","terminal"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/util.ts"],"sourcesContent":["import { warn, split2 } from '../util';\nimport * as remediators from './remediators';\nimport { RemediationValues, Remediator, RemediatorConstructor } from './remediators';\nimport { GenericRemediator } from './remediators/GenericRemediator';\nimport { OktaAuthIdxInterface, IdxFeature, NextStep, RemediateOptions, RemediationResponse, RunOptions } from './types';\nimport { IdxMessage, IdxRemediation, IdxRemediationValue, IdxResponse } from './types/idx-js';\n\nexport function isTerminalResponse(idxResponse: IdxResponse) {\n  const { neededToProceed, interactionCode } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nexport function canSkipFn(idxResponse: IdxResponse) {\n  return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\n\nexport function canResendFn(idxResponse: IdxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nexport function getMessagesFromIdxRemediationValue(\n  value?: IdxRemediationValue[]\n): IdxMessage[] | undefined {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value] as never;\n    }\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm] as never;\n    } \n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n        optionValues = [...optionValues, option.value] as never;\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions] as never;\n    }\n    return messages;\n  }, []);\n}\n\nexport function getMessagesFromResponse(idxResponse: IdxResponse, options: RunOptions): IdxMessage[] {\n  let messages: IdxMessage[] = [];\n  const { rawIdxState, neededToProceed } = idxResponse;\n\n  // Handle global messages\n  const globalMessages = rawIdxState.messages?.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages] as never;\n  }\n\n  // Handle field messages for current flow\n  // Preserve existing logic for general cases, remove in the next major version\n  // Follow ion response format for top level messages when useGenericRemediator is true\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages] as never;\n      }\n    }\n  }\n\n  // API may return identical error on same field, filter by i18n key\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    const key = message.i18n?.key;\n    if (key && seen[key] && message.message === seen[key].message) {\n      return filtered;\n    }\n    seen[key] = message;\n    filtered = [...filtered, message] as never;\n    return filtered;\n  }, []);\n\n  return messages;\n}\n\n\nexport function getEnabledFeatures(idxResponse: IdxResponse): IdxFeature[] {\n  const res = [];\n  const { actions, neededToProceed } = idxResponse;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'select-enroll-profile')) {\n    res.push(IdxFeature.REGISTRATION as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'redirect-idp')) {\n    res.push(IdxFeature.SOCIAL_IDP as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'unlock-account')) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK as never);\n  }\n\n  return res;\n}\n\nexport function getAvailableSteps(\n  authClient: OktaAuthIdxInterface, \n  idxResponse: IdxResponse, \n  useGenericRemediator?: boolean\n): NextStep[] {\n  const res: NextStep[] = [];\n\n  const remediatorMap: Record<string, RemediatorConstructor> = Object.values(remediators)\n    .reduce((map, remediatorClass) => {\n      // Only add concrete subclasses to the map\n      if (remediatorClass.remediationName) {\n        map[remediatorClass.remediationName] = remediatorClass;\n      }\n      return map;\n    }, {});\n\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, { useGenericRemediator, remediators: remediatorMap });\n    if (T) {\n      const remediator: Remediator = new T(remediation);\n      res.push (remediator.getNextStep(authClient, idxResponse.context) as never);\n    }\n  }\n\n  for (const [name] of Object.entries((idxResponse.actions || {}))) {\n    let stepObj = {\n      name, \n      action: async (params?) => {\n        return authClient.idx.proceed({ \n          actions: [{ name, params }] \n        });\n      }\n    };\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n      /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const {\n        href, \n        method, \n        rel, \n        accepts, \n        produces, \n        ...rest\n      } = actionObj;\n      /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const value = actionObj.value?.filter(item => item.name !== 'stateHandle');\n      stepObj = { \n        ...rest,  \n        ...(value && { value }),\n        ...stepObj,\n      };\n    }\n    res.push(stepObj);\n  }\n\n  return res;\n}\n\nexport function filterValuesForRemediation(\n  idxResponse: IdxResponse,\n  remediationName: string,\n  values: RemediationValues\n): RemediationValues {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n  if (!remediation) {\n    // step was specified, but remediation was not found. This is unexpected!\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const valuesForRemediation = remediation.value!.reduce((res, entry) => {\n    const { name, value } = entry;\n    if (name === 'stateHandle') {\n      res[name] = value; // use the stateHandle value in the remediation\n    } else {\n      res[name] = values[name]; // use the value provided by the caller\n    }\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation: IdxRemediation, options: RemediateOptions) {\n  const { useGenericRemediator, remediators } = options;\n  \n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return remediators![remediation.name];\n}\n\n// Return first match idxRemediation in allowed remediators\n// eslint-disable-next-line complexity\nexport function getRemediator(\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RemediateOptions,\n): Remediator | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const remediators = options.remediators!;\n  const useGenericRemediator = options.useGenericRemediator;\n  const {neededToProceed: idxRemediations, context} = idxResponse;\n\n  let remediator: Remediator;\n  // remediation name specified by caller - fast-track remediator lookup \n  if (options.step) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const remediation = idxRemediations.find(({ name }) => name === options.step)!;\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      // step was specified, but remediation was not found. This is unexpected!\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n\n  const remediatorCandidates: Remediator[] = [];\n  if (useGenericRemediator) {\n    // always pick the first remediation for when use GenericRemediator\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators as object).includes(remediation.name);\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const T = getRemediatorClass(remediation, options)!;\n      remediator = new T(remediation, values, options);\n      if (remediator.canRemediate(context)) {\n        // found the remediator\n        return remediator;\n      }\n      // remediator cannot handle the current values\n      // maybe return for next step\n      remediatorCandidates.push(remediator);  \n    }\n  }\n  \n  return remediatorCandidates[0];\n}\n\n\nexport function getNextStep(\n  authClient: OktaAuthIdxInterface, remediator: Remediator, idxResponse: IdxResponse\n): NextStep {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return {\n    ...nextStep,\n    ...(canSkip && {canSkip}),\n    ...(canResend && {canResend}),\n  };\n}\n\nexport function handleFailedResponse(\n  authClient: OktaAuthIdxInterface,\n  idxResponse: IdxResponse,\n  options = {}\n): RemediationResponse {\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n  if (terminal) {\n    return { idxResponse, terminal, messages };\n  } else {\n    const remediator = getRemediator(idxResponse, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      messages,\n      ...(nextStep && { nextStep }),\n    };\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}