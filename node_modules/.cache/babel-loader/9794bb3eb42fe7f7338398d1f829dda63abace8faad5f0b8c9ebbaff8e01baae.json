{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { run } from './run.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nfunction canProceed(authClient) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\nfunction proceed(_x) {\n  return _proceed.apply(this, arguments);\n}\nfunction _proceed() {\n  _proceed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n      flow,\n      state,\n      meta,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          if (canProceed(authClient, options)) {\n            _context.next = 3;\n            break;\n          }\n          throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n        case 3:\n          flow = options.flow, state = options.state;\n          if (!flow) {\n            meta = getSavedTransactionMeta(authClient, {\n              state: state\n            });\n            flow = meta === null || meta === void 0 ? void 0 : meta.flow;\n          }\n          return _context.abrupt(\"return\", run(authClient, Object.assign(Object.assign({}, options), {\n            flow: flow\n          })));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _proceed.apply(this, arguments);\n}\nexport { canProceed, proceed };","map":{"version":3,"names":["canProceed","authClient","options","arguments","length","undefined","meta","getSavedTransactionMeta","stateHandle","proceed","_x","_proceed","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","flow","state","_args","wrap","_callee$","_context","prev","next","AuthSdkError","abrupt","run","Object","assign","stop"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/proceed.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { \n  OktaAuthIdxInterface,\n  IdxTransaction,\n  ProceedOptions,\n} from './types';\nimport { run } from './run';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { AuthSdkError } from '../errors';\n\nexport function canProceed(authClient: OktaAuthIdxInterface, options: ProceedOptions = {}): boolean {\n  const meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nexport async function proceed(\n  authClient: OktaAuthIdxInterface,\n  options: ProceedOptions = {}\n): Promise<IdxTransaction> {\n\n  if (!canProceed(authClient, options)) {\n    throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n  }\n\n  let { flow, state } = options;\n  if (!flow) {\n    const meta = getSavedTransactionMeta(authClient, { state });\n    flow = meta?.flow;\n  }\n\n  return run(authClient, { \n    ...options, \n    flow\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;SAsBgBA,UAAUA,CAACC,UAAgC,EAA8B;EAAA,IAA5BC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,EAAE;EACvF,IAAMG,IAAI,GAAGC,uBAAuB,CAACN,UAAU,EAAEC,OAAO,CAAC;EACzD,OAAO,CAAC,EAAEI,IAAI,IAAIJ,OAAO,CAACM,WAAW,CAAC;AACxC;AAAC,SAEqBC,OAAOA,CAAAC,EAAA;EAAA,OAAAC,QAAA,CAAAC,KAAA,OAAAT,SAAA;AAAA;AAAA,SAAAQ,SAAA;EAAAA,QAAA,GAAAE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAtB,SAAAC,QACLf,UAAgC;IAAA,IAAAC,OAAA;MAAAe,IAAA;MAAAC,KAAA;MAAAZ,IAAA;MAAAa,KAAA,GAAAhB,SAAA;IAAA,OAAAW,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAChCtB,OAAA,GAAAiB,KAAA,CAAAf,MAAA,QAAAe,KAAA,QAAAd,SAAA,GAAAc,KAAA,MAA0B,EAAE;UAAA,IAGvBnB,UAAU,CAACC,UAAU,EAAEC,OAAO,CAAC;YAAAoB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAC5B,IAAIC,YAAY,CAAC,0DAA0D,CAAC;QAAA;UAG9ER,IAAI,GAAYf,OAAO,CAAvBe,IAAI,EAAEC,KAAK,GAAKhB,OAAO,CAAjBgB,KAAK;UACjB,IAAI,CAACD,IAAI,EAAE;YACHX,IAAI,GAAGC,uBAAuB,CAACN,UAAU,EAAE;cAAEiB,KAAK,EAALA;YAAO,EAAC;YAC3DD,IAAI,GAAGX,IAAI,KAAJ,QAAAA,IAAI,uBAAJA,IAAI,CAAEW,IAAI;UAClB;UAAA,OAAAK,QAAA,CAAAI,MAAA,WAEMC,GAAG,CAAC1B,UAAU,EAAA2B,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChB3B,OAAO,CACV;YAAAe,IAAI,EAAJA;UAAI,GACJ;QAAA;QAAA;UAAA,OAAAK,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAd,OAAA;EAAA,CACJ;EAAA,OAAAL,QAAA,CAAAC,KAAA,OAAAT,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}