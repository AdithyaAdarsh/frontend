{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorKey } from './types/api.js';\nimport { run } from './run.js';\nasync function authenticate(authClient, options = {}) {\n  if (options.password && !options.authenticator) {\n    options.authenticator = AuthenticatorKey.OKTA_PASSWORD;\n  }\n  return run(authClient, Object.assign(Object.assign({}, options), {\n    flow: 'authenticate'\n  }));\n}\nexport { authenticate };","map":{"version":3,"names":["authenticate","authClient","options","password","authenticator","AuthenticatorKey","OKTA_PASSWORD","run","Object","assign","flow"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/authenticate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { \n  OktaAuthIdxInterface,\n  IdxTransaction,\n  AuthenticatorKey,\n  AuthenticationOptions\n} from './types';\nimport { run } from './run';\n\nexport async function authenticate(\n  authClient: OktaAuthIdxInterface, options: AuthenticationOptions = {}\n): Promise<IdxTransaction> {\n  if (options.password && !options.authenticator) {\n    options.authenticator = AuthenticatorKey.OKTA_PASSWORD;\n  }\n  return run(authClient, { \n    ...options, \n    flow: 'authenticate'\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;AAqBO,eAAeA,YAAYA,CAChCC,UAAgC,EAAEC,OAAA,GAAiC,EAAE;EAErE,IAAIA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACE,aAAa,EAAE;IAC9CF,OAAO,CAACE,aAAa,GAAGC,gBAAgB,CAACC,aAAa;EACvD;EACD,OAAOC,GAAG,CAACN,UAAU,EAChBO,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAP,OAAO;IACVQ,IAAI,EAAE;EAAc,GACpB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}