{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nfunction mixinStorage(Base, StorageManager) {\n  return class OktaAuthStorage extends Base {\n    constructor(...args) {\n      super(...args);\n      const {\n        storageManager,\n        cookies,\n        storageUtil\n      } = this.options;\n      this.storageManager = new StorageManager(storageManager, cookies, storageUtil);\n    }\n    clearStorage() {}\n  };\n}\nexport { mixinStorage };","map":{"version":3,"names":["mixinStorage","Base","StorageManager","OktaAuthStorage","constructor","args","storageManager","cookies","storageUtil","options","clearStorage"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/storage/mixin.ts"],"sourcesContent":["import { OktaAuthBaseInterface, OktaAuthConstructor } from '../base/types';\nimport {\n  OktaAuthStorageInterface,\n  OktaAuthStorageOptions,\n  StorageManagerConstructor,\n  StorageManagerInterface,\n} from './types';\n\nexport function mixinStorage\n<\n  S extends StorageManagerInterface = StorageManagerInterface,\n  O extends OktaAuthStorageOptions = OktaAuthStorageOptions,\n  TBase extends OktaAuthConstructor<OktaAuthBaseInterface<O>> = OktaAuthConstructor<OktaAuthBaseInterface<O>>\n>\n(\n  Base: TBase, StorageManager: StorageManagerConstructor<S>\n): TBase & OktaAuthConstructor<OktaAuthStorageInterface<S, O>>\n{\n  return class OktaAuthStorage extends Base implements OktaAuthStorageInterface<S, O>\n  {\n    storageManager: S;\n    constructor(...args: any[]) {\n      super(...args);\n      const { storageManager, cookies, storageUtil } = this.options;\n      this.storageManager = new StorageManager(storageManager!, cookies!, storageUtil!);\n    }\n    clearStorage(): void {\n      // override in subclass\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;;;AAQgB,SAAAA,YAAYA,CAO1BC,IAAW,EAAEC,cAA4C;EAGzD,OAAO,MAAMC,eAAgB,SAAQF,IAAI;IAGvCG,YAAY,GAAGC,IAAW;MACxB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd,MAAM;QAAEC,cAAc;QAAEC,OAAO;QAAEC;MAAW,CAAE,GAAG,IAAI,CAACC,OAAO;MAC7D,IAAI,CAACH,cAAc,GAAG,IAAIJ,cAAc,CAACI,cAAe,EAAEC,OAAQ,EAAEC,WAAY,CAAC;IAClF;IACDE,YAAYA,CAAA,GAEX;GACF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}