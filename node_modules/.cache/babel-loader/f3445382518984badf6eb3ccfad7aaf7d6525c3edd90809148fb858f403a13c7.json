{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { sendRequest } from './request.js';\nconst getPassword = async (oktaAuth, options) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/password`,\n    method: 'GET',\n    accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n    transactionClassName: 'PasswordTransaction'\n  });\n  return transaction;\n};\nconst enrollPassword = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/password',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PasswordTransaction'\n  });\n  return transaction;\n};\nconst updatePassword = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/password',\n    method: 'PUT',\n    payload,\n    accessToken,\n    transactionClassName: 'PasswordTransaction'\n  });\n  return transaction;\n};\nconst deletePassword = async (oktaAuth, options) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/password`,\n    method: 'DELETE',\n    accessToken: options === null || options === void 0 ? void 0 : options.accessToken\n  });\n  return transaction;\n};\nexport { deletePassword, enrollPassword, getPassword, updatePassword };","map":{"version":3,"names":["getPassword","oktaAuth","options","transaction","sendRequest","url","method","accessToken","transactionClassName","enrollPassword","payload","updatePassword","deletePassword"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/myaccount/passwordApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction,\n  BaseTransaction, \n  PasswordTransaction\n} from './types';\n\n/**\n * @scope: okta.myAccount.password.read\n */\nexport const getPassword: IAPIFunction<PasswordTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/password`,\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'PasswordTransaction'\n  }) as PasswordTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.password.manage\n */\nexport const enrollPassword: IAPIFunction<PasswordTransaction> = async (\n  oktaAuth, \n  options\n): Promise<PasswordTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/password',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PasswordTransaction'\n  }) as PasswordTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.password.manage\n */\nexport const updatePassword: IAPIFunction<PasswordTransaction> = async (\n  oktaAuth, \n  options\n): Promise<PasswordTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/password',\n    method: 'PUT',\n    payload,\n    accessToken,\n    transactionClassName: 'PasswordTransaction'\n  }) as PasswordTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.password.manage\n */\nexport const deletePassword: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/password`,\n    method: 'DELETE',\n    accessToken: options?.accessToken,\n  }) as BaseTransaction;\n  return transaction;\n};\n"],"mappings":";;;;;;;;;;;;;AAUa,MAAAA,WAAW,GAAsC,MAAAA,CAC5DC,QAAQ,EACRC,OAAO,KACL;EACF,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAA2B;IAC9BC,MAAM,EAAE,KAAK;IACbC,WAAW,EAAEL,OAAO,aAAPA,OAAO,KAAP,kBAAAA,OAAO,CAAEK,WAAW;IACjCC,oBAAoB,EAAE;EACvB,EAAwB;EACzB,OAAOL,WAAW;AACpB,CAAE;AAKW,MAAAM,cAAc,GAAsC,MAAAA,CAC/DR,QAAQ,EACRC,OAAO,KACyB;EAChC,MAAM;IAAEK,WAAW;IAAEG;EAAS,IAAGR,OAAQ;EACzC,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAAE,yBAAyB;IAC9BC,MAAM,EAAE,MAAM;IACdI,OAAO;IACPH,WAAW;IACXC,oBAAoB,EAAE;EACvB,EAAwB;EACzB,OAAOL,WAAW;AACpB,CAAE;AAKW,MAAAQ,cAAc,GAAsC,MAAAA,CAC/DV,QAAQ,EACRC,OAAO,KACyB;EAChC,MAAM;IAAEK,WAAW;IAAEG;EAAS,IAAGR,OAAQ;EACzC,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAAE,yBAAyB;IAC9BC,MAAM,EAAE,KAAK;IACbI,OAAO;IACPH,WAAW;IACXC,oBAAoB,EAAE;EACvB,EAAwB;EACzB,OAAOL,WAAW;AACpB,CAAE;AAKW,MAAAS,cAAc,GAAkC,MAAAA,CAC3DX,QAAQ,EACRC,OAAQ,KACN;EACF,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAA2B;IAC9BC,MAAM,EAAE,QAAQ;IAChBC,WAAW,EAAEL,OAAO,aAAPA,OAAO,KAAP,kBAAAA,OAAO,CAAEK;EACvB,EAAoB;EACrB,OAAOJ,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}