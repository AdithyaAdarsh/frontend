{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { find } from '../../util/object.js';\nimport { get } from '../../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nfunction getWellKnown(sdk, issuer) {\n  var authServerUri = issuer || sdk.options.issuer;\n  return get(sdk, authServerUri + '/.well-known/openid-configuration', {\n    cacheResponse: true\n  });\n}\nfunction getKey(sdk, issuer, kid) {\n  var httpCache = sdk.storageManager.getHttpCache(sdk.options.cookies);\n  return getWellKnown(sdk, issuer).then(function (wellKnown) {\n    var jwksUri = wellKnown['jwks_uri'];\n    var cacheContents = httpCache.getStorage();\n    var cachedResponse = cacheContents[jwksUri];\n    if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {\n      var cachedKey = find(cachedResponse.response.keys, {\n        kid: kid\n      });\n      if (cachedKey) {\n        return cachedKey;\n      }\n    }\n    httpCache.clearStorage(jwksUri);\n    return get(sdk, jwksUri, {\n      cacheResponse: true\n    }).then(function (res) {\n      var key = find(res.keys, {\n        kid: kid\n      });\n      if (key) {\n        return key;\n      }\n      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\\'s keys');\n    });\n  });\n}\nexport { getKey, getWellKnown };","map":{"version":3,"names":["getWellKnown","sdk","issuer","authServerUri","options","get","cacheResponse","getKey","kid","httpCache","storageManager","getHttpCache","cookies","then","wellKnown","jwksUri","cacheContents","getStorage","cachedResponse","Date","now","expiresAt","cachedKey","find","response","keys","clearStorage","res","key","AuthSdkError"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/endpoints/well-known.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { get } from '../../http';\nimport { find } from '../../util';\nimport { OktaAuthOAuthInterface, WellKnownResponse } from '../types';\nimport AuthSdkError from '../../errors/AuthSdkError';\n\nexport function getWellKnown(sdk: OktaAuthOAuthInterface, issuer?: string): Promise<WellKnownResponse> {\n  var authServerUri = (issuer || sdk.options.issuer);\n  return get(sdk, authServerUri + '/.well-known/openid-configuration', {\n    cacheResponse: true\n  });\n}\n\nexport function getKey(sdk: OktaAuthOAuthInterface, issuer: string, kid: string): Promise<string> {\n  var httpCache = sdk.storageManager.getHttpCache(sdk.options.cookies);\n\n  return getWellKnown(sdk, issuer)\n  .then(function(wellKnown) {\n    var jwksUri = wellKnown['jwks_uri'];\n\n    // Check our kid against the cached version (if it exists and isn't expired)\n    var cacheContents = httpCache.getStorage();\n    var cachedResponse = cacheContents[jwksUri];\n    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {\n      var cachedKey = find(cachedResponse.response.keys, {\n        kid: kid\n      });\n\n      if (cachedKey) {\n        return cachedKey;\n      }\n    }\n\n    // Remove cache for the key\n    httpCache.clearStorage(jwksUri);\n\n    // Pull the latest keys if the key wasn't in the cache\n    return get(sdk, jwksUri, {\n      cacheResponse: true\n    })\n    .then(function(res) {\n      var key = find(res.keys, {\n        kid: kid\n      });\n\n      if (key) {\n        return key;\n      }\n\n      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\\'s keys');\n    });\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAiBgB,SAAAA,YAAYA,CAACC,GAA2B,EAAEC,MAAe;EACvE,IAAIC,aAAa,GAAID,MAAM,IAAID,GAAG,CAACG,OAAO,CAACF,MAAO;EAClD,OAAOG,GAAG,CAACJ,GAAG,EAAEE,aAAa,GAAG,mCAAmC,EAAE;IACnEG,aAAa,EAAE;EAChB,EAAC;AACJ;SAEgBC,MAAMA,CAACN,GAA2B,EAAEC,MAAc,EAAEM,GAAW;EAC7E,IAAIC,SAAS,GAAGR,GAAG,CAACS,cAAc,CAACC,YAAY,CAACV,GAAG,CAACG,OAAO,CAACQ,OAAO,CAAC;EAEpE,OAAOZ,YAAY,CAACC,GAAG,EAAEC,MAAM,CAAC,CAC/BW,IAAI,CAAC,UAASC,SAAS;IACtB,IAAIC,OAAO,GAAGD,SAAS,CAAC,UAAU,CAAC;IAGnC,IAAIE,aAAa,GAAGP,SAAS,CAACQ,UAAU,EAAE;IAC1C,IAAIC,cAAc,GAAGF,aAAa,CAACD,OAAO,CAAC;IAC3C,IAAIG,cAAc,IAAIC,IAAI,CAACC,GAAG,CAAE,IAAC,IAAI,GAAGF,cAAc,CAACG,SAAS,EAAE;MAChE,IAAIC,SAAS,GAAGC,IAAI,CAACL,cAAc,CAACM,QAAQ,CAACC,IAAI,EAAE;QACjDjB,GAAG,EAAEA;MACN,EAAC;MAEF,IAAIc,SAAS,EAAE;QACb,OAAOA,SAAS;MACjB;IACF;IAGDb,SAAS,CAACiB,YAAY,CAACX,OAAO,CAAC;IAG/B,OAAOV,GAAG,CAACJ,GAAG,EAAEc,OAAO,EAAE;MACvBT,aAAa,EAAE;KAChB,CAAC,CACDO,IAAI,CAAC,UAASc,GAAG;MAChB,IAAIC,GAAG,GAAGL,IAAI,CAACI,GAAG,CAACF,IAAI,EAAE;QACvBjB,GAAG,EAAEA;MACN,EAAC;MAEF,IAAIoB,GAAG,EAAE;QACP,OAAOA,GAAG;MACX;MAED,MAAM,IAAIC,YAAY,CAAC,cAAc,GAAGrB,GAAG,GAAG,uCAAuC,CAAC;IACxF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}