{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IDX_API_VERSION } from '../../constants.js';\nimport v1 from './v1/parsers.js';\nconst parsersForVersion = function parsersForVersion(version) {\n  switch (version) {\n    case '1.0.0':\n      return v1;\n    case undefined:\n    case null:\n      throw new Error('Api version is required');\n    default:\n      throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n  }\n};\nfunction validateVersionConfig(version) {\n  if (!version) {\n    throw new Error('version is required');\n  }\n  const cleanVersion = (version !== null && version !== void 0 ? version : '').replace(/[^0-9a-zA-Z._-]/, '');\n  if (cleanVersion !== version || !version) {\n    throw new Error('invalid version supplied - version is required and uses semver syntax');\n  }\n  parsersForVersion(version);\n}\nfunction makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed) {\n  var _a;\n  const version = (_a = rawIdxResponse === null || rawIdxResponse === void 0 ? void 0 : rawIdxResponse.version) !== null && _a !== void 0 ? _a : IDX_API_VERSION;\n  validateVersionConfig(version);\n  const {\n    makeIdxState\n  } = parsersForVersion(version);\n  return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\nexport { makeIdxState, parsersForVersion, validateVersionConfig };","map":{"version":3,"names":["parsersForVersion","version","v1","undefined","Error","validateVersionConfig","cleanVersion","replace","makeIdxState","authClient","rawIdxResponse","toPersist","requestDidSucceed","_a","IDX_API_VERSION"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/idxState/index.ts"],"sourcesContent":["import { OktaAuthIdxInterface } from '../types';    // auth-js/types\nimport { IdxResponse, IdxToPersist, RawIdxResponse } from '../types/idx-js';      // idx/types\nimport { IDX_API_VERSION } from '../../constants';\nimport v1 from './v1/parsers';\n\n\nexport const parsersForVersion = function parsersForVersion( version ) {\n  switch (version) {\n    case '1.0.0':\n      return v1;\n    case undefined:\n    case null:\n      throw new Error('Api version is required');\n    default:\n      throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n  }\n};\n\nexport function validateVersionConfig(version) {\n  if ( !version ) {\n    throw new Error('version is required');\n  }\n\n  const cleanVersion = (version ?? '').replace(/[^0-9a-zA-Z._-]/, '');\n  if ( cleanVersion !== version || !version ) {\n    throw new Error('invalid version supplied - version is required and uses semver syntax');\n  }\n\n  parsersForVersion(version); // will throw for invalid version\n}\n\nexport function makeIdxState ( \n  authClient: OktaAuthIdxInterface,\n  rawIdxResponse: RawIdxResponse,\n  toPersist: IdxToPersist,\n  requestDidSucceed: boolean,\n): IdxResponse {\n  const version = rawIdxResponse?.version ?? IDX_API_VERSION;\n  validateVersionConfig(version);\n  \n  const { makeIdxState } = parsersForVersion(version);\n  return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\n"],"mappings":";;;;;;;;;;;;;;AAMa,MAAAA,iBAAiB,GAAG,SAASA,iBAAiBA,CAAEC,OAAO;EAClE,QAAQA,OAAO;IACb,KAAK,OAAO;MACV,OAAOC,EAAE;IACX,KAAKC,SAAS;IACd,KAAK,IAAI;MACP,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;MACE,MAAM,IAAIA,KAAK,CAAC,wBAAwBH,OAAO,iCAAiC,CAAC;EACpF;AACH,CAAE;AAEI,SAAUI,qBAAqBA,CAACJ,OAAO;EAC3C,IAAK,CAACA,OAAO,EAAG;IACd,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACvC;EAED,MAAME,YAAY,GAAG,CAACL,OAAO,KAAP,QAAAA,OAAO,cAAPA,OAAO,GAAI,EAAE,EAAEM,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;EACnE,IAAKD,YAAY,KAAKL,OAAO,IAAI,CAACA,OAAO,EAAG;IAC1C,MAAM,IAAIG,KAAK,CAAC,uEAAuE,CAAC;EACzF;EAEDJ,iBAAiB,CAACC,OAAO,CAAC;AAC5B;AAEM,SAAUO,YAAYA,CAC1BC,UAAgC,EAChCC,cAA8B,EAC9BC,SAAuB,EACvBC,iBAA0B;;EAE1B,MAAMX,OAAO,GAAG,CAAAY,EAAA,GAAAH,cAAc,KAAd,QAAAA,cAAc,KAAd,kBAAAA,cAAc,CAAET,OAAO,MAAI,QAAAY,EAAA,cAAAA,EAAA,GAAAC,eAAe;EAC1DT,qBAAqB,CAACJ,OAAO,CAAC;EAE9B,MAAM;IAAEO;EAAY,CAAE,GAAGR,iBAAiB,CAACC,OAAO,CAAC;EACnD,OAAOO,YAAY,CAACC,UAAU,EAAEC,cAAc,EAAEC,SAAS,EAAEC,iBAAiB,CAAC;AAC/E"},"metadata":{},"sourceType":"module","externalDependencies":[]}