{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\nfunction unlockAccount(_x) {\n  return _unlockAccount.apply(this, arguments);\n}\nfunction _unlockAccount() {\n  _unlockAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n      _yield$startTransacti,\n      enabledFeatures,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          options.flow = 'unlockAccount';\n          if (hasSavedInteractionHandle(authClient)) {\n            _context.next = 9;\n            break;\n          }\n          _context.next = 5;\n          return startTransaction(authClient, Object.assign(Object.assign({}, options), {\n            autoRemediate: false\n          }));\n        case 5:\n          _yield$startTransacti = _context.sent;\n          enabledFeatures = _yield$startTransacti.enabledFeatures;\n          if (!(enabledFeatures && !enabledFeatures.includes(IdxFeature.ACCOUNT_UNLOCK))) {\n            _context.next = 9;\n            break;\n          }\n          throw new AuthSdkError('Self Service Account Unlock is not supported based on your current org configuration.');\n        case 9:\n          return _context.abrupt(\"return\", run(authClient, Object.assign({}, options)));\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _unlockAccount.apply(this, arguments);\n}\nexport { unlockAccount };","map":{"version":3,"names":["unlockAccount","_x","_unlockAccount","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authClient","options","_yield$startTransacti","enabledFeatures","_args","wrap","_callee$","_context","prev","next","length","undefined","flow","hasSavedInteractionHandle","startTransaction","Object","assign","autoRemediate","sent","includes","IdxFeature","ACCOUNT_UNLOCK","AuthSdkError","abrupt","run","stop"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/unlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run } from './run';\nimport { hasSavedInteractionHandle } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { AuthSdkError } from '../errors';\nimport { \n  OktaAuthIdxInterface, \n  AccountUnlockOptions, \n  IdxTransaction,\n  IdxFeature,\n} from './types';\n\nexport async function unlockAccount(\n  authClient: OktaAuthIdxInterface, options: AccountUnlockOptions = {}\n): Promise<IdxTransaction> {\n  options.flow = 'unlockAccount';\n\n  // Only check at the beginning of the transaction\n  if (!hasSavedInteractionHandle(authClient)) {\n    const { enabledFeatures } = await startTransaction(authClient, { ...options, autoRemediate: false });\n    if (enabledFeatures && !enabledFeatures.includes(IdxFeature.ACCOUNT_UNLOCK)) {\n      throw new AuthSdkError(\n        'Self Service Account Unlock is not supported based on your current org configuration.'\n      );\n    }\n  }\n\n  return run(authClient, { ...options });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;SAwBsBA,aAAaA,CAAAC,EAAA;EAAA,OAAAC,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,eAAA;EAAAA,cAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA5B,SAAAC,QACLC,UAAgC;IAAA,IAAAC,OAAA;MAAAC,qBAAA;MAAAC,eAAA;MAAAC,KAAA,GAAAT,SAAA;IAAA,OAAAE,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAER,OAAA,GAAAG,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAgC,EAAE;UAEpEH,OAAO,CAACW,IAAI,GAAG,eAAe;UAAC,IAG1BC,yBAAyB,CAACb,UAAU,CAAC;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACNK,gBAAgB,CAACd,UAAU,EAAAe,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOf,OAAO,CAAE;YAAAgB,aAAa,EAAE;UAAK,GAAG;QAAA;UAAAf,qBAAA,GAAAK,QAAA,CAAAW,IAAA;UAA5Ff,eAAe,GAAAD,qBAAA,CAAfC,eAAe;UAAA,MACnBA,eAAe,IAAI,CAACA,eAAe,CAACgB,QAAQ,CAACC,UAAU,CAACC,cAAc,CAAC;YAAAd,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACnE,IAAIa,YAAY,CACpB,uFAAuF,CACxF;QAAA;UAAA,OAAAf,QAAA,CAAAgB,MAAA,WAIEC,GAAG,CAACxB,UAAU,EAAOe,MAAA,CAAAC,MAAA,KAAAf,OAAO,EAAG;QAAA;QAAA;UAAA,OAAAM,QAAA,CAAAkB,IAAA;MAAA;IAAA,GAAA1B,OAAA;EAAA,CACxC;EAAA,OAAAN,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}