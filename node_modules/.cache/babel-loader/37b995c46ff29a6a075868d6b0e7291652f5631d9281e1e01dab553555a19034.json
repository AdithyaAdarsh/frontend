{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\nfunction renewTokensWithRefresh(_x, _x2, _x3) {\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\nfunction _renewTokensWithRefresh() {\n  _renewTokensWithRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, tokenParams, refreshTokenObject) {\n    var clientId, renewTokenParams, tokenResponse, urls, _yield$handleOAuthRes, tokens, refreshToken;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          clientId = sdk.options.clientId;\n          if (clientId) {\n            _context.next = 3;\n            break;\n          }\n          throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n        case 3:\n          _context.prev = 3;\n          renewTokenParams = Object.assign({}, tokenParams, {\n            clientId: clientId\n          });\n          _context.next = 7;\n          return postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n        case 7:\n          tokenResponse = _context.sent;\n          urls = getOAuthUrls(sdk, tokenParams);\n          _context.next = 11;\n          return handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n        case 11:\n          _yield$handleOAuthRes = _context.sent;\n          tokens = _yield$handleOAuthRes.tokens;\n          refreshToken = tokens.refreshToken;\n          if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n            sdk.tokenManager.updateRefreshToken(refreshToken);\n          }\n          return _context.abrupt(\"return\", tokens);\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](3);\n          if (isRefreshTokenInvalidError(_context.t0)) {\n            sdk.tokenManager.removeRefreshToken();\n          }\n          throw _context.t0;\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 18]]);\n  }));\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\nexport { renewTokensWithRefresh };","map":{"version":3,"names":["renewTokensWithRefresh","_x","_x2","_x3","_renewTokensWithRefresh","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sdk","tokenParams","refreshTokenObject","clientId","renewTokenParams","tokenResponse","urls","_yield$handleOAuthRes","tokens","refreshToken","wrap","_callee$","_context","prev","next","options","AuthSdkError","Object","assign","postRefreshToken","sent","getOAuthUrls","handleOAuthResponse","isSameRefreshToken","tokenManager","updateRefreshToken","abrupt","t0","isRefreshTokenInvalidError","removeRefreshToken","stop"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/renewTokensWithRefresh.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { getOAuthUrls } from './util/oauth';\nimport { isSameRefreshToken } from './util/refreshToken';\nimport { OktaAuthOAuthInterface, TokenParams, RefreshToken, Tokens } from './types';\nimport { handleOAuthResponse } from './handleOAuthResponse';\nimport { postRefreshToken } from './endpoints/token';\nimport { isRefreshTokenInvalidError } from './util/errors';\n\nexport async function renewTokensWithRefresh(\n  sdk: OktaAuthOAuthInterface,\n  tokenParams: TokenParams,\n  refreshTokenObject: RefreshToken\n): Promise<Tokens> {\n  const { clientId } = sdk.options;\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n  }\n\n  try {\n    const renewTokenParams: TokenParams = Object.assign({}, tokenParams, {\n      clientId,\n    });\n    const tokenResponse = await postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n    const urls = getOAuthUrls(sdk, tokenParams);\n    const { tokens } = await handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n\n    // Support rotating refresh tokens\n    const { refreshToken } = tokens;\n    if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n      sdk.tokenManager.updateRefreshToken(refreshToken);\n    }\n\n    return tokens;\n  }\n  catch (err) {\n    if (isRefreshTokenInvalidError(err)) {\n      // if the refresh token is invalid, remove it from storage\n      sdk.tokenManager.removeRefreshToken();\n    }\n    throw err;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;SAoBsBA,sBAAsBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,uBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,wBAAA;EAAAA,uBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAArC,SAAAC,QACLC,GAA2B,EAC3BC,WAAwB,EACxBC,kBAAgC;IAAA,IAAAC,QAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,IAAA,EAAAC,qBAAA,EAAAC,MAAA,EAAAC,YAAA;IAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAExBX,QAAQ,GAAKH,GAAG,CAACe,OAAO,CAAxBZ,QAAQ;UAAA,IACXA,QAAQ;YAAAS,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACL,IAAIE,YAAY,CAAC,0EAA0E,CAAC;QAAA;UAAAJ,QAAA,CAAAC,IAAA;UAI5FT,gBAAgB,GAAgBa,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEjB,WAAW,EAAE;YACnEE,QAAQ,EAARA;UACD,EAAC;UAAAS,QAAA,CAAAE,IAAA;UAAA,OAC0BK,gBAAgB,CAACnB,GAAG,EAAEI,gBAAgB,EAAEF,kBAAkB,CAAC;QAAA;UAAjFG,aAAa,GAAAO,QAAA,CAAAQ,IAAA;UACbd,IAAI,GAAGe,YAAY,CAACrB,GAAG,EAAEC,WAAW,CAAC;UAAAW,QAAA,CAAAE,IAAA;UAAA,OAClBQ,mBAAmB,CAACtB,GAAG,EAAEI,gBAAgB,EAAEC,aAAa,EAAEC,IAAI,CAAC;QAAA;UAAAC,qBAAA,GAAAK,QAAA,CAAAQ,IAAA;UAAhFZ,MAAM,GAAAD,qBAAA,CAANC,MAAM;UAGNC,YAAY,GAAKD,MAAM,CAAvBC,YAAY;UACpB,IAAIA,YAAY,IAAI,CAACc,kBAAkB,CAACd,YAAY,EAAEP,kBAAkB,CAAC,EAAE;YACzEF,GAAG,CAACwB,YAAY,CAACC,kBAAkB,CAAChB,YAAY,CAAC;UAClD;UAAA,OAAAG,QAAA,CAAAc,MAAA,WAEMlB,MAAM;QAAA;UAAAI,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAe,EAAA,GAAAf,QAAA;UAGb,IAAIgB,0BAA0B,CAAAhB,QAAA,CAAAe,EAAI,CAAC,EAAE;YAEnC3B,GAAG,CAACwB,YAAY,CAACK,kBAAkB,EAAE;UACtC;UAAA,MAAAjB,QAAA,CAAAe,EAAA;QAAA;QAAA;UAAA,OAAAf,QAAA,CAAAkB,IAAA;MAAA;IAAA,GAAA/B,OAAA;EAAA,CAGL;EAAA,OAAAN,uBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}