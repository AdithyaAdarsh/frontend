{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport ProfileTransaction from './transactions/ProfileTransaction.js';\nimport ProfileSchemaTransaction from './transactions/ProfileSchemaTransaction.js';\nimport EmailTransaction from './transactions/EmailTransaction.js';\nimport EmailStatusTransaction from './transactions/EmailStatusTransaction.js';\nimport EmailChallengeTransaction from './transactions/EmailChallengeTransaction.js';\nimport PhoneTransaction from './transactions/PhoneTransaction.js';\nimport PasswordTransaction from './transactions/PasswordTransaction.js';\nimport BaseTransaction from './transactions/Base.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nasync function sendRequest(oktaAuth, options) {\n  const {\n    accessToken: accessTokenObj\n  } = oktaAuth.tokenManager.getTokensSync();\n  const accessToken = options.accessToken || (accessTokenObj === null || accessTokenObj === void 0 ? void 0 : accessTokenObj.accessToken);\n  const issuer = oktaAuth.getIssuerOrigin();\n  const {\n    url,\n    method,\n    payload\n  } = options;\n  const requestUrl = url.startsWith(issuer) ? url : `${issuer}${url}`;\n  if (!accessToken) {\n    throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n  }\n  const res = await httpRequest(oktaAuth, Object.assign({\n    headers: {\n      'Accept': '*/*;okta-version=1.0.0'\n    },\n    accessToken,\n    url: requestUrl,\n    method\n  }, payload && {\n    args: payload\n  }));\n  const map = {\n    EmailTransaction,\n    EmailStatusTransaction,\n    EmailChallengeTransaction,\n    ProfileTransaction,\n    ProfileSchemaTransaction,\n    PhoneTransaction,\n    PasswordTransaction\n  };\n  const TransactionClass = map[options.transactionClassName] || BaseTransaction;\n  if (Array.isArray(res)) {\n    return res.map(item => new TransactionClass(oktaAuth, {\n      res: item,\n      accessToken\n    }));\n  }\n  return new TransactionClass(oktaAuth, {\n    res,\n    accessToken\n  });\n}\nfunction generateRequestFnFromLinks({\n  oktaAuth,\n  accessToken,\n  methodName,\n  links,\n  transactionClassName\n}) {\n  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {\n    if (method.toLowerCase() === methodName) {\n      const link = links.self;\n      return async payload => sendRequest(oktaAuth, {\n        accessToken,\n        url: link.href,\n        method,\n        payload,\n        transactionClassName\n      });\n    }\n  }\n  const link = links[methodName];\n  if (!link) {\n    throw new AuthSdkError(`No link is found with methodName: ${methodName}`);\n  }\n  return async payload => sendRequest(oktaAuth, {\n    accessToken,\n    url: link.href,\n    method: link.hints.allow[0],\n    payload,\n    transactionClassName\n  });\n}\nexport { generateRequestFnFromLinks, sendRequest };","map":{"version":3,"names":["sendRequest","oktaAuth","options","accessToken","accessTokenObj","tokenManager","getTokensSync","issuer","getIssuerOrigin","url","method","payload","requestUrl","startsWith","AuthSdkError","res","httpRequest","Object","assign","headers","args","map","EmailTransaction","EmailStatusTransaction","EmailChallengeTransaction","ProfileTransaction","ProfileSchemaTransaction","PhoneTransaction","PasswordTransaction","TransactionClass","transactionClassName","BaseTransaction","Array","isArray","item","generateRequestFnFromLinks","methodName","links","toLowerCase","link","self","href","hints","allow"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/myaccount/request.ts"],"sourcesContent":["import { \n  BaseTransaction,\n  EmailTransaction,\n  EmailStatusTransaction,\n  EmailChallengeTransaction,\n  ProfileTransaction,\n  ProfileSchemaTransaction,\n  PhoneTransaction,\n  PasswordTransaction\n} from './transactions';\nimport { httpRequest } from '../http';\nimport { AuthSdkError } from '../errors';\nimport { MyAccountRequestOptions as RequestOptions } from './types';\nimport { OktaAuthOAuthInterface } from '../oidc/types';\n\nexport type TransactionLink = {\n  href: string;\n  hints?: {\n    allow?: string[];\n  };\n}\n\ntype TransactionLinks = {\n  self: TransactionLink;\n  [property: string]: TransactionLink;\n}\n\ntype SendRequestOptions = RequestOptions & {\n  url: string;\n  method: string;\n  transactionClassName?: string;\n}\n\n/* eslint-disable complexity */\nexport async function sendRequest<T extends BaseTransaction> (\n  oktaAuth: OktaAuthOAuthInterface, \n  options: SendRequestOptions\n): Promise<T | T[]> {\n  const { \n    accessToken: accessTokenObj\n  } = oktaAuth.tokenManager.getTokensSync();\n  \n  const accessToken = options.accessToken || accessTokenObj?.accessToken;\n  const issuer = oktaAuth.getIssuerOrigin();\n  const { url, method, payload } = options;\n  const requestUrl = url.startsWith(issuer!) ? url : `${issuer}${url}`;\n\n  if (!accessToken) {\n    throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n  }\n  \n  const res = await httpRequest(oktaAuth, {\n    headers: { 'Accept': '*/*;okta-version=1.0.0' },\n    accessToken,\n    url: requestUrl,\n    method,\n    ...(payload && { args: payload })\n  });\n\n  const map = {\n    EmailTransaction,\n    EmailStatusTransaction,\n    EmailChallengeTransaction,\n    ProfileTransaction,\n    ProfileSchemaTransaction,\n    PhoneTransaction,\n    PasswordTransaction\n  };\n  const TransactionClass = map[options.transactionClassName!] || BaseTransaction;\n\n  if (Array.isArray(res)) {\n    return res.map(item => new TransactionClass(oktaAuth, { \n      res: item, \n      accessToken\n    }));\n  }\n\n  return new TransactionClass(oktaAuth, { \n    res, \n    accessToken\n  });\n}\n/* eslint-enable complexity */\n\nexport type GenerateRequestFnFromLinksOptions = {\n  oktaAuth: OktaAuthOAuthInterface;\n  accessToken: string;\n  methodName: string;\n  links: TransactionLinks;\n  transactionClassName?: string;\n}\n\ntype IRequestFnFromLinks = <T extends BaseTransaction>(payload?) => Promise<T | T[]>;\n\nexport function generateRequestFnFromLinks ({\n  oktaAuth, \n  accessToken,\n  methodName,\n  links,\n  transactionClassName\n}: GenerateRequestFnFromLinksOptions): IRequestFnFromLinks {\n  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {\n    if (method.toLowerCase() === methodName) {\n      const link = links.self;\n      return (async (payload?) => sendRequest(oktaAuth, {\n        accessToken,\n        url: link.href,\n        method,\n        payload,\n        transactionClassName\n      }));\n    }\n  }\n  \n  const link = links[methodName];\n  if (!link) {\n    throw new AuthSdkError(`No link is found with methodName: ${methodName}`);\n  }\n\n  return (async (payload?) => sendRequest(oktaAuth, {\n    accessToken,\n    url: link.href,\n    method: link.hints!.allow![0],\n    payload,\n    transactionClassName\n  }));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAkCO,eAAeA,WAAWA,CAC/BC,QAAgC,EAChCC,OAA2B;EAE3B,MAAM;IACJC,WAAW,EAAEC;EAAc,CAC5B,GAAGH,QAAQ,CAACI,YAAY,CAACC,aAAa,EAAE;EAEzC,MAAMH,WAAW,GAAGD,OAAO,CAACC,WAAW,KAAIC,cAAc,KAAd,QAAAA,cAAc,KAAd,kBAAAA,cAAc,CAAED,WAAW;EACtE,MAAMI,MAAM,GAAGN,QAAQ,CAACO,eAAe,EAAE;EACzC,MAAM;IAAEC,GAAG;IAAEC,MAAM;IAAEC;EAAO,CAAE,GAAGT,OAAO;EACxC,MAAMU,UAAU,GAAGH,GAAG,CAACI,UAAU,CAACN,MAAO,CAAC,GAAGE,GAAG,GAAG,GAAGF,MAAS,GAAAE,GAAG,EAAE;EAEpE,IAAI,CAACN,WAAW,EAAE;IAChB,MAAM,IAAIW,YAAY,CAAC,6DAA6D,CAAC;EACtF;EAED,MAAMC,GAAG,GAAG,MAAMC,WAAW,CAACf,QAAQ,EAAAgB,MAAA,CAAAC,MAAA;IACpCC,OAAO,EAAE;MAAE,QAAQ,EAAE;IAA0B;IAC/ChB,WAAW;IACXM,GAAG,EAAEG,UAAU;IACfF;EAAM,GACFC,OAAO,IAAI;IAAES,IAAI,EAAET;EAAS,GAChC;EAEF,MAAMU,GAAG,GAAG;IACVC,gBAAgB;IAChBC,sBAAsB;IACtBC,yBAAyB;IACzBC,kBAAkB;IAClBC,wBAAwB;IACxBC,gBAAgB;IAChBC;GACD;EACD,MAAMC,gBAAgB,GAAGR,GAAG,CAACnB,OAAO,CAAC4B,oBAAqB,CAAC,IAAIC,eAAe;EAE9E,IAAIC,KAAK,CAACC,OAAO,CAAClB,GAAG,CAAC,EAAE;IACtB,OAAOA,GAAG,CAACM,GAAG,CAACa,IAAI,IAAI,IAAIL,gBAAgB,CAAC5B,QAAQ,EAAE;MACpDc,GAAG,EAAEmB,IAAI;MACT/B;IACD,EAAC,CAAC;EACJ;EAED,OAAO,IAAI0B,gBAAgB,CAAC5B,QAAQ,EAAE;IACpCc,GAAG;IACHZ;EACD,EAAC;AACJ;AAagB,SAAAgC,0BAA0BA,CAAE;EAC1ClC,QAAQ;EACRE,WAAW;EACXiC,UAAU;EACVC,KAAK;EACLP;AAAoB,CACc;EAClC,KAAK,MAAMpB,MAAM,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAE;IACrD,IAAIA,MAAM,CAAC4B,WAAW,CAAE,MAAKF,UAAU,EAAE;MACvC,MAAMG,IAAI,GAAGF,KAAK,CAACG,IAAI;MACvB,OAAQ,MAAO7B,OAAQ,IAAKX,WAAW,CAACC,QAAQ,EAAE;QAChDE,WAAW;QACXM,GAAG,EAAE8B,IAAI,CAACE,IAAI;QACd/B,MAAM;QACNC,OAAO;QACPmB;MACD,EAAC;IACH;EACF;EAED,MAAMS,IAAI,GAAGF,KAAK,CAACD,UAAU,CAAC;EAC9B,IAAI,CAACG,IAAI,EAAE;IACT,MAAM,IAAIzB,YAAY,CAAC,qCAAqCsB,UAAU,EAAE,CAAC;EAC1E;EAED,OAAQ,MAAOzB,OAAQ,IAAKX,WAAW,CAACC,QAAQ,EAAE;IAChDE,WAAW;IACXM,GAAG,EAAE8B,IAAI,CAACE,IAAI;IACd/B,MAAM,EAAE6B,IAAI,CAACG,KAAM,CAACC,KAAM,CAAC,CAAC,CAAC;IAC7BhC,OAAO;IACPmB;EACD,EAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}