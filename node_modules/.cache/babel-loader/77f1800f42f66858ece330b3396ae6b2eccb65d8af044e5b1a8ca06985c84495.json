{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { run } from './run.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nfunction canProceed(authClient, options = {}) {\n  const meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\nasync function proceed(authClient, options = {}) {\n  if (!canProceed(authClient, options)) {\n    throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n  }\n  let {\n    flow,\n    state\n  } = options;\n  if (!flow) {\n    const meta = getSavedTransactionMeta(authClient, {\n      state\n    });\n    flow = meta === null || meta === void 0 ? void 0 : meta.flow;\n  }\n  return run(authClient, Object.assign(Object.assign({}, options), {\n    flow\n  }));\n}\nexport { canProceed, proceed };","map":{"version":3,"names":["canProceed","authClient","options","meta","getSavedTransactionMeta","stateHandle","proceed","AuthSdkError","flow","state","run","Object","assign"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/proceed.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { \n  OktaAuthIdxInterface,\n  IdxTransaction,\n  ProceedOptions,\n} from './types';\nimport { run } from './run';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { AuthSdkError } from '../errors';\n\nexport function canProceed(authClient: OktaAuthIdxInterface, options: ProceedOptions = {}): boolean {\n  const meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nexport async function proceed(\n  authClient: OktaAuthIdxInterface,\n  options: ProceedOptions = {}\n): Promise<IdxTransaction> {\n\n  if (!canProceed(authClient, options)) {\n    throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n  }\n\n  let { flow, state } = options;\n  if (!flow) {\n    const meta = getSavedTransactionMeta(authClient, { state });\n    flow = meta?.flow;\n  }\n\n  return run(authClient, { \n    ...options, \n    flow\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;SAsBgBA,UAAUA,CAACC,UAAgC,EAAEC,OAAA,GAA0B,EAAE;EACvF,MAAMC,IAAI,GAAGC,uBAAuB,CAACH,UAAU,EAAEC,OAAO,CAAC;EACzD,OAAO,CAAC,EAAEC,IAAI,IAAID,OAAO,CAACG,WAAW,CAAC;AACxC;AAEO,eAAeC,OAAOA,CAC3BL,UAAgC,EAChCC,OAAA,GAA0B,EAAE;EAG5B,IAAI,CAACF,UAAU,CAACC,UAAU,EAAEC,OAAO,CAAC,EAAE;IACpC,MAAM,IAAIK,YAAY,CAAC,0DAA0D,CAAC;EACnF;EAED,IAAI;IAAEC,IAAI;IAAEC;EAAO,IAAGP,OAAO;EAC7B,IAAI,CAACM,IAAI,EAAE;IACT,MAAML,IAAI,GAAGC,uBAAuB,CAACH,UAAU,EAAE;MAAEQ;IAAO,EAAC;IAC3DD,IAAI,GAAGL,IAAI,KAAJ,QAAAA,IAAI,uBAAJA,IAAI,CAAEK,IAAI;EAClB;EAED,OAAOE,GAAG,CAACT,UAAU,EAAAU,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChBV,OAAO,CACV;IAAAM;EAAI,GACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}