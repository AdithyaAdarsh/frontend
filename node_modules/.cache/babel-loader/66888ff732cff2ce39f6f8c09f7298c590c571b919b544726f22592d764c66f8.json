{"ast":null,"code":"import _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { warn } from '../util/console.js';\nimport { isBrowser } from '../features.js';\nimport { IDX_RESPONSE_STORAGE_NAME } from '../constants.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { SavedObject } from '../storage/SavedObject.js';\nimport { createCoreStorageManager } from '../core/storage.js';\nfunction createIdxStorageManager() {\n  var CoreStorageManager = createCoreStorageManager();\n  return /*#__PURE__*/function (_CoreStorageManager) {\n    _inherits(IdxStorageManager, _CoreStorageManager);\n    var _super = _createSuper(IdxStorageManager);\n    function IdxStorageManager(storageManagerOptions, cookieOptions, storageUtil) {\n      _classCallCheck(this, IdxStorageManager);\n      return _super.call(this, storageManagerOptions, cookieOptions, storageUtil);\n    }\n    _createClass(IdxStorageManager, [{\n      key: \"getIdxResponseStorage\",\n      value: function getIdxResponseStorage(options) {\n        var storage;\n        if (isBrowser()) {\n          try {\n            storage = this.storageUtil.getStorageByType('memory', options);\n          } catch (e) {\n            warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n          }\n        } else {\n          var transactionStorage = this.getTransactionStorage(options);\n          if (transactionStorage) {\n            storage = {\n              getItem: function getItem(key) {\n                var transaction = transactionStorage.getStorage();\n                if (transaction && transaction[key]) {\n                  return transaction[key];\n                }\n                return null;\n              },\n              setItem: function setItem(key, val) {\n                var transaction = transactionStorage.getStorage();\n                if (!transaction) {\n                  throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n                }\n                transaction[key] = val;\n                transactionStorage.setStorage(transaction);\n              },\n              removeItem: function removeItem(key) {\n                var transaction = transactionStorage.getStorage();\n                if (!transaction) {\n                  return;\n                }\n                delete transaction[key];\n                transactionStorage.setStorage(transaction);\n              }\n            };\n          }\n        }\n        if (!storage) {\n          return null;\n        }\n        return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n      }\n    }]);\n    return IdxStorageManager;\n  }(CoreStorageManager);\n}\nexport { createIdxStorageManager };","map":{"version":3,"names":["createIdxStorageManager","CoreStorageManager","createCoreStorageManager","_CoreStorageManager","_inherits","IdxStorageManager","_super","_createSuper","storageManagerOptions","cookieOptions","storageUtil","_classCallCheck","call","_createClass","key","value","getIdxResponseStorage","options","storage","isBrowser","getStorageByType","e","warn","transactionStorage","getTransactionStorage","getItem","transaction","getStorage","setItem","val","AuthSdkError","setStorage","removeItem","SavedObject","IDX_RESPONSE_STORAGE_NAME"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/storage.ts"],"sourcesContent":["import { CookieOptions, StorageManagerOptions, StorageOptions, StorageUtil } from '../storage/types';\nimport {  IdxTransactionMeta } from './types';\nimport { SavedObject } from '../storage';\nimport { IDX_RESPONSE_STORAGE_NAME } from '../constants';\nimport { createCoreStorageManager } from '../core/storage';\nimport { IdxResponseStorage } from './types/storage';\nimport { isBrowser } from '../features';\nimport { warn } from '../util';\nimport AuthSdkError from '../errors/AuthSdkError';\n\nexport function createIdxStorageManager<M extends IdxTransactionMeta>()\n{\n  const CoreStorageManager = createCoreStorageManager<M>();\n  return class IdxStorageManager extends CoreStorageManager\n  {\n    constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n      super(storageManagerOptions, cookieOptions, storageUtil);\n    }\n\n    // intermediate idxResponse\n    // store for network traffic optimazation purpose\n    // TODO: revisit in auth-js 6.0 epic JIRA: OKTA-399791\n    getIdxResponseStorage(options?: StorageOptions): IdxResponseStorage | null {\n      let storage;\n      if (isBrowser()) {\n        // on browser side only use memory storage \n        try {\n          storage = this.storageUtil.getStorageByType('memory', options);\n        } catch (e) {\n          // it's ok to miss response storage\n          // eslint-disable-next-line max-len\n          warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n        }\n      } else {\n        // on server side re-use transaction custom storage\n        const transactionStorage = this.getTransactionStorage(options);\n        if (transactionStorage) {\n          storage = {\n            getItem: (key) => {\n              const transaction = transactionStorage.getStorage();\n              if (transaction && transaction[key]) {\n                return transaction[key];\n              }\n              return null;\n            },\n            setItem: (key, val) => {\n              const transaction = transactionStorage.getStorage();\n              if (!transaction) {\n                throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n              }\n              transaction[key] = val;\n              transactionStorage.setStorage(transaction);\n            },\n            removeItem: (key) => {\n              const transaction = transactionStorage.getStorage();\n              if (!transaction) {\n                return;\n              }\n              delete transaction[key];\n              transactionStorage.setStorage(transaction);\n            }\n          };\n        }\n      }\n\n      if (!storage) {\n        return null;\n      }\n\n      return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;SAUgBA,uBAAuBA,CAAA;EAErC,IAAMC,kBAAkB,GAAGC,wBAAwB,EAAK;EACxD,8BAAAC,mBAAA;IAAAC,SAAA,CAAAC,iBAAA,EAAAF,mBAAA;IAAA,IAAAG,MAAA,GAAAC,YAAA,CAAAF,iBAAA;IAEE,SAAAA,kBAAYG,qBAA4C,EAAEC,aAA4B,EAAEC,WAAwB;MAAAC,eAAA,OAAAN,iBAAA;MAAA,OAAAC,MAAA,CAAAM,IAAA,OACxGJ,qBAAqB,EAAEC,aAAa,EAAEC,WAAW;IACxD;IAAAG,YAAA,CAAAR,iBAAA;MAAAS,GAAA;MAAAC,KAAA,EAKD,SAAAC,sBAAsBC,OAAwB;QAC5C,IAAIC,OAAO;QACX,IAAIC,SAAS,EAAE,EAAE;UAEf,IAAI;YACFD,OAAO,GAAG,IAAI,CAACR,WAAW,CAACU,gBAAgB,CAAC,QAAQ,EAAEH,OAAO,CAAC;UAC/D,EAAC,OAAOI,CAAC,EAAE;YAGVC,IAAI,CAAC,yIAAyI,CAAC;UAChJ;QACF,OAAM;UAEL,IAAMC,kBAAkB,GAAG,IAAI,CAACC,qBAAqB,CAACP,OAAO,CAAC;UAC9D,IAAIM,kBAAkB,EAAE;YACtBL,OAAO,GAAG;cACRO,OAAO,EAAE,SAAAA,QAACX,GAAG,EAAI;gBACf,IAAMY,WAAW,GAAGH,kBAAkB,CAACI,UAAU,EAAE;gBACnD,IAAID,WAAW,IAAIA,WAAW,CAACZ,GAAG,CAAC,EAAE;kBACnC,OAAOY,WAAW,CAACZ,GAAG,CAAC;gBACxB;gBACD,OAAO,IAAI;cACZ;cACDc,OAAO,EAAE,SAAAA,QAACd,GAAG,EAAEe,GAAG,EAAI;gBACpB,IAAMH,WAAW,GAAGH,kBAAkB,CAACI,UAAU,EAAE;gBACnD,IAAI,CAACD,WAAW,EAAE;kBAChB,MAAM,IAAII,YAAY,CAAC,uDAAuD,CAAC;gBAChF;gBACDJ,WAAW,CAACZ,GAAG,CAAC,GAAGe,GAAG;gBACtBN,kBAAkB,CAACQ,UAAU,CAACL,WAAW,CAAC;cAC3C;cACDM,UAAU,EAAE,SAAAA,WAAClB,GAAG,EAAI;gBAClB,IAAMY,WAAW,GAAGH,kBAAkB,CAACI,UAAU,EAAE;gBACnD,IAAI,CAACD,WAAW,EAAE;kBAChB;gBACD;gBACD,OAAOA,WAAW,CAACZ,GAAG,CAAC;gBACvBS,kBAAkB,CAACQ,UAAU,CAACL,WAAW,CAAC;cAC3C;aACF;UACF;QACF;QAED,IAAI,CAACR,OAAO,EAAE;UACZ,OAAO,IAAI;QACZ;QAED,OAAO,IAAIe,WAAW,CAACf,OAAO,EAAEgB,yBAAyB,CAAC;MAC3D;IAAA;IAAA,OAAA7B,iBAAA;EAAA,EAzDoCJ,kBAAkB;AA2D3D"},"metadata":{},"sourceType":"module","externalDependencies":[]}