{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport CustomError from '../errors/CustomError.js';\nimport { urlParamsToObject } from '../oidc/util/urlParams.js';\nclass EmailVerifyCallbackError extends CustomError {\n  constructor(state, otp) {\n    super(`Enter the OTP code in the originating client: ${otp}`);\n    this.name = 'EmailVerifyCallbackError';\n    this.state = state;\n    this.otp = otp;\n  }\n}\nfunction isEmailVerifyCallbackError(error) {\n  return error.name === 'EmailVerifyCallbackError';\n}\nfunction isEmailVerifyCallback(urlPath) {\n  return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\nfunction parseEmailVerifyCallback(urlPath) {\n  return urlParamsToObject(urlPath);\n}\nasync function handleEmailVerifyCallback(authClient, search) {\n  if (isEmailVerifyCallback(search)) {\n    const {\n      state,\n      otp\n    } = parseEmailVerifyCallback(search);\n    if (authClient.idx.canProceed({\n      state\n    })) {\n      return await authClient.idx.proceed({\n        state,\n        otp\n      });\n    } else {\n      throw new EmailVerifyCallbackError(state, otp);\n    }\n  }\n}\nexport { EmailVerifyCallbackError, handleEmailVerifyCallback, isEmailVerifyCallback, isEmailVerifyCallbackError, parseEmailVerifyCallback };","map":{"version":3,"names":["EmailVerifyCallbackError","CustomError","constructor","state","otp","name","isEmailVerifyCallbackError","error","isEmailVerifyCallback","urlPath","test","parseEmailVerifyCallback","urlParamsToObject","handleEmailVerifyCallback","authClient","search","idx","canProceed","proceed"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/emailVerify.ts"],"sourcesContent":["\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthIdxInterface } from './types';\n\nimport CustomError from '../errors/CustomError';\nimport { urlParamsToObject  } from '../oidc/util/urlParams';\nimport { EmailVerifyCallbackResponse } from './types/api';\n\nexport class EmailVerifyCallbackError extends CustomError {\n  state: string;\n  otp: string;\n\n  constructor(state: string, otp: string) {\n    super(`Enter the OTP code in the originating client: ${otp}`);\n    this.name = 'EmailVerifyCallbackError';\n    this.state = state;\n    this.otp = otp;\n  }\n}\n\nexport function isEmailVerifyCallbackError(error: Error) {\n  return (error.name === 'EmailVerifyCallbackError');\n}\n\n// Check if state && otp have been passed back in the url\nexport function isEmailVerifyCallback (urlPath: string): boolean {\n  return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\n\n// Parse state and otp from a urlPath (should be either a search or fragment from the URL)\nexport function parseEmailVerifyCallback(urlPath: string): EmailVerifyCallbackResponse {\n  return urlParamsToObject(urlPath) as EmailVerifyCallbackResponse;\n}\n\nexport async function handleEmailVerifyCallback(authClient: OktaAuthIdxInterface, search: string) {\n  if (isEmailVerifyCallback(search)) {\n    const { state, otp } = parseEmailVerifyCallback(search);\n    if (authClient.idx.canProceed({ state })) {\n      // same browser / device\n      return await authClient.idx.proceed({ state, otp });\n    } else {\n      // different browser or device\n      throw new EmailVerifyCallbackError(state, otp);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAmBM,MAAOA,wBAAyB,SAAQC,WAAW;EAIvDC,WAAYA,CAAAC,KAAa,EAAEC,GAAW;IACpC,KAAK,CAAC,iDAAiDA,GAAG,EAAE,CAAC;IAC7D,IAAI,CAACC,IAAI,GAAG,0BAA0B;IACtC,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,GAAG,GAAGA,GAAG;EACf;AACF;AAEK,SAAUE,0BAA0BA,CAACC,KAAY;EACrD,OAAQA,KAAK,CAACF,IAAI,KAAK,0BAA0B;AACnD;AAGM,SAAUG,qBAAqBA,CAAEC,OAAe;EACpD,OAAO,SAAS,CAACC,IAAI,CAACD,OAAO,CAAC,IAAI,WAAW,CAACC,IAAI,CAACD,OAAO,CAAC;AAC7D;AAGM,SAAUE,wBAAwBA,CAACF,OAAe;EACtD,OAAOG,iBAAiB,CAACH,OAAO,CAAgC;AAClE;AAEO,eAAeI,yBAAyBA,CAACC,UAAgC,EAAEC,MAAc;EAC9F,IAAIP,qBAAqB,CAACO,MAAM,CAAC,EAAE;IACjC,MAAM;MAAEZ,KAAK;MAAEC;IAAK,IAAGO,wBAAwB,CAACI,MAAM,CAAC;IACvD,IAAID,UAAU,CAACE,GAAG,CAACC,UAAU,CAAC;MAAEd;IAAO,EAAC,EAAE;MAExC,OAAO,MAAMW,UAAU,CAACE,GAAG,CAACE,OAAO,CAAC;QAAEf,KAAK;QAAEC;MAAG,CAAE,CAAC;IACpD,OAAM;MAEL,MAAM,IAAIJ,wBAAwB,CAACG,KAAK,EAAEC,GAAG,CAAC;IAC/C;EACF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}