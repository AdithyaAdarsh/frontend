{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { isInteractionRequiredError } from '../../oidc/util/errors.js';\nimport { isInteractionRequired } from '../../oidc/util/loginRedirect.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../../oidc/types/Token.js';\nimport { authenticate } from '../authenticate.js';\nimport { cancel } from '../cancel.js';\nimport { handleEmailVerifyCallback, isEmailVerifyCallback, parseEmailVerifyCallback, isEmailVerifyCallbackError } from '../emailVerify.js';\nimport { handleInteractionCodeRedirect } from '../handleInteractionCodeRedirect.js';\nimport { makeIdxState } from '../idxState/index.js';\nimport { interact } from '../interact.js';\nimport { introspect } from '../introspect.js';\nimport { poll } from '../poll.js';\nimport { proceed, canProceed } from '../proceed.js';\nimport { recoverPassword } from '../recoverPassword.js';\nimport { register } from '../register.js';\nimport { startTransaction } from '../startTransaction.js';\nimport { getSavedTransactionMeta, createTransactionMeta, getTransactionMeta, saveTransactionMeta, clearTransactionMeta, isTransactionMetaValid } from '../transactionMeta.js';\nimport { unlockAccount } from '../unlockAccount.js';\nfunction createIdxAPI(sdk) {\n  const boundStartTransaction = startTransaction.bind(null, sdk);\n  const idx = {\n    interact: interact.bind(null, sdk),\n    introspect: introspect.bind(null, sdk),\n    makeIdxResponse: makeIdxState.bind(null, sdk),\n    authenticate: authenticate.bind(null, sdk),\n    register: register.bind(null, sdk),\n    start: boundStartTransaction,\n    startTransaction: boundStartTransaction,\n    poll: poll.bind(null, sdk),\n    proceed: proceed.bind(null, sdk),\n    cancel: cancel.bind(null, sdk),\n    recoverPassword: recoverPassword.bind(null, sdk),\n    handleInteractionCodeRedirect: handleInteractionCodeRedirect.bind(null, sdk),\n    isInteractionRequired: isInteractionRequired.bind(null, sdk),\n    isInteractionRequiredError,\n    handleEmailVerifyCallback: handleEmailVerifyCallback.bind(null, sdk),\n    isEmailVerifyCallback,\n    parseEmailVerifyCallback,\n    isEmailVerifyCallbackError,\n    getSavedTransactionMeta: getSavedTransactionMeta.bind(null, sdk),\n    createTransactionMeta: createTransactionMeta.bind(null, sdk),\n    getTransactionMeta: getTransactionMeta.bind(null, sdk),\n    saveTransactionMeta: saveTransactionMeta.bind(null, sdk),\n    clearTransactionMeta: clearTransactionMeta.bind(null, sdk),\n    isTransactionMetaValid,\n    setFlow: flow => {\n      sdk.options.flow = flow;\n    },\n    getFlow: () => {\n      return sdk.options.flow;\n    },\n    canProceed: canProceed.bind(null, sdk),\n    unlockAccount: unlockAccount.bind(null, sdk)\n  };\n  return idx;\n}\nexport { createIdxAPI };","map":{"version":3,"names":["createIdxAPI","sdk","boundStartTransaction","startTransaction","bind","idx","interact","introspect","makeIdxResponse","makeIdxState","authenticate","register","start","poll","proceed","cancel","recoverPassword","handleInteractionCodeRedirect","isInteractionRequired","isInteractionRequiredError","handleEmailVerifyCallback","isEmailVerifyCallback","parseEmailVerifyCallback","isEmailVerifyCallbackError","getSavedTransactionMeta","createTransactionMeta","getTransactionMeta","saveTransactionMeta","clearTransactionMeta","isTransactionMetaValid","setFlow","flow","options","getFlow","canProceed","unlockAccount"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/factory/api.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { isInteractionRequired, isInteractionRequiredError } from '../../oidc';\nimport { authenticate } from '../authenticate';\nimport { cancel } from '../cancel';\nimport {\n  handleEmailVerifyCallback,\n  isEmailVerifyCallback,\n  isEmailVerifyCallbackError,\n  parseEmailVerifyCallback\n} from '../emailVerify';\nimport { handleInteractionCodeRedirect } from '../handleInteractionCodeRedirect';\nimport { makeIdxState } from '../idxState';\nimport { interact } from '../interact';\nimport { introspect } from '../introspect';\nimport { poll } from '../poll';\nimport { canProceed, proceed } from '../proceed';\nimport { recoverPassword } from '../recoverPassword';\nimport { register } from '../register';\nimport { startTransaction } from '../startTransaction';\nimport {\n  clearTransactionMeta,\n  createTransactionMeta,\n  getSavedTransactionMeta,\n  getTransactionMeta,\n  isTransactionMetaValid,\n  saveTransactionMeta\n} from '../transactionMeta';\nimport { FlowIdentifier, IdxAPI, OktaAuthIdxInterface } from '../types';\nimport { unlockAccount } from '../unlockAccount';\n\n// Factory\nexport function createIdxAPI(sdk: OktaAuthIdxInterface): IdxAPI {\n  const boundStartTransaction = startTransaction.bind(null, sdk);\n  const idx = {\n    interact: interact.bind(null, sdk),\n    introspect: introspect.bind(null, sdk),\n    makeIdxResponse: makeIdxState.bind(null, sdk),\n    \n    authenticate: authenticate.bind(null, sdk),\n    register: register.bind(null, sdk),\n    start: boundStartTransaction,\n    startTransaction: boundStartTransaction, // Use `start` instead. `startTransaction` will be removed in 7.0\n    poll: poll.bind(null, sdk),\n    proceed: proceed.bind(null, sdk),\n    cancel: cancel.bind(null, sdk),\n    recoverPassword: recoverPassword.bind(null, sdk),\n\n    // oauth redirect callback\n    handleInteractionCodeRedirect: handleInteractionCodeRedirect.bind(null, sdk),\n\n    // interaction required callback\n    isInteractionRequired: isInteractionRequired.bind(null, sdk),\n    isInteractionRequiredError,\n\n    // email verify callback\n    handleEmailVerifyCallback: handleEmailVerifyCallback.bind(null, sdk),\n    isEmailVerifyCallback,\n    parseEmailVerifyCallback,\n    isEmailVerifyCallbackError,\n    \n    getSavedTransactionMeta: getSavedTransactionMeta.bind(null, sdk),\n    createTransactionMeta: createTransactionMeta.bind(null, sdk),\n    getTransactionMeta: getTransactionMeta.bind(null, sdk),\n    saveTransactionMeta: saveTransactionMeta.bind(null, sdk),\n    clearTransactionMeta: clearTransactionMeta.bind(null, sdk),\n    isTransactionMetaValid,\n    setFlow: (flow: FlowIdentifier) => {\n      sdk.options.flow = flow;\n    },\n    getFlow: (): FlowIdentifier | undefined => {\n      return sdk.options.flow;\n    },\n    canProceed: canProceed.bind(null, sdk),\n    unlockAccount: unlockAccount.bind(null, sdk),\n  };\n  return idx;\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CM,SAAUA,YAAYA,CAACC,GAAyB;EACpD,MAAMC,qBAAqB,GAAGC,gBAAgB,CAACC,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;EAC9D,MAAMI,GAAG,GAAG;IACVC,QAAQ,EAAEA,QAAQ,CAACF,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAClCM,UAAU,EAAEA,UAAU,CAACH,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IACtCO,eAAe,EAAEC,YAAY,CAACL,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAE7CS,YAAY,EAAEA,YAAY,CAACN,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAC1CU,QAAQ,EAAEA,QAAQ,CAACP,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAClCW,KAAK,EAAEV,qBAAqB;IAC5BC,gBAAgB,EAAED,qBAAqB;IACvCW,IAAI,EAAEA,IAAI,CAACT,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAC1Ba,OAAO,EAAEA,OAAO,CAACV,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAChCc,MAAM,EAAEA,MAAM,CAACX,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAC9Be,eAAe,EAAEA,eAAe,CAACZ,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAGhDgB,6BAA6B,EAAEA,6BAA6B,CAACb,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAG5EiB,qBAAqB,EAAEA,qBAAqB,CAACd,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAC5DkB,0BAA0B;IAG1BC,yBAAyB,EAAEA,yBAAyB,CAAChB,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IACpEoB,qBAAqB;IACrBC,wBAAwB;IACxBC,0BAA0B;IAE1BC,uBAAuB,EAAEA,uBAAuB,CAACpB,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAChEwB,qBAAqB,EAAEA,qBAAqB,CAACrB,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAC5DyB,kBAAkB,EAAEA,kBAAkB,CAACtB,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IACtD0B,mBAAmB,EAAEA,mBAAmB,CAACvB,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IACxD2B,oBAAoB,EAAEA,oBAAoB,CAACxB,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IAC1D4B,sBAAsB;IACtBC,OAAO,EAAGC,IAAoB,IAAI;MAChC9B,GAAG,CAAC+B,OAAO,CAACD,IAAI,GAAGA,IAAI;IACxB;IACDE,OAAO,EAAEA,CAAA,KAAiC;MACxC,OAAOhC,GAAG,CAAC+B,OAAO,CAACD,IAAI;IACxB;IACDG,UAAU,EAAEA,UAAU,CAAC9B,IAAI,CAAC,IAAI,EAAEH,GAAG,CAAC;IACtCkC,aAAa,EAAEA,aAAa,CAAC/B,IAAI,CAAC,IAAI,EAAEH,GAAG;GAC5C;EACD,OAAOI,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}