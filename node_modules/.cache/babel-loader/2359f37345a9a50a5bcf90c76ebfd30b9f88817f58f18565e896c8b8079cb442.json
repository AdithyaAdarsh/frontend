{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { generateRemediationFunctions } from './remediationParser.js';\nimport generateIdxAction from './generateIdxAction.js';\nimport { jsonpath } from '../../../util/jsonpath.js';\nimport AuthSdkError from '../../../errors/AuthSdkError.js';\nconst SKIP_FIELDS = Object.fromEntries(['remediation', 'context'].map(field => [field, !!'skip this field']));\nconst parseNonRemediations = function parseNonRemediations(authClient, idxResponse, toPersist = {}) {\n  const actions = {};\n  const context = {};\n  Object.keys(idxResponse).filter(field => !SKIP_FIELDS[field]).forEach(field => {\n    const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n    if (!fieldIsObject) {\n      context[field] = idxResponse[field];\n      return;\n    }\n    if (idxResponse[field].rel) {\n      actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n      return;\n    }\n    const _a = idxResponse[field],\n      {\n        value: fieldValue,\n        type\n      } = _a,\n      info = __rest(_a, [\"value\", \"type\"]);\n    context[field] = Object.assign({\n      type\n    }, info);\n    if (type !== 'object') {\n      context[field].value = fieldValue;\n      return;\n    }\n    context[field].value = {};\n    Object.entries(fieldValue).forEach(([subField, value]) => {\n      if (value.rel) {\n        actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n      } else {\n        context[field].value[subField] = value;\n      }\n    });\n  });\n  return {\n    context,\n    actions\n  };\n};\nconst expandRelatesTo = (idxResponse, value) => {\n  Object.keys(value).forEach(k => {\n    if (k === 'relatesTo') {\n      const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n      if (typeof query === 'string') {\n        const result = jsonpath({\n          path: query,\n          json: idxResponse\n        })[0];\n        if (result) {\n          value[k] = result;\n          return;\n        } else {\n          throw new AuthSdkError(`Cannot resolve relatesTo: ${query}`);\n        }\n      }\n    }\n    if (Array.isArray(value[k])) {\n      value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n    }\n  });\n};\nconst convertRemediationAction = (authClient, remediation, toPersist) => {\n  if (remediation.rel) {\n    const remediationActions = generateRemediationFunctions(authClient, [remediation], toPersist);\n    const actionFn = remediationActions[remediation.name];\n    return Object.assign(Object.assign({}, remediation), {\n      action: actionFn\n    });\n  }\n  return remediation;\n};\nconst parseIdxResponse = function parseIdxResponse(authClient, idxResponse, toPersist = {}) {\n  var _a;\n  const remediationData = ((_a = idxResponse.remediation) === null || _a === void 0 ? void 0 : _a.value) || [];\n  remediationData.forEach(remediation => expandRelatesTo(idxResponse, remediation));\n  const remediations = remediationData.map(remediation => convertRemediationAction(authClient, remediation, toPersist));\n  const {\n    context,\n    actions\n  } = parseNonRemediations(authClient, idxResponse, toPersist);\n  return {\n    remediations,\n    context,\n    actions\n  };\n};\nexport { parseIdxResponse, parseNonRemediations };","map":{"version":3,"names":["SKIP_FIELDS","Object","fromEntries","map","field","parseNonRemediations","authClient","idxResponse","toPersist","actions","context","keys","filter","forEach","fieldIsObject","rel","name","generateIdxAction","_a","value","fieldValue","type","info","__rest","assign","entries","subField","expandRelatesTo","k","query","Array","isArray","result","jsonpath","path","json","AuthSdkError","innerValue","convertRemediationAction","remediation","remediationActions","generateRemediationFunctions","actionFn","action","parseIdxResponse","remediationData","remediations"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/idxState/v1/idxResponseParser.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable max-len */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { OktaAuthIdxInterface } from '../../types';    // auth-js/types\nimport { generateRemediationFunctions } from './remediationParser';\nimport generateIdxAction from './generateIdxAction';\nimport { jsonpath } from '../../../util/jsonpath';\nimport { AuthSdkError } from '../../../errors';\n\nconst SKIP_FIELDS = Object.fromEntries([\n  'remediation', // remediations are put into proceed/neededToProceed\n  'context', // the API response of 'context' isn't externally useful.  We ignore it and put all non-action (contextual) info into idxState.context\n].map( (field) => [ field, !!'skip this field' ] ));\n\nexport const parseNonRemediations = function parseNonRemediations( authClient: OktaAuthIdxInterface, idxResponse, toPersist = {} ) {\n  const actions = {};\n  const context = {};\n\n  Object.keys(idxResponse)\n    .filter( field => !SKIP_FIELDS[field])\n    .forEach( field => {\n      const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n\n      if ( !fieldIsObject ) {\n        // simple fields are contextual info\n        context[field] = idxResponse[field];\n        return;\n      }\n\n      if ( idxResponse[field].rel ) {\n        // top level actions\n        actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n        return;\n      }\n\n      const { value: fieldValue, type, ...info} = idxResponse[field];\n      context[field] = { type, ...info}; // add the non-action parts as context\n\n      if ( type !== 'object' ) {\n        // only object values hold actions\n        context[field].value = fieldValue;\n        return;\n      }\n\n      // We are an object field containing an object value\n      context[field].value = {};\n      Object.entries(fieldValue)\n        .forEach( ([subField, value]) => {\n          if (value.rel) { // is [field].value[subField] an action?\n            // add any \"action\" value subfields to actions\n            actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n          } else {\n            // add non-action value subfields to context\n            context[field].value[subField] = value;\n          }\n        });\n    });\n\n  return { context, actions };\n};\n\nconst expandRelatesTo = (idxResponse, value) => {\n  Object.keys(value).forEach(k => {\n    if (k === 'relatesTo') {\n      const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n      if (typeof query === 'string') {\n        const result = jsonpath({ path: query, json: idxResponse })[0];\n        if (result) {\n          value[k] = result;\n          return;\n        } else {\n          throw new AuthSdkError(`Cannot resolve relatesTo: ${query}`);\n        }\n      }\n    }\n    if (Array.isArray(value[k])) {\n      value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n    }\n  });\n};\n\nconst convertRemediationAction = (authClient: OktaAuthIdxInterface, remediation, toPersist) => {\n  // Only remediation that has `rel` field (indicator for form submission) can have http action\n  if (remediation.rel) {\n    const remediationActions = generateRemediationFunctions( authClient, [remediation], toPersist );\n    const actionFn = remediationActions[remediation.name];\n    return {\n      ...remediation,\n      action: actionFn,\n    };\n  }\n\n  return remediation;\n};\n\nexport const parseIdxResponse = function parseIdxResponse( authClient: OktaAuthIdxInterface, idxResponse, toPersist = {} ): {\n  remediations: IdxRemediation[];\n  context: IdxContext;\n  actions: IdxActions;\n} {\n  const remediationData = idxResponse.remediation?.value || [];\n\n  remediationData.forEach(\n    remediation => expandRelatesTo(idxResponse, remediation)\n  );\n\n  const remediations = remediationData.map(remediation => convertRemediationAction( authClient, remediation, toPersist ));\n\n  const { context, actions } = parseNonRemediations( authClient, idxResponse, toPersist );\n\n  return {\n    remediations,\n    context,\n    actions,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}