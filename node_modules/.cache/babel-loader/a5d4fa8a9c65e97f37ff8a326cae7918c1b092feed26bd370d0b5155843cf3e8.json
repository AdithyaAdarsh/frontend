{"ast":null,"code":"import _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\nvar AuthenticatorEnrollmentData = /*#__PURE__*/function (_AuthenticatorData) {\n  _inherits(AuthenticatorEnrollmentData, _AuthenticatorData);\n  var _super = _createSuper(AuthenticatorEnrollmentData);\n  function AuthenticatorEnrollmentData() {\n    _classCallCheck(this, AuthenticatorEnrollmentData);\n    return _super.apply(this, arguments);\n  }\n  _createClass(AuthenticatorEnrollmentData, [{\n    key: \"mapAuthenticator\",\n    value: function mapAuthenticator() {\n      var authenticatorData = this.getAuthenticatorData();\n      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n      return {\n        id: authenticatorFromRemediation.form.value.find(function (_ref) {\n          var name = _ref.name;\n          return name === 'id';\n        }).value,\n        methodType: authenticatorData.methodType,\n        phoneNumber: authenticatorData.phoneNumber\n      };\n    }\n  }, {\n    key: \"getInputAuthenticator\",\n    value: function getInputAuthenticator(remediation) {\n      return [{\n        name: 'methodType',\n        type: 'string'\n      }, {\n        name: 'phoneNumber',\n        label: 'Phone Number',\n        type: 'string'\n      }].map(function (item) {\n        var value = remediation.form.value.find(function (val) {\n          return val.name === item.name;\n        });\n        return Object.assign(Object.assign({}, value), item);\n      });\n    }\n  }, {\n    key: \"mapAuthenticatorDataFromValues\",\n    value: function mapAuthenticatorDataFromValues(data) {\n      data = _get(_getPrototypeOf(AuthenticatorEnrollmentData.prototype), \"mapAuthenticatorDataFromValues\", this).call(this, data);\n      var phoneNumber = this.values.phoneNumber;\n      if (!data && !phoneNumber) {\n        return;\n      }\n      return Object.assign(Object.assign({}, data && data), phoneNumber && {\n        phoneNumber: phoneNumber\n      });\n    }\n  }]);\n  return AuthenticatorEnrollmentData;\n}(AuthenticatorData);\nAuthenticatorEnrollmentData.remediationName = 'authenticator-enrollment-data';\nexport { AuthenticatorEnrollmentData };","map":{"version":3,"names":["AuthenticatorEnrollmentData","_AuthenticatorData","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","mapAuthenticator","authenticatorData","getAuthenticatorData","authenticatorFromRemediation","getAuthenticatorFromRemediation","remediation","id","form","find","_ref","name","methodType","phoneNumber","getInputAuthenticator","type","label","map","item","val","Object","assign","mapAuthenticatorDataFromValues","data","_get","_getPrototypeOf","prototype","call","values","AuthenticatorData","remediationName"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/AuthenticatorEnrollmentData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\nimport { getAuthenticatorFromRemediation } from './util';\n\nexport type AuthenticatorEnrollmentDataValues =  AuthenticatorDataValues & {\n  phoneNumber?: string;\n  resend?: boolean; // resend is not a remediator value - revise when IdxResponse structure is updated\n}\nexport class AuthenticatorEnrollmentData extends AuthenticatorData<AuthenticatorEnrollmentDataValues> {\n  static remediationName = 'authenticator-enrollment-data';\n\n  mapAuthenticator() {\n    const authenticatorData = this.getAuthenticatorData();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation)!;\n    return { \n      id: authenticatorFromRemediation.form!.value\n        .find(({ name }) => name === 'id')!.value,\n      methodType: authenticatorData!.methodType,\n      phoneNumber: authenticatorData!.phoneNumber,\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    return [\n      { name: 'methodType', type: 'string' }, \n      { name: 'phoneNumber', label: 'Phone Number', type: 'string' }\n    ].map(item => {\n      const value = remediation.form.value.find(val => val.name === item.name);\n      return { ...value, ...item };\n    });\n  }\n\n  protected mapAuthenticatorDataFromValues(data?) {\n    // get mapped authenticator from base class\n    data = super.mapAuthenticatorDataFromValues(data);\n    // add phoneNumber to authenticator if it exists in values\n    const { phoneNumber } = this.values;\n    if (!data && !phoneNumber) {\n      return;\n    }\n\n    return { \n      ...(data && data), \n      ...(phoneNumber && { phoneNumber }) \n    };\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;IAqBaA,2BAA4B,0BAAAC,kBAAA;EAAAC,SAAA,CAAAF,2BAAA,EAAAC,kBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,2BAAA;EAAA,SAAAA,4BAAA;IAAAK,eAAA,OAAAL,2BAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,2BAAA;IAAAS,GAAA;IAAAC,KAAA,EAGvC,SAAAC,iBAAA,EAAgB;MACd,IAAMC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;MACrD,IAAMC,4BAA4B,GAAGC,+BAA+B,CAAC,IAAI,CAACC,WAAW,CAAE;MACvF,OAAO;QACLC,EAAE,EAAEH,4BAA4B,CAACI,IAAK,CAACR,KAAK,CACzCS,IAAI,CAAC,UAAAC,IAAA;UAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;UAAA,OAAOA,IAAI,KAAK,IAAI;QAAA,EAAE,CAACX,KAAK;QAC3CY,UAAU,EAAEV,iBAAkB,CAACU,UAAU;QACzCC,WAAW,EAAEX,iBAAkB,CAACW;OACjC;IACF;EAAA;IAAAd,GAAA;IAAAC,KAAA,EAED,SAAAc,sBAAsBR,WAAW;MAC/B,OAAO,CACL;QAAEK,IAAI,EAAE,YAAY;QAAEI,IAAI,EAAE;MAAU,GACtC;QAAEJ,IAAI,EAAE,aAAa;QAAEK,KAAK,EAAE,cAAc;QAAED,IAAI,EAAE;MAAU,EAC/D,CAACE,GAAG,CAAC,UAAAC,IAAI,EAAG;QACX,IAAMlB,KAAK,GAAGM,WAAW,CAACE,IAAI,CAACR,KAAK,CAACS,IAAI,CAAC,UAAAU,GAAG;UAAA,OAAIA,GAAG,CAACR,IAAI,KAAKO,IAAI,CAACP,IAAI;QAAA,EAAC;QACxE,OAAYS,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAArB,KAAK,CAAK,EAAAkB,IAAI,CAAG;MAC/B,CAAC,CAAC;IACH;EAAA;IAAAnB,GAAA;IAAAC,KAAA,EAES,SAAAsB,+BAA+BC,IAAK;MAE5CA,IAAI,GAAAC,IAAA,CAAAC,eAAA,CAAAnC,2BAAA,CAAAoC,SAAA,2CAAAC,IAAA,OAAwCJ,IAAI,CAAC;MAEjD,IAAQV,WAAW,GAAK,IAAI,CAACe,MAAM,CAA3Bf,WAAW;MACnB,IAAI,CAACU,IAAI,IAAI,CAACV,WAAW,EAAE;QACzB;MACD;MAED,OAAAO,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACME,IAAI,IAAIA,IAAI,CAAC,EACbV,WAAW,IAAI;QAAEA,WAAW,EAAXA;MAAa,EAClC;IACH;EAAA;EAAA,OAAAvB,2BAAA;AAAA,EArC8CuC,iBAAoD;AAC5FvC,2BAAe,CAAAwC,eAAA,GAAG,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}