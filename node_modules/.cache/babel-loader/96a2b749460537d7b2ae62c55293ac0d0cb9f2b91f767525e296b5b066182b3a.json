{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport PCancelable from 'p-cancelable';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getConsole } from '../util/console.js';\nimport { PromiseQueue } from '../util/PromiseQueue.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nimport { EVENT_ADDED, EVENT_REMOVED } from '../oidc/types/TokenManager.js';\nvar INITIAL_AUTH_STATE = null;\nvar DEFAULT_PENDING = {\n  updateAuthStatePromise: null,\n  canceledTimes: 0\n};\nvar EVENT_AUTH_STATE_CHANGE = 'authStateChange';\nvar MAX_PROMISE_CANCEL_TIMES = 10;\nvar isSameAuthState = function isSameAuthState(prevState, state) {\n  if (!prevState) {\n    return false;\n  }\n  return prevState.isAuthenticated === state.isAuthenticated && JSON.stringify(prevState.idToken) === JSON.stringify(state.idToken) && JSON.stringify(prevState.accessToken) === JSON.stringify(state.accessToken) && prevState.error === state.error;\n};\nvar AuthStateManager = /*#__PURE__*/function () {\n  function AuthStateManager(sdk) {\n    var _this = this;\n    _classCallCheck(this, AuthStateManager);\n    if (!sdk.emitter) {\n      throw new AuthSdkError('Emitter should be initialized before AuthStateManager');\n    }\n    this._sdk = sdk;\n    this._pending = Object.assign({}, DEFAULT_PENDING);\n    this._authState = INITIAL_AUTH_STATE;\n    this._logOptions = {};\n    this._prevAuthState = null;\n    this._transformQueue = new PromiseQueue({\n      quiet: true\n    });\n    sdk.tokenManager.on(EVENT_ADDED, function (key, token) {\n      _this._setLogOptions({\n        event: EVENT_ADDED,\n        key: key,\n        token: token\n      });\n      _this.updateAuthState();\n    });\n    sdk.tokenManager.on(EVENT_REMOVED, function (key, token) {\n      _this._setLogOptions({\n        event: EVENT_REMOVED,\n        key: key,\n        token: token\n      });\n      _this.updateAuthState();\n    });\n  }\n  _createClass(AuthStateManager, [{\n    key: \"_setLogOptions\",\n    value: function _setLogOptions(options) {\n      this._logOptions = options;\n    }\n  }, {\n    key: \"getAuthState\",\n    value: function getAuthState() {\n      return this._authState;\n    }\n  }, {\n    key: \"getPreviousAuthState\",\n    value: function getPreviousAuthState() {\n      return this._prevAuthState;\n    }\n  }, {\n    key: \"updateAuthState\",\n    value: function () {\n      var _updateAuthState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var _this$_sdk$options, transformAuthState, devMode, log, emitAuthStateChange, finalPromise, cancelablePromise;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$_sdk$options = this._sdk.options, transformAuthState = _this$_sdk$options.transformAuthState, devMode = _this$_sdk$options.devMode;\n              log = function log(status) {\n                var _this2$_logOptions = _this2._logOptions,\n                  event = _this2$_logOptions.event,\n                  key = _this2$_logOptions.key,\n                  token = _this2$_logOptions.token;\n                getConsole().group(\"OKTA-AUTH-JS:updateAuthState: Event:\".concat(event, \" Status:\").concat(status));\n                getConsole().log(key, token);\n                getConsole().log('Current authState', _this2._authState);\n                getConsole().groupEnd();\n                _this2._logOptions = {};\n              };\n              emitAuthStateChange = function emitAuthStateChange(authState) {\n                if (isSameAuthState(_this2._authState, authState)) {\n                  devMode && log('unchanged');\n                  return;\n                }\n                _this2._prevAuthState = _this2._authState;\n                _this2._authState = authState;\n                _this2._sdk.emitter.emit(EVENT_AUTH_STATE_CHANGE, Object.assign({}, authState));\n                devMode && log('emitted');\n              };\n              finalPromise = function finalPromise(origPromise) {\n                return _this2._pending.updateAuthStatePromise.then(function () {\n                  var curPromise = _this2._pending.updateAuthStatePromise;\n                  if (curPromise && curPromise !== origPromise) {\n                    return finalPromise(curPromise);\n                  }\n                  return _this2.getAuthState();\n                });\n              };\n              if (!this._pending.updateAuthStatePromise) {\n                _context.next = 11;\n                break;\n              }\n              if (!(this._pending.canceledTimes >= MAX_PROMISE_CANCEL_TIMES)) {\n                _context.next = 10;\n                break;\n              }\n              devMode && log('terminated');\n              return _context.abrupt(\"return\", finalPromise(this._pending.updateAuthStatePromise));\n            case 10:\n              this._pending.updateAuthStatePromise.cancel();\n            case 11:\n              cancelablePromise = new PCancelable(function (resolve, _, onCancel) {\n                onCancel.shouldReject = false;\n                onCancel(function () {\n                  _this2._pending.updateAuthStatePromise = null;\n                  _this2._pending.canceledTimes = _this2._pending.canceledTimes + 1;\n                  devMode && log('canceled');\n                });\n                var emitAndResolve = function emitAndResolve(authState) {\n                  if (cancelablePromise.isCanceled) {\n                    resolve();\n                    return;\n                  }\n                  emitAuthStateChange(authState);\n                  resolve();\n                  _this2._pending = Object.assign({}, DEFAULT_PENDING);\n                };\n                _this2._sdk.isAuthenticated().then(function () {\n                  if (cancelablePromise.isCanceled) {\n                    resolve();\n                    return;\n                  }\n                  var _this2$_sdk$tokenMana = _this2._sdk.tokenManager.getTokensSync(),\n                    accessToken = _this2$_sdk$tokenMana.accessToken,\n                    idToken = _this2$_sdk$tokenMana.idToken,\n                    refreshToken = _this2$_sdk$tokenMana.refreshToken;\n                  var authState = {\n                    accessToken: accessToken,\n                    idToken: idToken,\n                    refreshToken: refreshToken,\n                    isAuthenticated: !!(accessToken && idToken)\n                  };\n                  var promise = transformAuthState ? _this2._transformQueue.push(transformAuthState, null, _this2._sdk, authState) : Promise.resolve(authState);\n                  promise.then(function (authState) {\n                    return emitAndResolve(authState);\n                  }).catch(function (error) {\n                    return emitAndResolve({\n                      accessToken: accessToken,\n                      idToken: idToken,\n                      refreshToken: refreshToken,\n                      isAuthenticated: false,\n                      error: error\n                    });\n                  });\n                });\n              });\n              this._pending.updateAuthStatePromise = cancelablePromise;\n              return _context.abrupt(\"return\", finalPromise(cancelablePromise));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function updateAuthState() {\n        return _updateAuthState.apply(this, arguments);\n      }\n      return updateAuthState;\n    }()\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(handler) {\n      this._sdk.emitter.on(EVENT_AUTH_STATE_CHANGE, handler);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(handler) {\n      this._sdk.emitter.off(EVENT_AUTH_STATE_CHANGE, handler);\n    }\n  }]);\n  return AuthStateManager;\n}();\nexport { AuthStateManager, INITIAL_AUTH_STATE };","map":{"version":3,"names":["INITIAL_AUTH_STATE","DEFAULT_PENDING","updateAuthStatePromise","canceledTimes","EVENT_AUTH_STATE_CHANGE","MAX_PROMISE_CANCEL_TIMES","isSameAuthState","prevState","state","isAuthenticated","JSON","stringify","idToken","accessToken","error","AuthStateManager","sdk","_this","_classCallCheck","emitter","AuthSdkError","_sdk","_pending","Object","assign","_authState","_logOptions","_prevAuthState","_transformQueue","PromiseQueue","quiet","tokenManager","on","EVENT_ADDED","key","token","_setLogOptions","event","updateAuthState","EVENT_REMOVED","_createClass","value","options","getAuthState","getPreviousAuthState","_updateAuthState","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","_this$_sdk$options","transformAuthState","devMode","log","emitAuthStateChange","finalPromise","cancelablePromise","wrap","_callee$","_context","prev","next","status","_this2$_logOptions","getConsole","group","concat","groupEnd","authState","emit","origPromise","then","curPromise","abrupt","cancel","PCancelable","resolve","_","onCancel","shouldReject","emitAndResolve","isCanceled","_this2$_sdk$tokenMana","getTokensSync","refreshToken","promise","push","Promise","catch","stop","apply","arguments","subscribe","handler","unsubscribe","off"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/core/AuthStateManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n \n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \n// Do not use this type in code, so it won't be emitted in the declaration output\nimport PCancelable from 'p-cancelable';\nimport { AuthSdkError } from '../errors';\nimport {\n  EVENT_ADDED,\n  EVENT_REMOVED,\n  OAuthStorageManagerInterface,\n  OAuthTransactionMeta,\n  OktaAuthOAuthInterface\n} from '../oidc';\nimport {\n  AuthState,\n  AuthStateLogOptions,\n  OktaAuthCoreOptions,\n} from './types';\nimport { PromiseQueue, getConsole } from '../util';\n\nexport const INITIAL_AUTH_STATE = null;\nconst DEFAULT_PENDING = {\n  updateAuthStatePromise: null,\n  canceledTimes: 0\n};\nconst EVENT_AUTH_STATE_CHANGE = 'authStateChange';\nconst MAX_PROMISE_CANCEL_TIMES = 10;\n\n// only compare first level of authState\nconst isSameAuthState = (prevState: AuthState | null, state: AuthState) => {\n  // initial state is null\n  if (!prevState) {\n    return false;\n  }\n\n  return prevState.isAuthenticated === state.isAuthenticated \n    && JSON.stringify(prevState.idToken) === JSON.stringify(state.idToken)\n    && JSON.stringify(prevState.accessToken) === JSON.stringify(state.accessToken)\n    && prevState.error === state.error;\n};\n\n\nexport class AuthStateManager\n<\n  M extends OAuthTransactionMeta,\n  S extends OAuthStorageManagerInterface<M>,\n  O extends OktaAuthCoreOptions\n>\n{\n  _sdk: OktaAuthOAuthInterface<M, S, O>;\n  _pending: { \n    updateAuthStatePromise: any;\n    canceledTimes: number; \n  };\n  _authState: AuthState | null;\n  _prevAuthState: AuthState | null;\n  _logOptions: AuthStateLogOptions;\n  _transformQueue: PromiseQueue;\n\n  constructor(sdk: OktaAuthOAuthInterface<M, S, O>) {\n    if (!sdk.emitter) {\n      throw new AuthSdkError('Emitter should be initialized before AuthStateManager');\n    }\n\n    this._sdk = sdk;\n    this._pending = { ...DEFAULT_PENDING };\n    this._authState = INITIAL_AUTH_STATE;\n    this._logOptions = {};\n    this._prevAuthState = null;\n    this._transformQueue = new PromiseQueue({\n      quiet: true\n    });\n\n    // Listen on tokenManager events to start updateState process\n    // \"added\" event is emitted in both add and renew process\n    // Only listen on \"added\" event to update auth state\n    sdk.tokenManager.on(EVENT_ADDED, (key, token) => {\n      this._setLogOptions({ event: EVENT_ADDED, key, token });\n      this.updateAuthState();\n    });\n    sdk.tokenManager.on(EVENT_REMOVED, (key, token) => {\n      this._setLogOptions({ event: EVENT_REMOVED, key, token });\n      this.updateAuthState();\n    });\n  }\n\n  _setLogOptions(options) {\n    this._logOptions = options;\n  }\n\n  getAuthState(): AuthState | null {\n    return this._authState;\n  }\n\n  getPreviousAuthState(): AuthState | null {\n    return this._prevAuthState;\n  }\n\n  async updateAuthState(): Promise<AuthState> {\n    const { transformAuthState, devMode } = this._sdk.options;\n\n    const log = (status) => {\n      const { event, key, token } = this._logOptions;\n      getConsole().group(`OKTA-AUTH-JS:updateAuthState: Event:${event} Status:${status}`);\n      getConsole().log(key, token);\n      getConsole().log('Current authState', this._authState);\n      getConsole().groupEnd();\n      \n      // clear log options after logging\n      this._logOptions = {};\n    };\n\n    const emitAuthStateChange = (authState) => {\n      if (isSameAuthState(this._authState, authState)) {\n        devMode && log('unchanged'); \n        return;\n      }\n      this._prevAuthState = this._authState;\n      this._authState = authState;\n      // emit new authState object\n      this._sdk.emitter.emit(EVENT_AUTH_STATE_CHANGE, { ...authState });\n      devMode && log('emitted');\n    };\n\n    const finalPromise = (origPromise) => {       \n      return this._pending.updateAuthStatePromise.then(() => {\n        const curPromise = this._pending.updateAuthStatePromise;\n        if (curPromise && curPromise !== origPromise) {\n          return finalPromise(curPromise);\n        }\n        return this.getAuthState();\n      });\n    };\n\n    if (this._pending.updateAuthStatePromise) {\n      if (this._pending.canceledTimes >= MAX_PROMISE_CANCEL_TIMES) {\n        // stop canceling then starting a new promise\n        // let existing promise finish to prevent running into loops\n        devMode && log('terminated');\n        return finalPromise(this._pending.updateAuthStatePromise);\n      } else {\n        this._pending.updateAuthStatePromise.cancel();\n      }\n    }\n\n    /* eslint-disable complexity */\n    const cancelablePromise = new PCancelable((resolve, _, onCancel) => {\n      onCancel.shouldReject = false;\n      onCancel(() => {\n        this._pending.updateAuthStatePromise = null;\n        this._pending.canceledTimes = this._pending.canceledTimes + 1;\n        devMode && log('canceled');\n      });\n\n      const emitAndResolve = (authState) => {\n        if (cancelablePromise.isCanceled) {\n          resolve();\n          return;\n        }\n        // emit event and resolve promise \n        emitAuthStateChange(authState);\n        resolve();\n\n        // clear pending states after resolve\n        this._pending = { ...DEFAULT_PENDING };\n      };\n\n      this._sdk.isAuthenticated()\n        .then(() => {\n          if (cancelablePromise.isCanceled) {\n            resolve();\n            return;\n          }\n\n          const { accessToken, idToken, refreshToken } = this._sdk.tokenManager.getTokensSync();\n          const authState = {\n            accessToken,\n            idToken,\n            refreshToken,\n            isAuthenticated: !!(accessToken && idToken)\n          };\n\n          // Enqueue transformAuthState so that it does not run concurrently\n          const promise: Promise<AuthState> = transformAuthState\n            ? this._transformQueue.push(transformAuthState, null, this._sdk, authState) as Promise<AuthState>\n            : Promise.resolve(authState);\n\n          promise\n            .then(authState => emitAndResolve(authState))\n            .catch(error => emitAndResolve({\n              accessToken, \n              idToken, \n              refreshToken,\n              isAuthenticated: false, \n              error\n            }));\n        });\n    });\n    /* eslint-enable complexity */\n    this._pending.updateAuthStatePromise = cancelablePromise;\n\n    return finalPromise(cancelablePromise);\n  }\n\n  subscribe(handler): void {\n    this._sdk.emitter.on(EVENT_AUTH_STATE_CHANGE, handler);\n  }\n\n  unsubscribe(handler?): void {\n    this._sdk.emitter.off(EVENT_AUTH_STATE_CHANGE, handler);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}