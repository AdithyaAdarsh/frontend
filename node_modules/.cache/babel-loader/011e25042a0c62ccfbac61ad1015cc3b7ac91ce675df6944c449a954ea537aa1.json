{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { clone } from '../util/object.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport './types/Token.js';\nimport { postToTokenEndpoint } from './endpoints/token.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nfunction exchangeCodeForTokens(sdk, tokenParams, urls) {\n  urls = urls || getOAuthUrls(sdk, tokenParams);\n  tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n  var _tokenParams = tokenParams,\n    authorizationCode = _tokenParams.authorizationCode,\n    interactionCode = _tokenParams.interactionCode,\n    codeVerifier = _tokenParams.codeVerifier,\n    clientId = _tokenParams.clientId,\n    redirectUri = _tokenParams.redirectUri,\n    scopes = _tokenParams.scopes,\n    ignoreSignature = _tokenParams.ignoreSignature,\n    state = _tokenParams.state,\n    acrValues = _tokenParams.acrValues;\n  var getTokenOptions = {\n    clientId: clientId,\n    redirectUri: redirectUri,\n    authorizationCode: authorizationCode,\n    interactionCode: interactionCode,\n    codeVerifier: codeVerifier\n  };\n  return postToTokenEndpoint(sdk, getTokenOptions, urls).then(function (response) {\n    var responseType = ['token'];\n    if (scopes.indexOf('openid') !== -1) {\n      responseType.push('id_token');\n    }\n    var handleResponseOptions = {\n      clientId: clientId,\n      redirectUri: redirectUri,\n      scopes: scopes,\n      responseType: responseType,\n      ignoreSignature: ignoreSignature,\n      acrValues: acrValues\n    };\n    return handleOAuthResponse(sdk, handleResponseOptions, response, urls).then(function (response) {\n      response.code = authorizationCode;\n      response.state = state;\n      return response;\n    });\n  }).finally(function () {\n    sdk.transactionManager.clear();\n  });\n}\nexport { exchangeCodeForTokens };","map":{"version":3,"names":["exchangeCodeForTokens","sdk","tokenParams","urls","getOAuthUrls","Object","assign","getDefaultTokenParams","clone","_tokenParams","authorizationCode","interactionCode","codeVerifier","clientId","redirectUri","scopes","ignoreSignature","state","acrValues","getTokenOptions","postToTokenEndpoint","then","response","responseType","indexOf","push","handleResponseOptions","handleOAuthResponse","code","finally","transactionManager","clear"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/exchangeCodeForTokens.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable max-len */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { CustomUrls, OAuthResponse, OAuthResponseType, OktaAuthOAuthInterface, TokenParams, TokenResponse } from './types';\nimport { getOAuthUrls, getDefaultTokenParams } from './util';\nimport { clone } from '../util';\nimport { postToTokenEndpoint } from './endpoints/token';\nimport { handleOAuthResponse } from './handleOAuthResponse';\n\n// codeVerifier is required. May pass either an authorizationCode or interactionCode\nexport function exchangeCodeForTokens(sdk: OktaAuthOAuthInterface, tokenParams: TokenParams, urls?: CustomUrls): Promise<TokenResponse> {\n  urls = urls || getOAuthUrls(sdk, tokenParams);\n  // build params using defaults + options\n  tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n\n  const {\n    authorizationCode,\n    interactionCode,\n    codeVerifier,\n    clientId,\n    redirectUri,\n    scopes,\n    ignoreSignature,\n    state,\n    acrValues\n  } = tokenParams;\n\n  var getTokenOptions = {\n    clientId,\n    redirectUri,\n    authorizationCode,\n    interactionCode,\n    codeVerifier,\n  };\n\n  return postToTokenEndpoint(sdk, getTokenOptions, urls)\n    .then((response: OAuthResponse) => {\n\n      // `handleOAuthResponse` hanadles responses from both `/authorize` and `/token` endpoints\n      // Here we modify the response from `/token` so that it more closely matches a response from `/authorize`\n      // `responseType` is used to validate that the expected tokens were returned\n      const responseType: OAuthResponseType[] = ['token']; // an accessToken will always be returned\n      if (scopes!.indexOf('openid') !== -1) {\n        responseType.push('id_token'); // an idToken will be returned if \"openid\" is in the scopes\n      }\n      const handleResponseOptions: TokenParams = {\n        clientId,\n        redirectUri,\n        scopes,\n        responseType,\n        ignoreSignature,\n        acrValues\n      };\n      return handleOAuthResponse(sdk, handleResponseOptions, response, urls!)\n        .then((response: TokenResponse) => {\n          // For compatibility, \"code\" is returned in the TokenResponse. OKTA-326091\n          response.code = authorizationCode;\n          response.state = state!;\n          return response;\n        });\n    })\n    .finally(() => {\n      sdk.transactionManager.clear();\n    });\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;SAqBgBA,qBAAqBA,CAACC,GAA2B,EAAEC,WAAwB,EAAEC,IAAiB;EAC5GA,IAAI,GAAGA,IAAI,IAAIC,YAAY,CAACH,GAAG,EAAEC,WAAW,CAAC;EAE7CA,WAAW,GAAGG,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEC,qBAAqB,CAACN,GAAG,CAAC,EAAEO,KAAK,CAACN,WAAW,CAAC,CAAC;EAE/E,IAAAO,YAAA,GAUIP,WAAW;IATbQ,iBAAiB,GAAAD,YAAA,CAAjBC,iBAAiB;IACjBC,eAAe,GAAAF,YAAA,CAAfE,eAAe;IACfC,YAAY,GAAAH,YAAA,CAAZG,YAAY;IACZC,QAAQ,GAAAJ,YAAA,CAARI,QAAQ;IACRC,WAAW,GAAAL,YAAA,CAAXK,WAAW;IACXC,MAAM,GAAAN,YAAA,CAANM,MAAM;IACNC,eAAe,GAAAP,YAAA,CAAfO,eAAe;IACfC,KAAK,GAAAR,YAAA,CAALQ,KAAK;IACLC,SAAS,GAAAT,YAAA,CAATS,SAAS;EAGX,IAAIC,eAAe,GAAG;IACpBN,QAAQ,EAARA,QAAQ;IACRC,WAAW,EAAXA,WAAW;IACXJ,iBAAiB,EAAjBA,iBAAiB;IACjBC,eAAe,EAAfA,eAAe;IACfC,YAAY,EAAZA;GACD;EAED,OAAOQ,mBAAmB,CAACnB,GAAG,EAAEkB,eAAe,EAAEhB,IAAI,CAAC,CACnDkB,IAAI,CAAC,UAACC,QAAuB,EAAI;IAKhC,IAAMC,YAAY,GAAwB,CAAC,OAAO,CAAC;IACnD,IAAIR,MAAO,CAACS,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MACpCD,YAAY,CAACE,IAAI,CAAC,UAAU,CAAC;IAC9B;IACD,IAAMC,qBAAqB,GAAgB;MACzCb,QAAQ,EAARA,QAAQ;MACRC,WAAW,EAAXA,WAAW;MACXC,MAAM,EAANA,MAAM;MACNQ,YAAY,EAAZA,YAAY;MACZP,eAAe,EAAfA,eAAe;MACfE,SAAS,EAATA;KACD;IACD,OAAOS,mBAAmB,CAAC1B,GAAG,EAAEyB,qBAAqB,EAAEJ,QAAQ,EAAEnB,IAAK,CAAC,CACpEkB,IAAI,CAAC,UAACC,QAAuB,EAAI;MAEhCA,QAAQ,CAACM,IAAI,GAAGlB,iBAAiB;MACjCY,QAAQ,CAACL,KAAK,GAAGA,KAAM;MACvB,OAAOK,QAAQ;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,CACDO,OAAO,CAAC,YAAK;IACZ5B,GAAG,CAAC6B,kBAAkB,CAACC,KAAK,EAAE;EAChC,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}