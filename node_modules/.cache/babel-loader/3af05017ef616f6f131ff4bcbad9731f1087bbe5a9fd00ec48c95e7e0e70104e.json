{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport '../types/Token.js';\nimport { isTransactionMeta } from '../types/Transaction.js';\nconst MAX_ENTRY_LIFETIME = 30 * 60 * 1000;\nfunction pruneSharedStorage(storageManager) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  Object.keys(entries).forEach(state => {\n    const entry = entries[state];\n    const age = Date.now() - entry.dateCreated;\n    if (age > MAX_ENTRY_LIFETIME) {\n      delete entries[state];\n    }\n  });\n  sharedStorage.setStorage(entries);\n}\nfunction saveTransactionToSharedStorage(storageManager, state, meta) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  entries[state] = {\n    dateCreated: Date.now(),\n    transaction: meta\n  };\n  sharedStorage.setStorage(entries);\n}\nfunction loadTransactionFromSharedStorage(storageManager, state) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  const entry = entries[state];\n  if (entry && entry.transaction && isTransactionMeta(entry.transaction)) {\n    return entry.transaction;\n  }\n  return null;\n}\nfunction clearTransactionFromSharedStorage(storageManager, state) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  delete entries[state];\n  sharedStorage.setStorage(entries);\n}\nexport { clearTransactionFromSharedStorage, loadTransactionFromSharedStorage, pruneSharedStorage, saveTransactionToSharedStorage };","map":{"version":3,"names":["MAX_ENTRY_LIFETIME","pruneSharedStorage","storageManager","sharedStorage","getSharedTansactionStorage","entries","getStorage","Object","keys","forEach","state","entry","age","Date","now","dateCreated","setStorage","saveTransactionToSharedStorage","meta","transaction","loadTransactionFromSharedStorage","isTransactionMeta","clearTransactionFromSharedStorage"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/util/sharedStorage.ts"],"sourcesContent":["import { OAuthStorageManagerInterface, OAuthTransactionMeta, isTransactionMeta } from '../types';\n\nconst MAX_ENTRY_LIFETIME = 30 * 60 * 1000; // 30 minutes\n\nexport function pruneSharedStorage<M extends OAuthTransactionMeta>(storageManager: OAuthStorageManagerInterface<M>) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  Object.keys(entries).forEach(state => {\n    const entry = entries[state];\n    const age = Date.now() - entry.dateCreated;\n    if (age > MAX_ENTRY_LIFETIME) {\n      delete entries[state];\n    }\n  });\n  sharedStorage.setStorage(entries);\n}\n\nexport function saveTransactionToSharedStorage<M extends OAuthTransactionMeta>(\n  storageManager: OAuthStorageManagerInterface<M>, state: string, meta: M\n) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  entries[state] = {\n    dateCreated: Date.now(),\n    transaction: meta\n  };\n  sharedStorage.setStorage(entries);\n}\n\n\nexport function loadTransactionFromSharedStorage<M extends OAuthTransactionMeta>(\n  storageManager: OAuthStorageManagerInterface<M>, state: string\n) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  const entry = entries[state];\n  if (entry && entry.transaction && isTransactionMeta(entry.transaction)) {\n    return entry.transaction;\n  }\n  return null;\n}\n\nexport function clearTransactionFromSharedStorage<M extends OAuthTransactionMeta>(\n  storageManager: OAuthStorageManagerInterface<M>, state: string\n) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  delete entries[state];\n  sharedStorage.setStorage(entries);\n}\n"],"mappings":";;;;;;;;;;;;;;AAEA,MAAMA,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAEnC,SAAUC,kBAAkBA,CAAiCC,cAA+C;EAChH,MAAMC,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1CC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,OAAO,CAACC,KAAK,IAAG;IACnC,MAAMC,KAAK,GAAGN,OAAO,CAACK,KAAK,CAAC;IAC5B,MAAME,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGH,KAAK,CAACI,WAAW;IAC1C,IAAIH,GAAG,GAAGZ,kBAAkB,EAAE;MAC5B,OAAOK,OAAO,CAACK,KAAK,CAAC;IACtB;EACH,CAAC,CAAC;EACFP,aAAa,CAACa,UAAU,CAACX,OAAO,CAAC;AACnC;SAEgBY,8BAA8BA,CAC5Cf,cAA+C,EAAEQ,KAAa,EAAEQ,IAAO;EAEvE,MAAMf,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1CD,OAAO,CAACK,KAAK,CAAC,GAAG;IACfK,WAAW,EAAEF,IAAI,CAACC,GAAG,CAAE;IACvBK,WAAW,EAAED;GACd;EACDf,aAAa,CAACa,UAAU,CAACX,OAAO,CAAC;AACnC;AAGgB,SAAAe,gCAAgCA,CAC9ClB,cAA+C,EAAEQ,KAAa;EAE9D,MAAMP,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1C,MAAMK,KAAK,GAAGN,OAAO,CAACK,KAAK,CAAC;EAC5B,IAAIC,KAAK,IAAIA,KAAK,CAACQ,WAAW,IAAIE,iBAAiB,CAACV,KAAK,CAACQ,WAAW,CAAC,EAAE;IACtE,OAAOR,KAAK,CAACQ,WAAW;EACzB;EACD,OAAO,IAAI;AACb;AAEgB,SAAAG,iCAAiCA,CAC/CpB,cAA+C,EAAEQ,KAAa;EAE9D,MAAMP,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1C,OAAOD,OAAO,CAACK,KAAK,CAAC;EACrBP,aAAa,CAACa,UAAU,CAACX,OAAO,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}