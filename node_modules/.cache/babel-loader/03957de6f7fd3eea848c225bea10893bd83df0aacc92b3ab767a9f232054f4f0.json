{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { validateVersionConfig, makeIdxState } from './idxState/index.js';\nimport { isRawIdxResponse } from './types/idx-js.js';\nimport { isAuthApiError } from '../errors/index.js';\nimport { getOAuthDomain } from '../oidc/util/oauth.js';\nimport { IDX_API_VERSION } from '../constants.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nasync function introspect(authClient, options = {}) {\n  var _a;\n  let rawIdxResponse;\n  let requestDidSucceed;\n  const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n  if (savedIdxResponse) {\n    rawIdxResponse = savedIdxResponse.rawIdxResponse;\n    requestDidSucceed = savedIdxResponse.requestDidSucceed;\n  }\n  if (!rawIdxResponse) {\n    const version = options.version || IDX_API_VERSION;\n    const domain = getOAuthDomain(authClient);\n    const {\n      interactionHandle,\n      stateHandle\n    } = options;\n    const withCredentials = (_a = options.withCredentials) !== null && _a !== void 0 ? _a : true;\n    try {\n      requestDidSucceed = true;\n      validateVersionConfig(version);\n      const url = `${domain}/idp/idx/introspect`;\n      const body = stateHandle ? {\n        stateToken: stateHandle\n      } : {\n        interactionHandle\n      };\n      const headers = {\n        'Content-Type': `application/ion+json; okta-version=${version}`,\n        Accept: `application/ion+json; okta-version=${version}`\n      };\n      rawIdxResponse = await httpRequest(authClient, {\n        method: 'POST',\n        url,\n        headers,\n        withCredentials,\n        args: body\n      });\n    } catch (err) {\n      if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n        rawIdxResponse = err.xhr.responseJSON;\n        requestDidSucceed = false;\n      } else {\n        throw err;\n      }\n    }\n  }\n  const {\n    withCredentials\n  } = options;\n  return makeIdxState(authClient, rawIdxResponse, {\n    withCredentials\n  }, requestDidSucceed);\n}\nexport { introspect };","map":{"version":3,"names":["introspect","authClient","options","rawIdxResponse","requestDidSucceed","savedIdxResponse","transactionManager","loadIdxResponse","version","IDX_API_VERSION","domain","getOAuthDomain","interactionHandle","stateHandle","withCredentials","_a","validateVersionConfig","url","body","stateToken","headers","Accept","httpRequest","method","args","err","isAuthApiError","xhr","isRawIdxResponse","responseJSON","makeIdxState"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/introspect.ts"],"sourcesContent":["/* eslint-disable complexity */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { makeIdxState, validateVersionConfig } from './idxState';\nimport { IntrospectOptions, OktaAuthIdxInterface } from './types';\nimport { IdxResponse, isRawIdxResponse } from './types/idx-js';\nimport { getOAuthDomain } from '../oidc';\nimport { IDX_API_VERSION } from '../constants';\nimport { httpRequest } from '../http';\nimport { isAuthApiError } from '../errors';\n\nexport async function introspect (\n  authClient: OktaAuthIdxInterface, \n  options: IntrospectOptions = {}\n): Promise<IdxResponse> {\n  let rawIdxResponse;\n  let requestDidSucceed;\n\n  // try load from storage first\n  const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n  if (savedIdxResponse) {\n    rawIdxResponse = savedIdxResponse.rawIdxResponse;\n    requestDidSucceed = savedIdxResponse.requestDidSucceed;\n  }\n\n  // call idx.introspect if no existing idx response available in storage\n  if (!rawIdxResponse) {\n    const version = options.version || IDX_API_VERSION;\n    const domain = getOAuthDomain(authClient);\n    const { interactionHandle, stateHandle } = options;\n    const withCredentials = options.withCredentials ?? true;\n    try {\n      requestDidSucceed = true;\n      validateVersionConfig(version);\n      const url = `${domain}/idp/idx/introspect`;\n      const body = stateHandle ? { stateToken: stateHandle } : { interactionHandle };\n      const headers = {\n        'Content-Type': `application/ion+json; okta-version=${version}`, // Server wants this version info\n        Accept: `application/ion+json; okta-version=${version}`,\n      };\n      rawIdxResponse = await httpRequest(authClient, {\n        method: 'POST',\n        url,\n        headers,\n        withCredentials,\n        args: body\n      });\n    } catch (err) {\n      if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n        rawIdxResponse = err.xhr.responseJSON;\n        requestDidSucceed = false;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  const { withCredentials } = options;\n  return makeIdxState(authClient, rawIdxResponse, { withCredentials }, requestDidSucceed);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAqBO,eAAeA,UAAUA,CAC9BC,UAAgC,EAChCC,OAAA,GAA6B,EAAE;;EAE/B,IAAIC,cAAc;EAClB,IAAIC,iBAAiB;EAGrB,MAAMC,gBAAgB,GAAGJ,UAAU,CAACK,kBAAkB,CAACC,eAAe,CAACL,OAAO,CAAC;EAC/E,IAAIG,gBAAgB,EAAE;IACpBF,cAAc,GAAGE,gBAAgB,CAACF,cAAc;IAChDC,iBAAiB,GAAGC,gBAAgB,CAACD,iBAAiB;EACvD;EAGD,IAAI,CAACD,cAAc,EAAE;IACnB,MAAMK,OAAO,GAAGN,OAAO,CAACM,OAAO,IAAIC,eAAe;IAClD,MAAMC,MAAM,GAAGC,cAAc,CAACV,UAAU,CAAC;IACzC,MAAM;MAAEW,iBAAiB;MAAEC;IAAa,IAAGX,OAAO;IAClD,MAAMY,eAAe,GAAG,CAAAC,EAAA,GAAAb,OAAO,CAACY,eAAe,cAAAC,EAAA,cAAAA,EAAA,GAAI,IAAI;IACvD,IAAI;MACFX,iBAAiB,GAAG,IAAI;MACxBY,qBAAqB,CAACR,OAAO,CAAC;MAC9B,MAAMS,GAAG,GAAM,GAAAP,MAAM,qBAAqB;MAC1C,MAAMQ,IAAI,GAAGL,WAAW,GAAG;QAAEM,UAAU,EAAEN;MAAa,IAAG;QAAED;MAAiB,CAAE;MAC9E,MAAMQ,OAAO,GAAG;QACd,cAAc,EAAwC,sCAAAZ,OAAS;QAC/Da,MAAM,EAAwC,sCAAAb,OAAS;OACxD;MACDL,cAAc,GAAG,MAAMmB,WAAW,CAACrB,UAAU,EAAE;QAC7CsB,MAAM,EAAE,MAAM;QACdN,GAAG;QACHG,OAAO;QACPN,eAAe;QACfU,IAAI,EAAEN;MACP,EAAC;IACH,EAAC,OAAOO,GAAG,EAAE;MACZ,IAAIC,cAAc,CAACD,GAAG,CAAC,IAAIA,GAAG,CAACE,GAAG,IAAIC,gBAAgB,CAACH,GAAG,CAACE,GAAG,CAACE,YAAY,CAAC,EAAE;QAC5E1B,cAAc,GAAGsB,GAAG,CAACE,GAAG,CAACE,YAAY;QACrCzB,iBAAiB,GAAG,KAAK;MAC1B,OAAM;QACL,MAAMqB,GAAG;MACV;IACF;EACF;EAED,MAAM;IAAEX;EAAiB,IAAGZ,OAAO;EACnC,OAAO4B,YAAY,CAAC7B,UAAU,EAAEE,cAAc,EAAE;IAAEW;EAAe,CAAE,EAAEV,iBAAiB,CAAC;AACzF"},"metadata":{},"sourceType":"module","externalDependencies":[]}