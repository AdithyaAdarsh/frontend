{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { warn } from '../util/console.js';\nimport { removeNils } from '../util/object.js';\nimport { createOAuthMeta } from '../oidc/util/oauthMeta.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nasync function createTransactionMeta(authClient, options = {}) {\n  const tokenParams = await authClient.token.prepareTokenParams(options);\n  const pkceMeta = createOAuthMeta(authClient, tokenParams);\n  let {\n    flow = 'default',\n    withCredentials = true,\n    activationToken = undefined,\n    recoveryToken = undefined,\n    maxAge = undefined,\n    acrValues = undefined\n  } = Object.assign(Object.assign({}, authClient.options), options);\n  const meta = Object.assign(Object.assign({}, pkceMeta), {\n    flow,\n    withCredentials,\n    activationToken,\n    recoveryToken,\n    maxAge,\n    acrValues\n  });\n  return meta;\n}\nfunction hasSavedInteractionHandle(authClient, options) {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n  if (savedMeta === null || savedMeta === void 0 ? void 0 : savedMeta.interactionHandle) {\n    return true;\n  }\n  return false;\n}\nfunction getSavedTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  let savedMeta;\n  try {\n    savedMeta = authClient.transactionManager.load(options);\n  } catch (e) {}\n  if (!savedMeta) {\n    return;\n  }\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n  warn('Saved transaction meta does not match the current configuration. ' + 'This may indicate that two apps are sharing a storage key.');\n}\nasync function getTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  const validExistingMeta = getSavedTransactionMeta(authClient, options);\n  if (validExistingMeta) {\n    return validExistingMeta;\n  }\n  return createTransactionMeta(authClient, options);\n}\nfunction saveTransactionMeta(authClient, meta) {\n  authClient.transactionManager.save(meta, {\n    muteWarning: true\n  });\n}\nfunction clearTransactionMeta(authClient) {\n  authClient.transactionManager.clear();\n}\nfunction isTransactionMetaValid(meta, options = {}) {\n  const keys = ['issuer', 'clientId', 'redirectUri', 'state', 'codeChallenge', 'codeChallengeMethod', 'activationToken', 'recoveryToken'];\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n  const {\n    flow\n  } = options;\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n  return true;\n}\nfunction isTransactionMetaValidForFlow(meta, flow) {\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isTransactionMetaValidForOptions(meta, options, keys) {\n  const mismatch = keys.some(key => {\n    const value = options[key];\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\nexport { clearTransactionMeta, createTransactionMeta, getSavedTransactionMeta, getTransactionMeta, hasSavedInteractionHandle, isTransactionMetaValid, isTransactionMetaValidForFlow, isTransactionMetaValidForOptions, saveTransactionMeta };","map":{"version":3,"names":["createTransactionMeta","authClient","options","tokenParams","token","prepareTokenParams","pkceMeta","createOAuthMeta","flow","withCredentials","activationToken","undefined","recoveryToken","maxAge","acrValues","Object","assign","meta","hasSavedInteractionHandle","savedMeta","getSavedTransactionMeta","interactionHandle","removeNils","transactionManager","load","e","isTransactionMetaValid","warn","getTransactionMeta","validExistingMeta","saveTransactionMeta","save","muteWarning","clearTransactionMeta","clear","keys","isTransactionMetaValidForOptions","isTransactionMetaValidForFlow","shouldValidateFlow","mismatch","some","key","value"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/transactionMeta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthIdxInterface, IdxTransactionMeta, IdxTransactionMetaOptions } from './types';\nimport { removeNils, warn } from '../util';\nimport { createOAuthMeta, PKCETransactionMeta } from '../oidc';\n\n// Calculate new values\nexport async function createTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options: IdxTransactionMetaOptions = {}\n): Promise<IdxTransactionMeta> {\n  const tokenParams = await authClient.token.prepareTokenParams(options);\n  const pkceMeta = createOAuthMeta(authClient, tokenParams) as PKCETransactionMeta;\n  let {\n    flow = 'default',\n    withCredentials = true,\n    activationToken = undefined,\n    recoveryToken = undefined,\n    maxAge = undefined,\n    acrValues = undefined,\n  } = { ...authClient.options, ...options }; // local options override SDK options\n\n  const meta: IdxTransactionMeta = {\n    ...pkceMeta,\n    flow,\n    withCredentials,\n    activationToken,\n    recoveryToken,\n    maxAge,\n    acrValues\n  };\n  return meta;\n}\n\nexport function hasSavedInteractionHandle(\n  authClient: OktaAuthIdxInterface,\n  options?: IdxTransactionMetaOptions\n): boolean {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n  if (savedMeta?.interactionHandle) {\n    return true;\n  }\n  return false;\n}\n\n// Returns the saved transaction meta, if it exists and is valid\nexport function getSavedTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options?: IdxTransactionMetaOptions\n): IdxTransactionMeta | undefined {\n  options = removeNils(options);\n  options = { ...authClient.options, ...options }; // local options override SDK options\n  let savedMeta;\n  try {\n    savedMeta = authClient.transactionManager.load(options) as IdxTransactionMeta;\n  } catch (e) {\n    // ignore errors here\n  }\n\n  if (!savedMeta) {\n    return;\n  }\n\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n\n  // existing meta is not valid for this configuration\n  // this is common when changing configuration in local development environment\n  // in a production environment, this may indicate that two apps are sharing a storage key\n  warn('Saved transaction meta does not match the current configuration. ' + \n    'This may indicate that two apps are sharing a storage key.');\n\n}\n\nexport async function getTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options?: IdxTransactionMetaOptions\n): Promise<IdxTransactionMeta> {\n  options = removeNils(options);\n  options = { ...authClient.options, ...options }; // local options override SDK options\n  // Load existing transaction meta from storage\n  const validExistingMeta = getSavedTransactionMeta(authClient, options);\n  if (validExistingMeta) {\n    return validExistingMeta;\n  }\n  // No existing? Create new transaction meta.\n  return createTransactionMeta(authClient, options);\n}\n\nexport function saveTransactionMeta (authClient: OktaAuthIdxInterface, meta): void {\n  authClient.transactionManager.save(meta, { muteWarning: true });\n}\n\nexport function clearTransactionMeta (authClient: OktaAuthIdxInterface): void {\n  authClient.transactionManager.clear();\n}\n\nexport function isTransactionMetaValid (meta, options: IdxTransactionMetaOptions  = {}): boolean {\n  // Validate against certain options. If these exist in options, they must match in meta\n  const keys = [\n    'issuer',\n    'clientId',\n    'redirectUri',\n    'state',\n    'codeChallenge',\n    'codeChallengeMethod',\n    'activationToken',\n    'recoveryToken'\n  ];\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n\n  // Validate configured flow\n  const { flow } = options;\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function isTransactionMetaValidForFlow(meta, flow) {\n  // Specific flows should not share transaction data\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      // The flow has changed; abandon the old transaction\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isTransactionMetaValidForOptions(meta, options, keys) {\n  // returns false if values in meta do not match options\n  // if the option does not have a value for a specific key, it is ignored\n  const mismatch = keys.some(key => {\n    const value = options[key];\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}