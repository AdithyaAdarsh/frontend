{"ast":null,"code":"import _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport './types/Token.js';\nimport { isTransactionMeta } from './types/Transaction.js';\nimport { warn } from '../util/console.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\nfunction createTransactionManager() {\n  return /*#__PURE__*/function () {\n    function TransactionManager(options) {\n      _classCallCheck(this, TransactionManager);\n      this.storageManager = options.storageManager;\n      this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n      this.saveLastResponse = options.saveLastResponse === false ? false : true;\n      this.options = options;\n    }\n    _createClass(TransactionManager, [{\n      key: \"clear\",\n      value: function clear() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var transactionStorage = this.storageManager.getTransactionStorage();\n        var meta = transactionStorage.getStorage();\n        transactionStorage.clearStorage();\n        if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n          var state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n          if (state) {\n            clearTransactionFromSharedStorage(this.storageManager, state);\n          }\n        }\n      }\n    }, {\n      key: \"save\",\n      value: function save(meta) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var storage = this.storageManager.getTransactionStorage();\n        var obj = storage.getStorage();\n        if (isTransactionMeta(obj) && !options.muteWarning) {\n          warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n        }\n        storage.setStorage(meta);\n        if (this.enableSharedStorage && meta.state) {\n          saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n        }\n      }\n    }, {\n      key: \"exists\",\n      value: function exists() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        try {\n          var meta = this.load(options);\n          return !!meta;\n        } catch (_a) {\n          return false;\n        }\n      }\n    }, {\n      key: \"load\",\n      value: function load() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var meta;\n        if (this.enableSharedStorage && options.state) {\n          pruneSharedStorage(this.storageManager);\n          meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n          if (isTransactionMeta(meta)) {\n            return meta;\n          }\n        }\n        var storage = this.storageManager.getTransactionStorage();\n        meta = storage.getStorage();\n        if (isTransactionMeta(meta)) {\n          return meta;\n        }\n        return null;\n      }\n    }]);\n    return TransactionManager;\n  }();\n}\nexport { createTransactionManager };","map":{"version":3,"names":["createTransactionManager","TransactionManager","options","_classCallCheck","storageManager","enableSharedStorage","saveLastResponse","_createClass","key","value","clear","arguments","length","undefined","transactionStorage","getTransactionStorage","meta","getStorage","clearStorage","clearSharedStorage","state","clearTransactionFromSharedStorage","save","storage","obj","isTransactionMeta","muteWarning","warn","setStorage","saveTransactionToSharedStorage","exists","load","_a","pruneSharedStorage","loadTransactionFromSharedStorage"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/TransactionManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { StorageProvider } from '../storage/types';\nimport {\n  TransactionMeta,\n  isTransactionMeta,\n  TransactionMetaOptions,\n  TransactionManagerOptions,\n  OAuthTransactionMeta,\n  OAuthStorageManagerInterface,\n  ClearTransactionMetaOptions,\n  TransactionManagerInterface,\n  PKCETransactionMeta\n} from './types';\nimport { warn } from '../util';\nimport {\n  clearTransactionFromSharedStorage,\n  loadTransactionFromSharedStorage,\n  pruneSharedStorage,\n  saveTransactionToSharedStorage\n} from './util/sharedStorage';\n\n\nexport function createTransactionManager\n<\n  M extends OAuthTransactionMeta = PKCETransactionMeta,\n  S extends OAuthStorageManagerInterface<M> = OAuthStorageManagerInterface<M>\n>\n()\n{\n  return class TransactionManager implements TransactionManagerInterface\n  {\n    options: TransactionManagerOptions;\n    storageManager: S;\n    enableSharedStorage: boolean;\n    saveLastResponse: boolean;\n\n    constructor(options: TransactionManagerOptions) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.storageManager = options.storageManager! as S;\n      this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n      this.saveLastResponse = options.saveLastResponse === false ? false : true;\n      this.options = options;\n    }\n\n    // eslint-disable-next-line complexity\n    clear(options: ClearTransactionMetaOptions = {}) {\n      const transactionStorage: StorageProvider = this.storageManager.getTransactionStorage();\n      const meta = transactionStorage.getStorage();\n\n      // Clear primary storage (by default, sessionStorage on browser)\n      transactionStorage.clearStorage();\n\n      // Usually we want to also clear shared storage unless another tab may need it to continue/complete a flow\n      if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n        const state = options.state || meta?.state;\n        if (state) {\n          clearTransactionFromSharedStorage(this.storageManager, state);\n        }\n      }\n    }\n\n    // eslint-disable-next-line complexity\n    save(meta: M, options: TransactionMetaOptions = {}) {\n      // There must be only one transaction executing at a time.\n      // Before saving, check to see if a transaction is already stored.\n      // An existing transaction indicates a concurrency/race/overlap condition\n\n      let storage: StorageProvider = this.storageManager.getTransactionStorage();\n      const obj = storage.getStorage();\n      // oie process may need to update transaction in the middle of process for tracking purpose\n      // false alarm might be caused \n      // TODO: revisit for a better solution, https://oktainc.atlassian.net/browse/OKTA-430919\n      if (isTransactionMeta(obj) && !options.muteWarning) {\n        // eslint-disable-next-line max-len\n        warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n      }\n\n      storage.setStorage(meta);\n\n      // Shared storage allows continuation of transaction in another tab\n      if (this.enableSharedStorage && meta.state) {\n        saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n      }\n    }\n\n    exists(options: TransactionMetaOptions = {}): boolean {\n      try {\n        const meta = this.load(options);\n        return !!meta;\n      } catch {\n        return false;\n      }\n    }\n\n    // load transaction meta from storage\n    // eslint-disable-next-line complexity,max-statements\n    load(options: TransactionMetaOptions = {}): TransactionMeta | null {\n\n      let meta: TransactionMeta;\n\n      // If state was passed, try loading transaction data from shared storage\n      if (this.enableSharedStorage && options.state) {\n        pruneSharedStorage(this.storageManager); // prune before load\n        meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n        if (isTransactionMeta(meta)) {\n          return meta;\n        }\n      }\n\n      let storage: StorageProvider = this.storageManager.getTransactionStorage();\n      meta = storage.getStorage();\n      if (isTransactionMeta(meta)) {\n        // if we have meta in the new location, there is no need to go further\n        return meta;\n      }\n\n      return null;\n    }\n\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}