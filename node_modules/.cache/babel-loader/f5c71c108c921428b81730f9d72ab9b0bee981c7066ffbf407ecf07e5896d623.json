{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AutoRenewService } from '../../services/AutoRenewService.js';\nimport { SyncStorageService } from '../../services/SyncStorageService.js';\nimport { LeaderElectionService } from '../../services/LeaderElectionService.js';\nimport { removeNils } from '../../util/object.js';\nconst AUTO_RENEW = 'autoRenew';\nconst SYNC_STORAGE = 'syncStorage';\nconst LEADER_ELECTION = 'leaderElection';\nclass ServiceManager {\n  constructor(sdk, options = {}) {\n    this.sdk = sdk;\n    this.onLeader = this.onLeader.bind(this);\n    const {\n      autoRenew,\n      autoRemove,\n      syncStorage\n    } = sdk.tokenManager.getOptions();\n    options.electionChannelName = options.electionChannelName || options.broadcastChannelName;\n    this.options = Object.assign({}, ServiceManager.defaultOptions, {\n      autoRenew,\n      autoRemove,\n      syncStorage\n    }, {\n      electionChannelName: `${sdk.options.clientId}-election`,\n      syncChannelName: `${sdk.options.clientId}-sync`\n    }, removeNils(options));\n    this.started = false;\n    this.services = new Map();\n    ServiceManager.knownServices.forEach(name => {\n      const svc = this.createService(name);\n      if (svc) {\n        this.services.set(name, svc);\n      }\n    });\n  }\n  async onLeader() {\n    if (this.started) {\n      await this.startServices();\n    }\n  }\n  isLeader() {\n    var _a;\n    return (_a = this.getService(LEADER_ELECTION)) === null || _a === void 0 ? void 0 : _a.isLeader();\n  }\n  isLeaderRequired() {\n    return [...this.services.values()].some(srv => srv.canStart() && srv.requiresLeadership());\n  }\n  async start() {\n    if (this.started) {\n      return;\n    }\n    await this.startServices();\n    this.started = true;\n  }\n  async stop() {\n    await this.stopServices();\n    this.started = false;\n  }\n  getService(name) {\n    return this.services.get(name);\n  }\n  async startServices() {\n    for (const [name, srv] of this.services.entries()) {\n      if (this.canStartService(name, srv)) {\n        await srv.start();\n      }\n    }\n  }\n  async stopServices() {\n    for (const srv of this.services.values()) {\n      await srv.stop();\n    }\n  }\n  canStartService(name, srv) {\n    let canStart = srv.canStart() && !srv.isStarted();\n    if (name === LEADER_ELECTION) {\n      canStart && (canStart = this.isLeaderRequired());\n    } else if (srv.requiresLeadership()) {\n      canStart && (canStart = this.isLeader());\n    }\n    return canStart;\n  }\n  createService(name) {\n    const tokenManager = this.sdk.tokenManager;\n    let service;\n    switch (name) {\n      case LEADER_ELECTION:\n        service = new LeaderElectionService(Object.assign(Object.assign({}, this.options), {\n          onLeader: this.onLeader\n        }));\n        break;\n      case AUTO_RENEW:\n        service = new AutoRenewService(tokenManager, Object.assign({}, this.options));\n        break;\n      case SYNC_STORAGE:\n        service = new SyncStorageService(tokenManager, Object.assign({}, this.options));\n        break;\n      default:\n        throw new Error(`Unknown service ${name}`);\n    }\n    return service;\n  }\n}\nServiceManager.knownServices = [AUTO_RENEW, SYNC_STORAGE, LEADER_ELECTION];\nServiceManager.defaultOptions = {\n  autoRenew: true,\n  autoRemove: true,\n  syncStorage: true\n};\nexport { ServiceManager };","map":{"version":3,"names":["AUTO_RENEW","SYNC_STORAGE","LEADER_ELECTION","ServiceManager","constructor","sdk","options","onLeader","bind","autoRenew","autoRemove","syncStorage","tokenManager","getOptions","electionChannelName","broadcastChannelName","Object","assign","defaultOptions","clientId","syncChannelName","removeNils","started","services","Map","knownServices","forEach","name","svc","createService","set","startServices","isLeader","_a","getService","isLeaderRequired","values","some","srv","canStart","requiresLeadership","start","stop","stopServices","get","entries","canStartService","isStarted","service","LeaderElectionService","AutoRenewService","SyncStorageService","Error"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/core/ServiceManager/browser.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport {\n  OAuthTransactionMeta,\n  OAuthStorageManagerInterface,\n} from '../../oidc';\n\nimport {\n  ServiceManagerInterface,\n  ServiceInterface,\n  ServiceManagerOptions,\n  OktaAuthCoreInterface,\n  OktaAuthCoreOptions\n} from '../types';\nimport { AutoRenewService, SyncStorageService, LeaderElectionService } from '../../services';\nimport { removeNils } from '../../util';\n\nconst AUTO_RENEW = 'autoRenew';\nconst SYNC_STORAGE = 'syncStorage';\nconst LEADER_ELECTION = 'leaderElection';\n\nexport class ServiceManager\n<\n  M extends OAuthTransactionMeta,\n  S extends OAuthStorageManagerInterface<M>,\n  O extends OktaAuthCoreOptions\n>\nimplements ServiceManagerInterface \n{\n  private sdk: OktaAuthCoreInterface<M, S, O>;\n  private options: ServiceManagerOptions;\n  private services: Map<string, ServiceInterface>;\n  private started: boolean;\n\n  private static knownServices = [AUTO_RENEW, SYNC_STORAGE, LEADER_ELECTION];\n\n  private static defaultOptions = {\n    autoRenew: true,\n    autoRemove: true,\n    syncStorage: true\n  };\n\n  constructor(sdk: OktaAuthCoreInterface<M, S, O>, options: ServiceManagerOptions = {}) {\n    this.sdk = sdk;\n    this.onLeader = this.onLeader.bind(this);\n\n    // TODO: backwards compatibility, remove in next major version - OKTA-473815\n    const { autoRenew, autoRemove, syncStorage } = sdk.tokenManager.getOptions();\n    options.electionChannelName = options.electionChannelName || options.broadcastChannelName;\n    this.options = Object.assign({}, \n      ServiceManager.defaultOptions,\n      { autoRenew, autoRemove, syncStorage }, \n      {\n        electionChannelName: `${sdk.options.clientId}-election`,\n        syncChannelName: `${sdk.options.clientId}-sync`,\n      },\n      removeNils(options)\n    );\n\n    this.started = false;\n    this.services = new Map();\n\n    ServiceManager.knownServices.forEach(name => {\n      const svc = this.createService(name);\n      if (svc) {\n        this.services.set(name, svc);\n      }\n    });\n  }\n\n  private async onLeader() {\n    if (this.started) {\n      // Start services that requires leadership\n      await this.startServices();\n    }\n  }\n\n  isLeader() {\n    return (this.getService(LEADER_ELECTION) as LeaderElectionService)?.isLeader();\n  }\n\n  isLeaderRequired() {\n    return [...this.services.values()].some(srv => srv.canStart() && srv.requiresLeadership());\n  }\n\n  async start() {\n    if (this.started) {\n      return;     // noop if services have already started\n    }\n    await this.startServices();\n    this.started = true;\n  }\n  \n  async stop() {\n    await this.stopServices();\n    this.started = false;\n  }\n\n  getService(name: string): ServiceInterface | undefined {\n    return this.services.get(name);\n  }\n\n  private async startServices() {\n    for (const [name, srv] of this.services.entries()) {\n      if (this.canStartService(name, srv)) {\n        await srv.start();\n      }\n    }\n  }\n\n  private async stopServices() {\n    for (const srv of this.services.values()) {\n      await srv.stop();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  private canStartService(name: string, srv: ServiceInterface): boolean {\n    let canStart = srv.canStart() && !srv.isStarted();\n    // only start election if a leader is required\n    if (name === LEADER_ELECTION) {\n      canStart &&= this.isLeaderRequired();\n    } else if (srv.requiresLeadership()) {\n      canStart &&= this.isLeader();\n    }\n    return canStart;\n  }\n\n  private createService(name: string): ServiceInterface {\n    const tokenManager = this.sdk.tokenManager;\n\n    let service: ServiceInterface;\n    switch (name) {\n      case LEADER_ELECTION:\n        service = new LeaderElectionService({...this.options, onLeader: this.onLeader});\n        break;\n      case AUTO_RENEW:\n        service = new AutoRenewService(tokenManager, {...this.options});\n        break;\n      case SYNC_STORAGE:\n        service = new SyncStorageService(tokenManager, {...this.options});\n        break;\n      default:\n        throw new Error(`Unknown service ${name}`);\n    }\n    return service;\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;AA4BA,MAAMA,UAAU,GAAG,WAAW;AAC9B,MAAMC,YAAY,GAAG,aAAa;AAClC,MAAMC,eAAe,GAAG,gBAAgB;MAE3BC,cAAc;EAqBzBC,WAAYA,CAAAC,GAAmC,EAAEC,OAAA,GAAiC,EAAE;IAClF,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IAGxC,MAAM;MAAEC,SAAS;MAAEC,UAAU;MAAEC;IAAa,IAAGN,GAAG,CAACO,YAAY,CAACC,UAAU,EAAE;IAC5EP,OAAO,CAACQ,mBAAmB,GAAGR,OAAO,CAACQ,mBAAmB,IAAIR,OAAO,CAACS,oBAAoB;IACzF,IAAI,CAACT,OAAO,GAAGU,MAAM,CAACC,MAAM,CAAC,CAAE,GAC7Bd,cAAc,CAACe,cAAc,EAC7B;MAAET,SAAS;MAAEC,UAAU;MAAEC;IAAW,CAAE,EACtC;MACEG,mBAAmB,EAAK,GAAAT,GAAG,CAACC,OAAO,CAACa,QAAmB;MACvDC,eAAe,EAAK,GAAAf,GAAG,CAACC,OAAO,CAACa,QAAe;IAChD,GACDE,UAAU,CAACf,OAAO,CAAC,CACpB;IAED,IAAI,CAACgB,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,EAAE;IAEzBrB,cAAc,CAACsB,aAAa,CAACC,OAAO,CAACC,IAAI,IAAG;MAC1C,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACF,IAAI,CAAC;MACpC,IAAIC,GAAG,EAAE;QACP,IAAI,CAACL,QAAQ,CAACO,GAAG,CAACH,IAAI,EAAEC,GAAG,CAAC;MAC7B;IACH,CAAC,CAAC;EACH;EAEO,MAAMrB,QAAQA,CAAA;IACpB,IAAI,IAAI,CAACe,OAAO,EAAE;MAEhB,MAAM,IAAI,CAACS,aAAa,EAAE;IAC3B;EACF;EAEDC,QAAQA,CAAA;;IACN,OAAO,CAAAC,EAAA,GAAC,IAAI,CAACC,UAAU,CAAChC,eAAe,CAA2B,cAAA+B,EAAA,uBAAAA,EAAA,CAAED,QAAQ,EAAE;EAC/E;EAEDG,gBAAgBA,CAAA;IACd,OAAO,CAAC,GAAG,IAAI,CAACZ,QAAQ,CAACa,MAAM,CAAE,EAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,QAAQ,EAAE,IAAID,GAAG,CAACE,kBAAkB,CAAE,EAAC;EAC3F;EAED,MAAMC,KAAKA,CAAA;IACT,IAAI,IAAI,CAACnB,OAAO,EAAE;MAChB;IACD;IACD,MAAM,IAAI,CAACS,aAAa,EAAE;IAC1B,IAAI,CAACT,OAAO,GAAG,IAAI;EACpB;EAED,MAAMoB,IAAIA,CAAA;IACR,MAAM,IAAI,CAACC,YAAY,EAAE;IACzB,IAAI,CAACrB,OAAO,GAAG,KAAK;EACrB;EAEDY,UAAUA,CAACP,IAAY;IACrB,OAAO,IAAI,CAACJ,QAAQ,CAACqB,GAAG,CAACjB,IAAI,CAAC;EAC/B;EAEO,MAAMI,aAAaA,CAAA;IACzB,KAAK,MAAM,CAACJ,IAAI,EAAEW,GAAG,CAAC,IAAI,IAAI,CAACf,QAAQ,CAACsB,OAAO,EAAE,EAAE;MACjD,IAAI,IAAI,CAACC,eAAe,CAACnB,IAAI,EAAEW,GAAG,CAAC,EAAE;QACnC,MAAMA,GAAG,CAACG,KAAK,EAAE;MAClB;IACF;EACF;EAEO,MAAME,YAAYA,CAAA;IACxB,KAAK,MAAML,GAAG,IAAI,IAAI,CAACf,QAAQ,CAACa,MAAM,EAAE,EAAE;MACxC,MAAME,GAAG,CAACI,IAAI,EAAE;IACjB;EACF;EAGOI,eAAeA,CAACnB,IAAY,EAAEW,GAAqB;IACzD,IAAIC,QAAQ,GAAGD,GAAG,CAACC,QAAQ,CAAE,KAAI,CAACD,GAAG,CAACS,SAAS,EAAE;IAEjD,IAAIpB,IAAI,KAAKzB,eAAe,EAAE;MAC5BqC,QAAQ,KAARA,QAAQ,GAAK,IAAI,CAACJ,gBAAgB,CAAE,EAAC;IACtC,OAAM,IAAIG,GAAG,CAACE,kBAAkB,EAAE,EAAE;MACnCD,QAAQ,KAARA,QAAQ,GAAK,IAAI,CAACP,QAAQ,CAAE,EAAC;IAC9B;IACD,OAAOO,QAAQ;EAChB;EAEOV,aAAaA,CAACF,IAAY;IAChC,MAAMf,YAAY,GAAG,IAAI,CAACP,GAAG,CAACO,YAAY;IAE1C,IAAIoC,OAAyB;IAC7B,QAAQrB,IAAI;MACV,KAAKzB,eAAe;QAClB8C,OAAO,GAAG,IAAIC,qBAAqB,CAAAjC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAK,IAAI,CAACX,OAAO,CAAE;UAAAC,QAAQ,EAAE,IAAI,CAACA;QAAQ,GAAE;QAC/E;MACF,KAAKP,UAAU;QACbgD,OAAO,GAAG,IAAIE,gBAAgB,CAACtC,YAAY,EAAAI,MAAA,CAAAC,MAAA,KAAM,IAAI,CAACX,OAAO,EAAE;QAC/D;MACF,KAAKL,YAAY;QACf+C,OAAO,GAAG,IAAIG,kBAAkB,CAACvC,YAAY,EAAAI,MAAA,CAAAC,MAAA,KAAM,IAAI,CAACX,OAAO,EAAE;QACjE;MACF;QACE,MAAM,IAAI8C,KAAK,CAAC,mBAAmBzB,IAAI,EAAE,CAAC;IAC7C;IACD,OAAOqB,OAAO;EACf;;AAhHc7C,cAAa,CAAAsB,aAAA,GAAG,CAACzB,UAAU,EAAEC,YAAY,EAAEC,eAAe,CAAC;AAE3DC,cAAA,CAAAe,cAAc,GAAG;EAC9BT,SAAS,EAAE,IAAI;EACfC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE;CACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}