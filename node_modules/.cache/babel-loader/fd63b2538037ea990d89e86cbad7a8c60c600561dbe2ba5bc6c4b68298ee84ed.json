{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Authenticator } from './Authenticator.js';\nclass OktaPassword extends Authenticator {\n  canVerify(values) {\n    return !!(values.credentials || values.password || values.passcode);\n  }\n  mapCredentials(values) {\n    const {\n      credentials,\n      password,\n      passcode\n    } = values;\n    if (!credentials && !password && !passcode) {\n      return;\n    }\n    return credentials || {\n      passcode: passcode || password\n    };\n  }\n  getInputs(idxRemediationValue) {\n    var _a;\n    return Object.assign(Object.assign({}, (_a = idxRemediationValue.form) === null || _a === void 0 ? void 0 : _a.value[0]), {\n      name: 'password',\n      type: 'string',\n      required: idxRemediationValue.required\n    });\n  }\n}\nexport { OktaPassword };","map":{"version":3,"names":["OktaPassword","Authenticator","canVerify","values","credentials","password","passcode","mapCredentials","getInputs","idxRemediationValue","Object","assign","_a","form","value","name","type","required"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/authenticator/OktaPassword.ts"],"sourcesContent":["import { Authenticator, Credentials } from './Authenticator';\n\nexport interface OktaPasswordInputValues {\n  password?: string;\n  passcode?: string;\n  credentials?: Credentials;\n}\n\nexport class OktaPassword extends Authenticator<OktaPasswordInputValues> {\n  canVerify(values: OktaPasswordInputValues) {\n    return !!(values.credentials || values.password || values.passcode);\n  }\n\n  mapCredentials(values: OktaPasswordInputValues): Credentials | undefined {\n    const { credentials, password, passcode } = values;\n    if (!credentials && !password && !passcode) {\n      return;\n    }\n    return credentials || { passcode: passcode || password };\n  }\n\n  getInputs(idxRemediationValue) {\n    return {\n      ...idxRemediationValue.form?.value[0],\n      name: 'password',\n      type: 'string',\n      required: idxRemediationValue.required\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAQM,MAAOA,YAAa,SAAQC,aAAsC;EACtEC,SAASA,CAACC,MAA+B;IACvC,OAAO,CAAC,EAAEA,MAAM,CAACC,WAAW,IAAID,MAAM,CAACE,QAAQ,IAAIF,MAAM,CAACG,QAAQ,CAAC;EACpE;EAEDC,cAAcA,CAACJ,MAA+B;IAC5C,MAAM;MAAEC,WAAW;MAAEC,QAAQ;MAAEC;IAAQ,CAAE,GAAGH,MAAM;IAClD,IAAI,CAACC,WAAW,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,EAAE;MAC1C;IACD;IACD,OAAOF,WAAW,IAAI;MAAEE,QAAQ,EAAEA,QAAQ,IAAID;IAAQ,CAAE;EACzD;EAEDG,SAASA,CAACC,mBAAmB;;IAC3B,OACKC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,MAAAC,EAAA,GAAAH,mBAAmB,CAACI,IAAI,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,KAAK,CAAC,CAAC,CAAC,CACrC;MAAAC,IAAI,EAAE,UAAU;MAChBC,IAAI,EAAE,QAAQ;MACdC,QAAQ,EAAER,mBAAmB,CAACQ;IAC9B;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}