{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getOAuthUrls } from './oauth.js';\nfunction createEnrollAuthenticatorMeta(sdk, params) {\n  const issuer = sdk.options.issuer;\n  const urls = getOAuthUrls(sdk, params);\n  const oauthMeta = {\n    issuer,\n    urls,\n    clientId: params.clientId,\n    redirectUri: params.redirectUri,\n    responseType: params.responseType,\n    responseMode: params.responseMode,\n    state: params.state,\n    acrValues: params.acrValues,\n    enrollAmrValues: params.enrollAmrValues\n  };\n  return oauthMeta;\n}\nexport { createEnrollAuthenticatorMeta };","map":{"version":3,"names":["createEnrollAuthenticatorMeta","sdk","params","issuer","options","urls","getOAuthUrls","oauthMeta","clientId","redirectUri","responseType","responseMode","state","acrValues","enrollAmrValues"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/util/enrollAuthenticatorMeta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { OAuthTransactionMeta, OktaAuthOAuthInterface, EnrollAuthenticatorOptions } from '../types';\nimport { getOAuthUrls } from './oauth';\n\nexport function createEnrollAuthenticatorMeta(\n  sdk: OktaAuthOAuthInterface, \n  params: EnrollAuthenticatorOptions\n): OAuthTransactionMeta {\n  const issuer = sdk.options.issuer!;\n  const urls = getOAuthUrls(sdk, params);\n  const oauthMeta: OAuthTransactionMeta = {\n    issuer,\n    urls,\n    clientId: params.clientId!,\n    redirectUri: params.redirectUri!,\n    responseType: params.responseType!,\n    responseMode: params.responseMode!,\n    state: params.state!,\n    acrValues: params.acrValues,\n    enrollAmrValues: params.enrollAmrValues,\n  };\n\n  return oauthMeta;\n}\n"],"mappings":";;;;;;;;;;;;;AAIgB,SAAAA,6BAA6BA,CAC3CC,GAA2B,EAC3BC,MAAkC;EAElC,MAAMC,MAAM,GAAGF,GAAG,CAACG,OAAO,CAACD,MAAO;EAClC,MAAME,IAAI,GAAGC,YAAY,CAACL,GAAG,EAAEC,MAAM,CAAC;EACtC,MAAMK,SAAS,GAAyB;IACtCJ,MAAM;IACNE,IAAI;IACJG,QAAQ,EAAEN,MAAM,CAACM,QAAS;IAC1BC,WAAW,EAAEP,MAAM,CAACO,WAAY;IAChCC,YAAY,EAAER,MAAM,CAACQ,YAAa;IAClCC,YAAY,EAAET,MAAM,CAACS,YAAa;IAClCC,KAAK,EAAEV,MAAM,CAACU,KAAM;IACpBC,SAAS,EAAEX,MAAM,CAACW,SAAS;IAC3BC,eAAe,EAAEZ,MAAM,CAACY;GACzB;EAED,OAAOP,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}