{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Authenticator } from './Authenticator.js';\nclass SecurityQuestionEnrollment extends Authenticator {\n  canVerify(values) {\n    const {\n      credentials\n    } = values;\n    if (credentials && credentials.questionKey && credentials.answer) {\n      return true;\n    }\n    const {\n      questionKey,\n      question,\n      answer\n    } = values;\n    return !!(questionKey && answer) || !!(question && answer);\n  }\n  mapCredentials(values) {\n    const {\n      questionKey,\n      question,\n      answer\n    } = values;\n    if (!answer || !questionKey && !question) {\n      return;\n    }\n    return {\n      questionKey: question ? 'custom' : questionKey,\n      question,\n      answer\n    };\n  }\n  getInputs() {\n    return [{\n      name: 'questionKey',\n      type: 'string',\n      required: true\n    }, {\n      name: 'question',\n      type: 'string',\n      label: 'Create a security question'\n    }, {\n      name: 'answer',\n      type: 'string',\n      label: 'Answer',\n      required: true\n    }];\n  }\n}\nexport { SecurityQuestionEnrollment };","map":{"version":3,"names":["SecurityQuestionEnrollment","Authenticator","canVerify","values","credentials","questionKey","answer","question","mapCredentials","getInputs","name","type","required","label"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/authenticator/SecurityQuestionEnrollment.ts"],"sourcesContent":["import { Authenticator, Credentials } from './Authenticator';\n\nexport interface SecurityQuestionEnrollValues {\n  questionKey?: string;\n  question?: string;\n  answer?: string;\n  credentials?: Credentials;\n}\n\nexport class SecurityQuestionEnrollment extends Authenticator<SecurityQuestionEnrollValues> {\n  canVerify(values: SecurityQuestionEnrollValues) {\n    const { credentials } = values;\n    if (credentials && credentials.questionKey && credentials.answer) {\n      return true;\n    }\n    const { questionKey, question, answer } = values;\n    return !!(questionKey && answer) || !!(question && answer);\n  }\n\n  mapCredentials(values: SecurityQuestionEnrollValues): Credentials | undefined {\n    const { questionKey, question, answer } = values;\n    if (!answer || (!questionKey && !question)) {\n      return;\n    }\n    return {\n      questionKey: question ? 'custom' : questionKey,\n      question,\n      answer\n    };\n  }\n\n  getInputs() {\n    return [\n      { name: 'questionKey', type: 'string', required: true },\n      { name: 'question', type: 'string', label: 'Create a security question' },\n      { name: 'answer', type: 'string', label: 'Answer', required: true },\n    ];\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AASM,MAAOA,0BAA2B,SAAQC,aAA2C;EACzFC,SAASA,CAACC,MAAoC;IAC5C,MAAM;MAAEC;IAAa,IAAGD,MAAM;IAC9B,IAAIC,WAAW,IAAIA,WAAW,CAACC,WAAW,IAAID,WAAW,CAACE,MAAM,EAAE;MAChE,OAAO,IAAI;IACZ;IACD,MAAM;MAAED,WAAW;MAAEE,QAAQ;MAAED;IAAM,CAAE,GAAGH,MAAM;IAChD,OAAO,CAAC,EAAEE,WAAW,IAAIC,MAAM,CAAC,IAAI,CAAC,EAAEC,QAAQ,IAAID,MAAM,CAAC;EAC3D;EAEDE,cAAcA,CAACL,MAAoC;IACjD,MAAM;MAAEE,WAAW;MAAEE,QAAQ;MAAED;IAAM,CAAE,GAAGH,MAAM;IAChD,IAAI,CAACG,MAAM,IAAK,CAACD,WAAW,IAAI,CAACE,QAAS,EAAE;MAC1C;IACD;IACD,OAAO;MACLF,WAAW,EAAEE,QAAQ,GAAG,QAAQ,GAAGF,WAAW;MAC9CE,QAAQ;MACRD;KACD;EACF;EAEDG,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAM,GACvD;MAAEF,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE,QAAQ;MAAEE,KAAK,EAAE;IAA8B,GACzE;MAAEH,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE,QAAQ;MAAEE,KAAK,EAAE,QAAQ;MAAED,QAAQ,EAAE;IAAM,EACpE;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}