{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\nclass AuthenticatorEnrollmentData extends AuthenticatorData {\n  mapAuthenticator() {\n    const authenticatorData = this.getAuthenticatorData();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    return {\n      id: authenticatorFromRemediation.form.value.find(({\n        name\n      }) => name === 'id').value,\n      methodType: authenticatorData.methodType,\n      phoneNumber: authenticatorData.phoneNumber\n    };\n  }\n  getInputAuthenticator(remediation) {\n    return [{\n      name: 'methodType',\n      type: 'string'\n    }, {\n      name: 'phoneNumber',\n      label: 'Phone Number',\n      type: 'string'\n    }].map(item => {\n      const value = remediation.form.value.find(val => val.name === item.name);\n      return Object.assign(Object.assign({}, value), item);\n    });\n  }\n  mapAuthenticatorDataFromValues(data) {\n    data = super.mapAuthenticatorDataFromValues(data);\n    const {\n      phoneNumber\n    } = this.values;\n    if (!data && !phoneNumber) {\n      return;\n    }\n    return Object.assign(Object.assign({}, data && data), phoneNumber && {\n      phoneNumber\n    });\n  }\n}\nAuthenticatorEnrollmentData.remediationName = 'authenticator-enrollment-data';\nexport { AuthenticatorEnrollmentData };","map":{"version":3,"names":["AuthenticatorEnrollmentData","AuthenticatorData","mapAuthenticator","authenticatorData","getAuthenticatorData","authenticatorFromRemediation","getAuthenticatorFromRemediation","remediation","id","form","value","find","name","methodType","phoneNumber","getInputAuthenticator","type","label","map","item","val","Object","assign","mapAuthenticatorDataFromValues","data","values","remediationName"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/AuthenticatorEnrollmentData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\nimport { getAuthenticatorFromRemediation } from './util';\n\nexport type AuthenticatorEnrollmentDataValues =  AuthenticatorDataValues & {\n  phoneNumber?: string;\n  resend?: boolean; // resend is not a remediator value - revise when IdxResponse structure is updated\n}\nexport class AuthenticatorEnrollmentData extends AuthenticatorData<AuthenticatorEnrollmentDataValues> {\n  static remediationName = 'authenticator-enrollment-data';\n\n  mapAuthenticator() {\n    const authenticatorData = this.getAuthenticatorData();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation)!;\n    return { \n      id: authenticatorFromRemediation.form!.value\n        .find(({ name }) => name === 'id')!.value,\n      methodType: authenticatorData!.methodType,\n      phoneNumber: authenticatorData!.phoneNumber,\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    return [\n      { name: 'methodType', type: 'string' }, \n      { name: 'phoneNumber', label: 'Phone Number', type: 'string' }\n    ].map(item => {\n      const value = remediation.form.value.find(val => val.name === item.name);\n      return { ...value, ...item };\n    });\n  }\n\n  protected mapAuthenticatorDataFromValues(data?) {\n    // get mapped authenticator from base class\n    data = super.mapAuthenticatorDataFromValues(data);\n    // add phoneNumber to authenticator if it exists in values\n    const { phoneNumber } = this.values;\n    if (!data && !phoneNumber) {\n      return;\n    }\n\n    return { \n      ...(data && data), \n      ...(phoneNumber && { phoneNumber }) \n    };\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;AAqBM,MAAOA,2BAA4B,SAAQC,iBAAoD;EAGnGC,gBAAgBA,CAAA;IACd,MAAMC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;IACrD,MAAMC,4BAA4B,GAAGC,+BAA+B,CAAC,IAAI,CAACC,WAAW,CAAE;IACvF,OAAO;MACLC,EAAE,EAAEH,4BAA4B,CAACI,IAAK,CAACC,KAAK,CACzCC,IAAI,CAAC,CAAC;QAAEC;MAAI,CAAE,KAAKA,IAAI,KAAK,IAAI,CAAE,CAACF,KAAK;MAC3CG,UAAU,EAAEV,iBAAkB,CAACU,UAAU;MACzCC,WAAW,EAAEX,iBAAkB,CAACW;KACjC;EACF;EAEDC,qBAAqBA,CAACR,WAAW;IAC/B,OAAO,CACL;MAAEK,IAAI,EAAE,YAAY;MAAEI,IAAI,EAAE;IAAU,GACtC;MAAEJ,IAAI,EAAE,aAAa;MAAEK,KAAK,EAAE,cAAc;MAAED,IAAI,EAAE;IAAU,EAC/D,CAACE,GAAG,CAACC,IAAI,IAAG;MACX,MAAMT,KAAK,GAAGH,WAAW,CAACE,IAAI,CAACC,KAAK,CAACC,IAAI,CAACS,GAAG,IAAIA,GAAG,CAACR,IAAI,KAAKO,IAAI,CAACP,IAAI,CAAC;MACxE,OAAYS,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAZ,KAAK,CAAK,EAAAS,IAAI,CAAG;IAC/B,CAAC,CAAC;EACH;EAESI,8BAA8BA,CAACC,IAAK;IAE5CA,IAAI,GAAG,KAAK,CAACD,8BAA8B,CAACC,IAAI,CAAC;IAEjD,MAAM;MAAEV;IAAW,CAAE,GAAG,IAAI,CAACW,MAAM;IACnC,IAAI,CAACD,IAAI,IAAI,CAACV,WAAW,EAAE;MACzB;IACD;IAED,OAAAO,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACME,IAAI,IAAIA,IAAI,CAAC,EACbV,WAAW,IAAI;MAAEA;IAAa,EAClC;EACH;;AApCMd,2BAAe,CAAA0B,eAAA,GAAG,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}