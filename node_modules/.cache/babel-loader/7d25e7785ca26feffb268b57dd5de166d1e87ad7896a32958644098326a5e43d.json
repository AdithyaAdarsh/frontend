{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { btoa as b } from '../crypto/browser.js';\nimport { toQueryString } from '../util/url.js';\nimport { post } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { getOAuthUrls } from './util/oauth.js';\nasync function revokeToken(sdk, token) {\n  let accessToken = '';\n  let refreshToken = '';\n  if (token) {\n    accessToken = token.accessToken;\n    refreshToken = token.refreshToken;\n  }\n  if (!accessToken && !refreshToken) {\n    throw new AuthSdkError('A valid access or refresh token object is required');\n  }\n  var clientId = sdk.options.clientId;\n  var clientSecret = sdk.options.clientSecret;\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to revoke a token');\n  }\n  var revokeUrl = getOAuthUrls(sdk).revokeUrl;\n  var args = toQueryString({\n    token_type_hint: refreshToken ? 'refresh_token' : 'access_token',\n    token: refreshToken || accessToken\n  }).slice(1);\n  var creds = clientSecret ? b(`${clientId}:${clientSecret}`) : b(clientId);\n  return post(sdk, revokeUrl, args, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + creds\n    }\n  });\n}\nexport { revokeToken };","map":{"version":3,"names":["revokeToken","sdk","token","accessToken","refreshToken","AuthSdkError","clientId","options","clientSecret","revokeUrl","getOAuthUrls","args","toQueryString","token_type_hint","slice","creds","b","post","headers"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/revokeToken.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/* eslint complexity:[0,8] */\nimport { post } from '../http';\nimport { toQueryString } from '../util';\nimport {\n  getOAuthUrls,\n} from './util/oauth';\nimport { btoa } from '../crypto';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport {\n  OktaAuthOAuthInterface,\n  RevocableToken,\n  AccessToken,\n  RefreshToken\n} from './types';\n\n// refresh tokens have precedence to be revoked if no token is specified\nexport async function revokeToken(sdk: OktaAuthOAuthInterface, token: RevocableToken): Promise<any> {\n  let accessToken = '';\n  let refreshToken = '';\n  if (token) { \n      accessToken = (token as AccessToken).accessToken;\n      refreshToken = (token as RefreshToken).refreshToken;  \n  }\n  if(!accessToken && !refreshToken) { \n    throw new AuthSdkError('A valid access or refresh token object is required');\n  }\n  var clientId = sdk.options.clientId;\n  var clientSecret = sdk.options.clientSecret;\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to revoke a token');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  var revokeUrl = getOAuthUrls(sdk).revokeUrl!;\n  var args = toQueryString({\n    // eslint-disable-next-line camelcase\n    token_type_hint: refreshToken ? 'refresh_token' : 'access_token', \n    token: refreshToken || accessToken,\n  }).slice(1);\n  var creds = clientSecret ? btoa(`${clientId}:${clientSecret}`) : btoa(clientId);\n  return post(sdk, revokeUrl, args, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + creds\n    }\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AA6BO,eAAeA,WAAWA,CAACC,GAA2B,EAAEC,KAAqB;EAClF,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIF,KAAK,EAAE;IACPC,WAAW,GAAID,KAAqB,CAACC,WAAW;IAChDC,YAAY,GAAIF,KAAsB,CAACE,YAAY;EACtD;EACD,IAAG,CAACD,WAAW,IAAI,CAACC,YAAY,EAAE;IAChC,MAAM,IAAIC,YAAY,CAAC,oDAAoD,CAAC;EAC7E;EACD,IAAIC,QAAQ,GAAGL,GAAG,CAACM,OAAO,CAACD,QAAQ;EACnC,IAAIE,YAAY,GAAGP,GAAG,CAACM,OAAO,CAACC,YAAY;EAC3C,IAAI,CAACF,QAAQ,EAAE;IACb,MAAM,IAAID,YAAY,CAAC,4EAA4E,CAAC;EACrG;EAED,IAAII,SAAS,GAAGC,YAAY,CAACT,GAAG,CAAC,CAACQ,SAAU;EAC5C,IAAIE,IAAI,GAAGC,aAAa,CAAC;IAEvBC,eAAe,EAAET,YAAY,GAAG,eAAe,GAAG,cAAc;IAChEF,KAAK,EAAEE,YAAY,IAAID;EACxB,EAAC,CAACW,KAAK,CAAC,CAAC,CAAC;EACX,IAAIC,KAAK,GAAGP,YAAY,GAAGQ,CAAI,CAAI,GAAAV,QAAQ,IAAIE,YAAY,EAAE,CAAC,GAAGQ,CAAI,CAACV,QAAQ,CAAC;EAC/E,OAAOW,IAAI,CAAChB,GAAG,EAAEQ,SAAS,EAAEE,IAAI,EAAE;IAChCO,OAAO,EAAE;MACP,cAAc,EAAE,mCAAmC;MACnD,eAAe,EAAE,QAAQ,GAAGH;IAC7B;EACF,EAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}