{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getSavedTransactionMeta, createTransactionMeta, saveTransactionMeta } from './transactionMeta.js';\nimport { removeNils } from '../util/object.js';\nimport { getOAuthBaseUrl } from '../oidc/util/oauth.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport '../oidc/types/Token.js';\nfunction getResponse(meta) {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle,\n    state: meta.state\n  };\n}\nasync function interact(authClient, options = {}) {\n  options = removeNils(options);\n  let meta = getSavedTransactionMeta(authClient, options);\n  if (meta === null || meta === void 0 ? void 0 : meta.interactionHandle) {\n    return getResponse(meta);\n  }\n  meta = await createTransactionMeta(authClient, Object.assign(Object.assign({}, meta), options));\n  const baseUrl = getOAuthBaseUrl(authClient);\n  let {\n    clientId,\n    redirectUri,\n    state,\n    scopes,\n    withCredentials,\n    codeChallenge,\n    codeChallengeMethod,\n    activationToken,\n    recoveryToken,\n    maxAge,\n    acrValues,\n    nonce\n  } = meta;\n  const clientSecret = options.clientSecret || authClient.options.clientSecret;\n  withCredentials = withCredentials !== null && withCredentials !== void 0 ? withCredentials : true;\n  const url = `${baseUrl}/v1/interact`;\n  const params = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    client_id: clientId,\n    scope: scopes.join(' '),\n    redirect_uri: redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: codeChallengeMethod,\n    state\n  }, activationToken && {\n    activation_token: activationToken\n  }), recoveryToken && {\n    recovery_token: recoveryToken\n  }), clientSecret && {\n    client_secret: clientSecret\n  }), maxAge && {\n    max_age: maxAge\n  }), acrValues && {\n    acr_values: acrValues\n  }), nonce && {\n    nonce\n  });\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  const resp = await httpRequest(authClient, {\n    method: 'POST',\n    url,\n    headers,\n    withCredentials,\n    args: params\n  });\n  const interactionHandle = resp.interaction_handle;\n  const newMeta = Object.assign(Object.assign({}, meta), {\n    interactionHandle,\n    withCredentials,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken\n  });\n  saveTransactionMeta(authClient, newMeta);\n  return getResponse(newMeta);\n}\nexport { interact };","map":{"version":3,"names":["getResponse","meta","interactionHandle","state","interact","authClient","options","removeNils","getSavedTransactionMeta","createTransactionMeta","Object","assign","baseUrl","getOAuthBaseUrl","clientId","redirectUri","scopes","withCredentials","codeChallenge","codeChallengeMethod","activationToken","recoveryToken","maxAge","acrValues","nonce","clientSecret","url","params","client_id","scope","join","redirect_uri","code_challenge","code_challenge_method","activation_token","recovery_token","client_secret","max_age","acr_values","headers","resp","httpRequest","method","args","interaction_handle","newMeta","saveTransactionMeta"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/interact.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/* eslint complexity:[0,8] */\nimport { OktaAuthIdxInterface, IdxTransactionMeta, InteractOptions, InteractResponse } from './types';\nimport { getSavedTransactionMeta, saveTransactionMeta, createTransactionMeta } from './transactionMeta';\nimport { getOAuthBaseUrl } from '../oidc';\nimport { removeNils } from '../util';\nimport { httpRequest } from '../http';\n\n\n/* eslint-disable camelcase */\nexport interface InteractParams {\n  client_id: string;\n  scope: string;\n  redirect_uri: string;\n  code_challenge: string;\n  code_challenge_method: string;\n  state: string;\n  activation_token?: string;\n  recovery_token?: string;\n  client_secret?: string;\n  max_age?: string | number;\n  acr_values?: string;\n  nonce?: string;\n}\n/* eslint-enable camelcase */\n\nfunction getResponse(meta: IdxTransactionMeta): InteractResponse {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle!,\n    state: meta.state\n  };\n}\n\n// Begin or resume a transaction. Returns an interaction handle\nexport async function interact (\n  authClient: OktaAuthIdxInterface, \n  options: InteractOptions = {}\n): Promise<InteractResponse> {\n  options = removeNils(options);\n\n  let meta = getSavedTransactionMeta(authClient, options);\n  // If meta exists, it has been validated against all options\n\n  if (meta?.interactionHandle) {\n    return getResponse(meta); // Saved transaction, return meta\n  }\n\n  // Create new meta, respecting previous meta if it has been set and is not overridden\n  meta = await createTransactionMeta(authClient, { ...meta, ...options });\n  const baseUrl = getOAuthBaseUrl(authClient);\n  let {\n    clientId,\n    redirectUri,\n    state,\n    scopes,\n    withCredentials,\n    codeChallenge,\n    codeChallengeMethod,\n    activationToken,\n    recoveryToken,\n    maxAge,\n    acrValues,\n    nonce\n  } = meta as IdxTransactionMeta;\n  const clientSecret = options.clientSecret || authClient.options.clientSecret;\n  withCredentials = withCredentials ?? true;\n\n  /* eslint-disable camelcase */\n  const url = `${baseUrl}/v1/interact`;\n  const params = {\n    client_id: clientId,\n    scope: scopes!.join(' '),\n    redirect_uri: redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: codeChallengeMethod,\n    state,\n    ...(activationToken && { activation_token: activationToken }),\n    ...(recoveryToken && { recovery_token: recoveryToken }),\n    // X-Device-Token header need to pair with `client_secret`\n    // eslint-disable-next-line max-len\n    // https://oktawiki.atlassian.net/wiki/spaces/eng/pages/2445902453/Support+Device+Binding+in+interact#Scenario-1%3A-Non-User-Agent-with-Confidential-Client-(top-priority)\n    ...(clientSecret && { client_secret: clientSecret }),\n    ...(maxAge && { max_age: maxAge }),\n    ...(acrValues && { acr_values: acrValues }),\n    ...(nonce && { nonce }),\n  } as InteractParams;\n  /* eslint-enable camelcase */\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n\n  const resp = await httpRequest(authClient, {\n    method: 'POST',\n    url,\n    headers,\n    withCredentials,\n    args: params\n  });\n  const interactionHandle = resp.interaction_handle;\n\n  const newMeta = {\n    ...meta,\n    interactionHandle,\n    \n    // Options which can be passed into interact() should be saved in the meta\n    withCredentials,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken\n  };\n  // Save transaction meta so it can be resumed\n  saveTransactionMeta(authClient, newMeta);\n\n  return getResponse(newMeta);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAqCA,SAASA,WAAWA,CAACC,IAAwB;EAC3C,OAAO;IACLA,IAAI;IACJC,iBAAiB,EAAED,IAAI,CAACC,iBAAkB;IAC1CC,KAAK,EAAEF,IAAI,CAACE;GACb;AACH;AAGO,eAAeC,QAAQA,CAC5BC,UAAgC,EAChCC,OAAA,GAA2B,EAAE;EAE7BA,OAAO,GAAGC,UAAU,CAACD,OAAO,CAAC;EAE7B,IAAIL,IAAI,GAAGO,uBAAuB,CAACH,UAAU,EAAEC,OAAO,CAAC;EAGvD,IAAIL,IAAI,KAAJ,QAAAA,IAAI,uBAAJA,IAAI,CAAEC,iBAAiB,EAAE;IAC3B,OAAOF,WAAW,CAACC,IAAI,CAAC;EACzB;EAGDA,IAAI,GAAG,MAAMQ,qBAAqB,CAACJ,UAAU,EAAAK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOV,IAAI,GAAKK,OAAO,EAAG;EACvE,MAAMM,OAAO,GAAGC,eAAe,CAACR,UAAU,CAAC;EAC3C,IAAI;IACFS,QAAQ;IACRC,WAAW;IACXZ,KAAK;IACLa,MAAM;IACNC,eAAe;IACfC,aAAa;IACbC,mBAAmB;IACnBC,eAAe;IACfC,aAAa;IACbC,MAAM;IACNC,SAAS;IACTC;EAAK,CACN,GAAGvB,IAA0B;EAC9B,MAAMwB,YAAY,GAAGnB,OAAO,CAACmB,YAAY,IAAIpB,UAAU,CAACC,OAAO,CAACmB,YAAY;EAC5ER,eAAe,GAAGA,eAAe,KAAf,QAAAA,eAAe,cAAfA,eAAe,GAAI,IAAI;EAGzC,MAAMS,GAAG,GAAM,GAAAd,OAAO,cAAc;EACpC,MAAMe,MAAM,GAAGjB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;IACbiB,SAAS,EAAEd,QAAQ;IACnBe,KAAK,EAAEb,MAAO,CAACc,IAAI,CAAC,GAAG,CAAC;IACxBC,YAAY,EAAEhB,WAAW;IACzBiB,cAAc,EAAEd,aAAa;IAC7Be,qBAAqB,EAAEd,mBAAmB;IAC1ChB;EAAK,GACDiB,eAAe,IAAI;IAAEc,gBAAgB,EAAEd;EAAe,CACvD,GAACC,aAAa,IAAI;IAAEc,cAAc,EAAEd;EAAa,CAAE,GAIlDI,YAAY,IAAI;IAAEW,aAAa,EAAEX;EAAY,CAAE,CAChD,EAACH,MAAM,IAAI;IAAEe,OAAO,EAAEf;EAAQ,IAC7BC,SAAS,IAAI;IAAEe,UAAU,EAAEf;EAAW,EACvC,EAACC,KAAK,IAAI;IAAEA;EAAO,EACL;EAGnB,MAAMe,OAAO,GAAG;IACd,cAAc,EAAE;GACjB;EAED,MAAMC,IAAI,GAAG,MAAMC,WAAW,CAACpC,UAAU,EAAE;IACzCqC,MAAM,EAAE,MAAM;IACdhB,GAAG;IACHa,OAAO;IACPtB,eAAe;IACf0B,IAAI,EAAEhB;EACP,EAAC;EACF,MAAMzB,iBAAiB,GAAGsC,IAAI,CAACI,kBAAkB;EAEjD,MAAMC,OAAO,GAAAnC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACRV,IAAI;IACPC,iBAAiB;IAGjBe,eAAe;IACfd,KAAK;IACLa,MAAM;IACNK,aAAa;IACbD;EAAe,EAChB;EAED0B,mBAAmB,CAACzC,UAAU,EAAEwC,OAAO,CAAC;EAExC,OAAO7C,WAAW,CAAC6C,OAAO,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}