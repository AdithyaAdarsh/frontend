{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWellKnown } from './endpoints/well-known.js';\nimport { btoa as b } from '../crypto/browser.js';\nimport { toQueryString } from '../util/url.js';\nimport { post } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { TokenKind } from './types/Token.js';\nconst hintMap = {\n  accessToken: 'access_token',\n  idToken: 'id_token',\n  refreshToken: 'refresh_token'\n};\nasync function oidcIntrospect(sdk, kind, token) {\n  var _a;\n  let issuer;\n  let clientId = sdk.options.clientId;\n  let clientSecret = sdk.options.clientSecret;\n  if (!token) {\n    token = sdk.tokenManager.getTokens()[kind];\n  }\n  if (!token) {\n    throw new AuthSdkError(`unable to find ${kind} in storage or fn params`);\n  }\n  if (kind !== TokenKind.ACCESS) {\n    issuer = token === null || token === void 0 ? void 0 : token.issuer;\n  } else {\n    issuer = (_a = token === null || token === void 0 ? void 0 : token.claims) === null || _a === void 0 ? void 0 : _a.iss;\n  }\n  issuer !== null && issuer !== void 0 ? issuer : issuer = sdk.options.issuer;\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to introspect a token');\n  }\n  if (!issuer) {\n    throw new AuthSdkError('Unable to find issuer');\n  }\n  const {\n    introspection_endpoint: introspectUrl\n  } = await getWellKnown(sdk, issuer);\n  const authHeader = clientSecret ? b(`${clientId}:${clientSecret}`) : b(clientId);\n  const args = toQueryString({\n    token_type_hint: hintMap[kind],\n    token: token[kind]\n  }).slice(1);\n  return post(sdk, introspectUrl, args, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + authHeader\n    }\n  });\n}\nexport { oidcIntrospect };","map":{"version":3,"names":["hintMap","accessToken","idToken","refreshToken","oidcIntrospect","sdk","kind","token","issuer","clientId","options","clientSecret","tokenManager","getTokens","AuthSdkError","TokenKind","ACCESS","_a","claims","iss","introspection_endpoint","introspectUrl","getWellKnown","authHeader","b","args","toQueryString","token_type_hint","slice","post","headers"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/introspect.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { AuthSdkError } from '../errors';\nimport { getWellKnown } from './endpoints/well-known';\nimport { post } from '../http';\nimport { toQueryString } from '../util';\nimport { btoa } from '../crypto';\nimport { Token, TokenKind } from './types';\n\nconst hintMap = {\n  accessToken: 'access_token',\n  idToken: 'id_token',\n  refreshToken: 'refresh_token'\n};\n\n/* eslint complexity: [2, 9] */\nexport async function oidcIntrospect (sdk, kind: TokenKind, token?: Token) {\n  let issuer: string;\n  let clientId: string = sdk.options.clientId;\n  let clientSecret: string | undefined = sdk.options.clientSecret;\n\n  if (!token) {\n    token = sdk.tokenManager.getTokens()[kind];\n  }\n\n  if (!token) {\n    throw new AuthSdkError(`unable to find ${kind} in storage or fn params`);\n  }\n\n  if (kind !== TokenKind.ACCESS) {\n    issuer = (token as any)?.issuer;\n  }\n  else {\n    issuer = (token as any)?.claims?.iss;\n  }\n  issuer ??= sdk.options.issuer;\n\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to introspect a token');\n  }\n  if (!issuer) {\n    throw new AuthSdkError('Unable to find issuer');\n  }\n\n  const { introspection_endpoint: introspectUrl }  = await getWellKnown(sdk, issuer);\n  const authHeader = clientSecret ? btoa(`${clientId}:${clientSecret}`) : btoa(clientId);\n  const args = toQueryString({\n    // eslint-disable-next-line camelcase\n    token_type_hint: hintMap[kind],\n    token: token[kind]    // extract raw token string from token object\n  }).slice(1);\n  return post(sdk, introspectUrl, args, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + authHeader\n    }\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMA,OAAO,GAAG;EACdC,WAAW,EAAE,cAAc;EAC3BC,OAAO,EAAE,UAAU;EACnBC,YAAY,EAAE;CACf;AAGM,eAAeC,cAAcA,CAAEC,GAAG,EAAEC,IAAe,EAAEC,KAAa;;EACvE,IAAIC,MAAc;EAClB,IAAIC,QAAQ,GAAWJ,GAAG,CAACK,OAAO,CAACD,QAAQ;EAC3C,IAAIE,YAAY,GAAuBN,GAAG,CAACK,OAAO,CAACC,YAAY;EAE/D,IAAI,CAACJ,KAAK,EAAE;IACVA,KAAK,GAAGF,GAAG,CAACO,YAAY,CAACC,SAAS,CAAE,EAACP,IAAI,CAAC;EAC3C;EAED,IAAI,CAACC,KAAK,EAAE;IACV,MAAM,IAAIO,YAAY,CAAC,kBAAkBR,IAAI,0BAA0B,CAAC;EACzE;EAED,IAAIA,IAAI,KAAKS,SAAS,CAACC,MAAM,EAAE;IAC7BR,MAAM,GAAID,KAAa,KAAb,QAAAA,KAAK,uBAALA,KAAK,CAAUC,MAAM;EAChC,OACI;IACHA,MAAM,GAAG,CAACS,EAAA,GAAAV,KAAa,KAAb,QAAAA,KAAK,KAAL,kBAAAA,KAAK,CAAUW,MAAM,MAAE,QAAAD,EAAA,uBAAAA,EAAA,CAAAE,GAAG;EACrC;EACDX,MAAM,KAAN,QAAAA,MAAM,KAAN,SAAAA,MAAM,GAANA,MAAM,GAAKH,GAAG,CAACK,OAAO,CAACF,MAAO;EAE9B,IAAI,CAACC,QAAQ,EAAE;IACb,MAAM,IAAIK,YAAY,CAAC,gFAAgF,CAAC;EACzG;EACD,IAAI,CAACN,MAAM,EAAE;IACX,MAAM,IAAIM,YAAY,CAAC,uBAAuB,CAAC;EAChD;EAED,MAAM;IAAEM,sBAAsB,EAAEC;EAAe,IAAI,MAAMC,YAAY,CAACjB,GAAG,EAAEG,MAAM,CAAC;EAClF,MAAMe,UAAU,GAAGZ,YAAY,GAAGa,CAAI,CAAI,GAAAf,QAAQ,IAAIE,YAAY,EAAE,CAAC,GAAGa,CAAI,CAACf,QAAQ,CAAC;EACtF,MAAMgB,IAAI,GAAGC,aAAa,CAAC;IAEzBC,eAAe,EAAE3B,OAAO,CAACM,IAAI,CAAC;IAC9BC,KAAK,EAAEA,KAAK,CAACD,IAAI;EAClB,EAAC,CAACsB,KAAK,CAAC,CAAC,CAAC;EACX,OAAOC,IAAI,CAACxB,GAAG,EAAEgB,aAAa,EAAEI,IAAI,EAAE;IACpCK,OAAO,EAAE;MACP,cAAc,EAAE,mCAAmC;MACnD,eAAe,EAAE,QAAQ,GAAGP;IAC7B;EACF,EAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}