{"ast":null,"code":"import _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME } from '../constants.js';\nimport { SavedObject } from './SavedObject.js';\nimport { isBrowser } from '../features.js';\nimport { warn } from '../util/console.js';\nfunction logServerSideMemoryStorageWarning(options) {\n  if (!isBrowser() && !options.storageProvider && !options.storageKey) {\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\nvar BaseStorageManager = /*#__PURE__*/function () {\n  function BaseStorageManager(storageManagerOptions, cookieOptions, storageUtil) {\n    _classCallCheck(this, BaseStorageManager);\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n  _createClass(BaseStorageManager, [{\n    key: \"getOptionsForSection\",\n    value: function getOptionsForSection(sectionName, overrideOptions) {\n      return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n    }\n  }, {\n    key: \"getStorage\",\n    value: function getStorage(options) {\n      options = Object.assign({}, this.cookieOptions, options);\n      if (options.storageProvider) {\n        return options.storageProvider;\n      }\n      var _options = options,\n        storageType = _options.storageType,\n        storageTypes = _options.storageTypes;\n      if (storageType === 'sessionStorage') {\n        options.sessionCookie = true;\n      }\n      if (storageType && storageTypes) {\n        var idx = storageTypes.indexOf(storageType);\n        if (idx >= 0) {\n          storageTypes = storageTypes.slice(idx);\n          storageType = undefined;\n        }\n      }\n      if (!storageType) {\n        storageType = this.storageUtil.findStorageType(storageTypes);\n      }\n      return this.storageUtil.getStorageByType(storageType, options);\n    }\n  }, {\n    key: \"getTokenStorage\",\n    value: function getTokenStorage(options) {\n      options = this.getOptionsForSection('token', options);\n      logServerSideMemoryStorageWarning(options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getHttpCache\",\n    value: function getHttpCache(options) {\n      options = this.getOptionsForSection('cache', options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || CACHE_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }]);\n  return BaseStorageManager;\n}();\nexport { BaseStorageManager, logServerSideMemoryStorageWarning };","map":{"version":3,"names":["logServerSideMemoryStorageWarning","options","isBrowser","storageProvider","storageKey","warn","BaseStorageManager","storageManagerOptions","cookieOptions","storageUtil","_classCallCheck","_createClass","key","value","getOptionsForSection","sectionName","overrideOptions","Object","assign","getStorage","_options","storageType","storageTypes","sessionCookie","idx","indexOf","slice","undefined","findStorageType","getStorageByType","getTokenStorage","storage","TOKEN_STORAGE_NAME","SavedObject","getHttpCache","CACHE_STORAGE_NAME"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/storage/BaseStorageManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n\nimport {\n  TOKEN_STORAGE_NAME,\n  CACHE_STORAGE_NAME,\n} from '../constants';\nimport {\n  StorageUtil,\n  StorageProvider,\n  StorageOptions,\n  CookieOptions,\n  StorageManagerOptions,\n  SimpleStorage,\n  StorageManagerInterface\n} from './types';\nimport { SavedObject } from './SavedObject';\nimport { isBrowser } from '../features';\nimport { warn } from '../util';\n\nexport function logServerSideMemoryStorageWarning(options: StorageOptions) {\n  if (!isBrowser() && !options.storageProvider && !options.storageKey) {\n    // eslint-disable-next-line max-len\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\n\nexport class BaseStorageManager implements StorageManagerInterface {\n  storageManagerOptions: StorageManagerOptions;\n  cookieOptions: CookieOptions;\n  storageUtil: StorageUtil;\n\n  constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  // combines defaults in order\n  getOptionsForSection(sectionName: string, overrideOptions?: StorageOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n \n  // generic method to get any available storage provider\n  // eslint-disable-next-line complexity\n  getStorage(options: StorageOptions): SimpleStorage {\n    options = Object.assign({}, this.cookieOptions, options); // set defaults\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let { storageType, storageTypes } = options;\n\n    if(storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    // If both storageType and storageTypes are specified, then storageType will be used first\n    // If storageType cannot be used but it matches an entry in storageTypes, subsequent entries may be used as fallback\n    // if storageType does not match an entry in storageTypes then storageType is used with no fallback.\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n\n    if (!storageType) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      storageType = this.storageUtil.findStorageType(storageTypes!);\n    }\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  // access_token, id_token, refresh_token\n  getTokenStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // caches well-known response, among others\n  getHttpCache(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AA+BM,SAAUA,iCAAiCA,CAACC,OAAuB;EACvE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACD,OAAO,CAACE,eAAe,IAAI,CAACF,OAAO,CAACG,UAAU,EAAE;IAEnEC,IAAI,CAAC,6KAA6K,CAAC;EACpL;AACH;AAAC,IAGYC,kBAAkB;EAK7B,SAAAA,mBAAYC,qBAA4C,EAAEC,aAA4B,EAAEC,WAAwB;IAAAC,eAAA,OAAAJ,kBAAA;IAC9G,IAAI,CAACC,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAC/B;EAAAE,YAAA,CAAAL,kBAAA;IAAAM,GAAA;IAAAC,KAAA,EAGD,SAAAC,qBAAqBC,WAAmB,EAAEC,eAAgC;MACxE,OAAOC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACX,qBAAqB,CAACQ,WAAW,CAAC,EAAEC,eAAe,CAAC;IACnF;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAID,SAAAM,WAAWlB,OAAuB;MAChCA,OAAO,GAAGgB,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACV,aAAa,EAAEP,OAAO,CAAC;MAExD,IAAIA,OAAO,CAACE,eAAe,EAAE;QAC3B,OAAOF,OAAO,CAACE,eAAe;MAC/B;MAED,IAAAiB,QAAA,GAAoCnB,OAAO;QAArCoB,WAAW,GAAAD,QAAA,CAAXC,WAAW;QAAEC,YAAY,GAAAF,QAAA,CAAZE,YAAY;MAE/B,IAAGD,WAAW,KAAK,gBAAgB,EAAE;QACnCpB,OAAO,CAACsB,aAAa,GAAG,IAAI;MAC7B;MAKD,IAAIF,WAAW,IAAIC,YAAY,EAAE;QAC/B,IAAME,GAAG,GAAGF,YAAY,CAACG,OAAO,CAACJ,WAAW,CAAC;QAC7C,IAAIG,GAAG,IAAI,CAAC,EAAE;UACZF,YAAY,GAAGA,YAAY,CAACI,KAAK,CAACF,GAAG,CAAC;UACtCH,WAAW,GAAGM,SAAS;QACxB;MACF;MAED,IAAI,CAACN,WAAW,EAAE;QAEhBA,WAAW,GAAG,IAAI,CAACZ,WAAW,CAACmB,eAAe,CAACN,YAAa,CAAC;MAC9D;MACD,OAAO,IAAI,CAACb,WAAW,CAACoB,gBAAgB,CAACR,WAAW,EAAEpB,OAAO,CAAC;IAC/D;EAAA;IAAAW,GAAA;IAAAC,KAAA,EAGD,SAAAiB,gBAAgB7B,OAAwB;MACtCA,OAAO,GAAG,IAAI,CAACa,oBAAoB,CAAC,OAAO,EAAEb,OAAO,CAAC;MACrDD,iCAAiC,CAACC,OAAO,CAAC;MAC1C,IAAM8B,OAAO,GAAG,IAAI,CAACZ,UAAU,CAAClB,OAAO,CAAC;MACxC,IAAMG,UAAU,GAAGH,OAAO,CAACG,UAAU,IAAI4B,kBAAkB;MAC3D,OAAO,IAAIC,WAAW,CAACF,OAAO,EAAE3B,UAAU,CAAC;IAC5C;EAAA;IAAAQ,GAAA;IAAAC,KAAA,EAGD,SAAAqB,aAAajC,OAAwB;MACnCA,OAAO,GAAG,IAAI,CAACa,oBAAoB,CAAC,OAAO,EAAEb,OAAO,CAAC;MACrD,IAAM8B,OAAO,GAAG,IAAI,CAACZ,UAAU,CAAClB,OAAO,CAAC;MACxC,IAAMG,UAAU,GAAGH,OAAO,CAACG,UAAU,IAAI+B,kBAAkB;MAC3D,OAAO,IAAIF,WAAW,CAACF,OAAO,EAAE3B,UAAU,CAAC;IAC5C;EAAA;EAAA,OAAAE,kBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}