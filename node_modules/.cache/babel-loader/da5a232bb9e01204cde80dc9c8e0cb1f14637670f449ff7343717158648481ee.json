{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { sendRequest } from './request.js';\nconst getPhones = async (oktaAuth, options) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'GET',\n    accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n    transactionClassName: 'PhoneTransaction'\n  });\n  return transaction;\n};\nconst getPhone = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    id\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  });\n  return transaction;\n};\nconst addPhone = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  });\n  return transaction;\n};\nconst deletePhone = async (oktaAuth, options) => {\n  const {\n    id,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'DELETE',\n    accessToken\n  });\n  return transaction;\n};\nconst sendPhoneChallenge = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    id,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/challenge`,\n    method: 'POST',\n    payload,\n    accessToken\n  });\n  return transaction;\n};\nconst verifyPhoneChallenge = async (oktaAuth, options) => {\n  const {\n    id,\n    payload,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  });\n  return transaction;\n};\nexport { addPhone, deletePhone, getPhone, getPhones, sendPhoneChallenge, verifyPhoneChallenge };","map":{"version":3,"names":["getPhones","oktaAuth","options","transaction","sendRequest","url","method","accessToken","transactionClassName","getPhone","id","addPhone","payload","deletePhone","sendPhoneChallenge","verifyPhoneChallenge"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/myaccount/phoneApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction,\n  BaseTransaction, \n  PhoneTransaction\n} from './types';\n\n/**\n * @scope: okta.myAccount.phone.read\n */\nexport const getPhones: IAPIFunction<PhoneTransaction[]> = async (\n  oktaAuth,\n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction[];\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.phone.read\n */\nexport const getPhone: IAPIFunction<PhoneTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { accessToken, id } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.phone.manage\n */\nexport const addPhone: IAPIFunction<PhoneTransaction> = async (\n  oktaAuth, \n  options\n): Promise<PhoneTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.phone.manage\n */\nexport const deletePhone: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'DELETE',\n    accessToken,\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.phone.manage\n */\nexport const sendPhoneChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { accessToken, id, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/challenge`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myAccount.phone.manage\n */\nexport const verifyPhoneChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { id, payload, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n"],"mappings":";;;;;;;;;;;;;AAUa,MAAAA,SAAS,GAAqC,MAAAA,CACzDC,QAAQ,EACRC,OAAQ,KACN;EACF,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAAE,uBAAuB;IAC5BC,MAAM,EAAE,KAAK;IACbC,WAAW,EAAEL,OAAO,aAAPA,OAAO,KAAP,kBAAAA,OAAO,CAAEK,WAAW;IACjCC,oBAAoB,EAAE;EACvB,EAAuB;EACxB,OAAOL,WAAW;AACpB,CAAE;AAKW,MAAAM,QAAQ,GAAmC,MAAAA,CACtDR,QAAQ,EACRC,OAAO,KACL;EACF,MAAM;IAAEK,WAAW;IAAEG;EAAI,IAAGR,OAAQ;EACpC,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAA2B,yBAAAK,EAAI;IAClCJ,MAAM,EAAE,KAAK;IACbC,WAAW;IACXC,oBAAoB,EAAE;EACvB,EAAqB;EACtB,OAAOL,WAAW;AACpB,CAAE;AAKW,MAAAQ,QAAQ,GAAmC,MAAAA,CACtDV,QAAQ,EACRC,OAAO,KACsB;EAC7B,MAAM;IAAEK,WAAW;IAAEK;EAAS,IAAGV,OAAQ;EACzC,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAAE,uBAAuB;IAC5BC,MAAM,EAAE,MAAM;IACdM,OAAO;IACPL,WAAW;IACXC,oBAAoB,EAAE;EACvB,EAAqB;EACtB,OAAOL,WAAW;AACpB,CAAE;AAKW,MAAAU,WAAW,GAAkC,MAAAA,CACxDZ,QAAQ,EACRC,OAAO,KACL;EACF,MAAM;IAAEQ,EAAE;IAAEH;EAAa,IAAGL,OAAQ;EACpC,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAA2B,yBAAAK,EAAI;IAClCJ,MAAM,EAAE,QAAQ;IAChBC;EACD,EAAoB;EACrB,OAAOJ,WAAW;AACpB,CAAE;AAKW,MAAAW,kBAAkB,GAAkC,MAAAA,CAC/Db,QAAQ,EACRC,OAAO,KACL;EACF,MAAM;IAAEK,WAAW;IAAEG,EAAE;IAAEE;EAAO,CAAE,GAAGV,OAAQ;EAC7C,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAA2B,yBAAAK,EAAc;IAC5CJ,MAAM,EAAE,MAAM;IACdM,OAAO;IACPL;EACD,EAAoB;EACrB,OAAOJ,WAAW;AACpB,CAAE;AAKW,MAAAY,oBAAoB,GAAkC,MAAAA,CACjEd,QAAQ,EACRC,OAAO,KACL;EACF,MAAM;IAAEQ,EAAE;IAAEE,OAAO;IAAEL;EAAW,CAAE,GAAGL,OAAQ;EAC7C,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAQ,EAAE;IAC9CI,GAAG,EAA2B,yBAAAK,EAAW;IACzCJ,MAAM,EAAE,MAAM;IACdM,OAAO;IACPL;EACD,EAAoB;EACrB,OAAOJ,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}