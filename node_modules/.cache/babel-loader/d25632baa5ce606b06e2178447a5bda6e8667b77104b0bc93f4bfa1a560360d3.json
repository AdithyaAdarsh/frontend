{"ast":null,"code":"var _jsxFileName = \"/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/src/LoginCallback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginCallback = () => {\n  _s();\n  const {\n    oktaAuth\n  } = useOktaAuth();\n  useEffect(() => {\n    const handleTokenExchange = async () => {\n      try {\n        var _oktaTokenData$idToke;\n        // Parse the Okta ID token from the URL parameters\n        const {\n          tokens\n        } = await oktaAuth.handleRedirect();\n        const oktaTokenStorage = localStorage.getItem('okta-token-storage');\n        if (!oktaTokenStorage) {\n          console.error('Okta token storage not found in local storage');\n          // Handle this error case, e.g., display a message to the user\n          return;\n        }\n        const oktaTokenData = JSON.parse(oktaTokenStorage);\n        if (!(oktaTokenData !== null && oktaTokenData !== void 0 && (_oktaTokenData$idToke = oktaTokenData.idToken) !== null && _oktaTokenData$idToke !== void 0 && _oktaTokenData$idToke.value)) {\n          console.error('Access token not found in Okta token storage');\n          // Handle this error case, e.g., display a message to the user\n          return;\n        }\n        const accessToken = oktaTokenData.idToken.value;\n        console.log('Retrieved access token:', accessToken);\n        if (tokens && tokens.idToken) {\n          const oktaToken = tokens.idToken;\n\n          // Send the Okta ID token to your server's /login endpoint\n          axios.post('http://localhost:5000/login', {\n            oktaToken\n          }).then(response => {\n            if (response.data.sessionToken) {\n              // Store the session token securely (localStorage or sessionStorage)\n              localStorage.setItem('sessionToken', response.data.sessionToken);\n\n              // Redirect to a protected route or perform any other actions\n              // Example: navigate('/customer_service');\n            } else {\n              console.error('Session token not received');\n              // Handle this error case, e.g., display a message to the user\n            }\n          }).catch(error => {\n            console.error('Error sending token to server:', error);\n            // Handle this error case, e.g., display a message to the user\n          });\n        }\n      } catch (error) {\n        console.error('Token exchange error:', error);\n        // Handle this error case, e.g., display a message to the user\n      }\n    };\n\n    handleTokenExchange();\n  }, [oktaAuth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Logging in...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(LoginCallback, \"d6uaNInQAXMDPMPk6GlP0Bjd4L4=\", false, function () {\n  return [useOktaAuth];\n});\n_c = LoginCallback;\nexport default LoginCallback;\nvar _c;\n$RefreshReg$(_c, \"LoginCallback\");","map":{"version":3,"names":["React","useEffect","useOktaAuth","axios","jsxDEV","_jsxDEV","LoginCallback","_s","oktaAuth","handleTokenExchange","_oktaTokenData$idToke","tokens","handleRedirect","oktaTokenStorage","localStorage","getItem","console","error","oktaTokenData","JSON","parse","idToken","value","accessToken","log","oktaToken","post","then","response","data","sessionToken","setItem","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/src/LoginCallback.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport axios from 'axios';\n\nconst LoginCallback = () => {\n  const { oktaAuth } = useOktaAuth();\n\n  useEffect(() => {\n    const handleTokenExchange = async () => {\n      try {\n        // Parse the Okta ID token from the URL parameters\n        const { tokens } = await oktaAuth.handleRedirect();\n\n        const oktaTokenStorage = localStorage.getItem('okta-token-storage');\n\n        if (!oktaTokenStorage) {\n          console.error('Okta token storage not found in local storage');\n          // Handle this error case, e.g., display a message to the user\n          return;\n        }\n\n        const oktaTokenData = JSON.parse(oktaTokenStorage);\n\n        if (!oktaTokenData?.idToken?.value) {\n          console.error('Access token not found in Okta token storage');\n          // Handle this error case, e.g., display a message to the user\n          return;\n        }\n\n        const accessToken = oktaTokenData.idToken.value;\n\n        console.log('Retrieved access token:', accessToken);\n\n\n        if (tokens && tokens.idToken) {\n          const oktaToken = tokens.idToken;\n\n          // Send the Okta ID token to your server's /login endpoint\n          axios\n            .post('http://localhost:5000/login', { oktaToken })\n            .then((response) => {\n              if (response.data.sessionToken) {\n                // Store the session token securely (localStorage or sessionStorage)\n                localStorage.setItem('sessionToken', response.data.sessionToken);\n\n                // Redirect to a protected route or perform any other actions\n                // Example: navigate('/customer_service');\n              } else {\n                console.error('Session token not received');\n                // Handle this error case, e.g., display a message to the user\n              }\n            })\n            .catch((error) => {\n              console.error('Error sending token to server:', error);\n              // Handle this error case, e.g., display a message to the user\n            });\n        }\n      } catch (error) {\n        console.error('Token exchange error:', error);\n        // Handle this error case, e.g., display a message to the user\n      }\n    };\n\n    handleTokenExchange();\n  }, [oktaAuth]);\n\n  return <div>Logging in...</div>;\n};\n\nexport default LoginCallback;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAS,CAAC,GAAGN,WAAW,CAAC,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,MAAMQ,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QAAA,IAAAC,qBAAA;QACF;QACA,MAAM;UAAEC;QAAO,CAAC,GAAG,MAAMH,QAAQ,CAACI,cAAc,CAAC,CAAC;QAElD,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;QAEnE,IAAI,CAACF,gBAAgB,EAAE;UACrBG,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;UAC9D;UACA;QACF;QAEA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACP,gBAAgB,CAAC;QAElD,IAAI,EAACK,aAAa,aAAbA,aAAa,gBAAAR,qBAAA,GAAbQ,aAAa,CAAEG,OAAO,cAAAX,qBAAA,eAAtBA,qBAAA,CAAwBY,KAAK,GAAE;UAClCN,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;UAC7D;UACA;QACF;QAEA,MAAMM,WAAW,GAAGL,aAAa,CAACG,OAAO,CAACC,KAAK;QAE/CN,OAAO,CAACQ,GAAG,CAAC,yBAAyB,EAAED,WAAW,CAAC;QAGnD,IAAIZ,MAAM,IAAIA,MAAM,CAACU,OAAO,EAAE;UAC5B,MAAMI,SAAS,GAAGd,MAAM,CAACU,OAAO;;UAEhC;UACAlB,KAAK,CACFuB,IAAI,CAAC,6BAA6B,EAAE;YAAED;UAAU,CAAC,CAAC,CAClDE,IAAI,CAAEC,QAAQ,IAAK;YAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,YAAY,EAAE;cAC9B;cACAhB,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEH,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC;;cAEhE;cACA;YACF,CAAC,MAAM;cACLd,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;cAC3C;YACF;UACF,CAAC,CAAC,CACDe,KAAK,CAAEf,KAAK,IAAK;YAChBD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;YACtD;UACF,CAAC,CAAC;QACN;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;MACF;IACF,CAAC;;IAEDR,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,oBAAOH,OAAA;IAAA4B,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACjC,CAAC;AAAC9B,EAAA,CA/DID,aAAa;EAAA,QACIJ,WAAW;AAAA;AAAAoC,EAAA,GAD5BhC,aAAa;AAiEnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}