{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport './types/Token.js';\nimport { decodeToken } from './decodeToken.js';\nfunction verifyToken(_x, _x2, _x3) {\n  return _verifyToken.apply(this, arguments);\n}\nfunction _verifyToken() {\n  _verifyToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, token, validationParams) {\n    var jwt, configuredIssuer, _yield$getWellKnown, issuer, validationOptions, key, valid, hash;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(!token || !token.idToken)) {\n            _context.next = 2;\n            break;\n          }\n          throw new AuthSdkError('Only idTokens may be verified');\n        case 2:\n          jwt = decodeToken(token.idToken);\n          configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n          _context.next = 6;\n          return getWellKnown(sdk, configuredIssuer);\n        case 6:\n          _yield$getWellKnown = _context.sent;\n          issuer = _yield$getWellKnown.issuer;\n          validationOptions = Object.assign({\n            clientId: sdk.options.clientId,\n            ignoreSignature: sdk.options.ignoreSignature\n          }, validationParams, {\n            issuer: issuer\n          });\n          validateClaims(sdk, jwt.payload, validationOptions);\n          if (!(validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported())) {\n            _context.next = 12;\n            break;\n          }\n          return _context.abrupt(\"return\", token);\n        case 12:\n          _context.next = 14;\n          return getKey(sdk, token.issuer, jwt.header.kid);\n        case 14:\n          key = _context.sent;\n          _context.next = 17;\n          return verifyToken$1(token.idToken, key);\n        case 17:\n          valid = _context.sent;\n          if (valid) {\n            _context.next = 20;\n            break;\n          }\n          throw new AuthSdkError('The token signature is not valid');\n        case 20:\n          if (!(validationParams && validationParams.accessToken && token.claims.at_hash)) {\n            _context.next = 26;\n            break;\n          }\n          _context.next = 23;\n          return getOidcHash(validationParams.accessToken);\n        case 23:\n          hash = _context.sent;\n          if (!(hash !== token.claims.at_hash)) {\n            _context.next = 26;\n            break;\n          }\n          throw new AuthSdkError('Token hash verification failed');\n        case 26:\n          return _context.abrupt(\"return\", token);\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _verifyToken.apply(this, arguments);\n}\nexport { verifyToken };","map":{"version":3,"names":["verifyToken","_x","_x2","_x3","_verifyToken","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sdk","token","validationParams","jwt","configuredIssuer","_yield$getWellKnown","issuer","validationOptions","key","valid","hash","wrap","_callee$","_context","prev","next","idToken","AuthSdkError","decodeToken","options","getWellKnown","sent","Object","assign","clientId","ignoreSignature","validateClaims","payload","features","isTokenVerifySupported","abrupt","getKey","header","kid","verifyToken$1","accessToken","claims","at_hash","getOidcHash","stop"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/verifyToken.ts"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable complexity */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { getWellKnown, getKey } from './endpoints/well-known';\nimport { validateClaims } from './util';\nimport { AuthSdkError } from '../errors';\nimport { IDToken, OktaAuthOAuthInterface, TokenVerifyParams } from '../oidc/types';\nimport { decodeToken } from './decodeToken';\nimport * as sdkCrypto from '../crypto';\n\n// Verify the id token\nexport async function verifyToken(sdk: OktaAuthOAuthInterface, token: IDToken, validationParams: TokenVerifyParams): Promise<IDToken> {\n  if (!token || !token.idToken) {\n    throw new AuthSdkError('Only idTokens may be verified');\n  }\n\n  // Decode the Jwt object (may throw)\n  const jwt = decodeToken(token.idToken);\n\n  // The configured issuer may point to a frontend proxy.\n  // Get the \"real\" issuer from .well-known/openid-configuration\n  const configuredIssuer = validationParams?.issuer || sdk.options.issuer;\n  const { issuer } = await getWellKnown(sdk, configuredIssuer);\n\n  const validationOptions: TokenVerifyParams = Object.assign({\n    // base options, can be overridden by params\n    clientId: sdk.options.clientId,\n    ignoreSignature: sdk.options.ignoreSignature\n  }, validationParams, {\n    // final options, cannot be overridden\n    issuer\n  });\n\n  // Standard claim validation (may throw)\n  validateClaims(sdk, jwt.payload, validationOptions);\n\n  // If the browser doesn't support native crypto or we choose not\n  // to verify the signature, bail early\n  if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n    return token;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const key = await getKey(sdk, token.issuer, jwt.header.kid!);\n  const valid = await sdkCrypto.verifyToken(token.idToken, key);\n  if (!valid) {\n    throw new AuthSdkError('The token signature is not valid');\n  }\n  if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n    const hash = await sdkCrypto.getOidcHash(validationParams.accessToken);\n    if (hash !== token.claims.at_hash) {\n      throw new AuthSdkError('Token hash verification failed');\n    }\n  }\n  return token;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}