{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { parseIdxResponse } from './idxResponseParser.js';\nfunction makeIdxState(authClient, idxResponse, toPersist, requestDidSucceed) {\n  var _a, _b, _c;\n  var rawIdxResponse = idxResponse;\n  var _parseIdxResponse = parseIdxResponse(authClient, idxResponse, toPersist),\n    remediations = _parseIdxResponse.remediations,\n    context = _parseIdxResponse.context,\n    actions = _parseIdxResponse.actions;\n  var neededToProceed = _toConsumableArray(remediations);\n  var proceed = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(remediationChoice) {\n      var paramsFromUser,\n        remediationChoiceObject,\n        actionFn,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            paramsFromUser = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            remediationChoiceObject = remediations.find(function (remediation) {\n              return remediation.name === remediationChoice;\n            });\n            if (remediationChoiceObject) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\", Promise.reject(\"Unknown remediation choice: [\".concat(remediationChoice, \"]\")));\n          case 4:\n            actionFn = remediationChoiceObject.action;\n            if (!(typeof actionFn !== 'function')) {\n              _context.next = 7;\n              break;\n            }\n            return _context.abrupt(\"return\", Promise.reject(\"Current remediation cannot make form submit action: [\".concat(remediationChoice, \"]\")));\n          case 7:\n            return _context.abrupt(\"return\", remediationChoiceObject.action(paramsFromUser));\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function proceed(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var findCode = function findCode(item) {\n    return item.name === 'interaction_code';\n  };\n  var interactionCode = (_c = (_b = (_a = rawIdxResponse.successWithInteractionCode) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.find(findCode)) === null || _c === void 0 ? void 0 : _c.value;\n  return {\n    proceed: proceed,\n    neededToProceed: neededToProceed,\n    actions: actions,\n    context: context,\n    rawIdxState: rawIdxResponse,\n    interactionCode: interactionCode,\n    toPersist: toPersist,\n    requestDidSucceed: requestDidSucceed\n  };\n}\nexport { makeIdxState };","map":{"version":3,"names":["makeIdxState","authClient","idxResponse","toPersist","requestDidSucceed","rawIdxResponse","_parseIdxResponse","parseIdxResponse","remediations","context","actions","neededToProceed","_toConsumableArray","proceed","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","remediationChoice","paramsFromUser","remediationChoiceObject","actionFn","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","find","remediation","name","abrupt","Promise","reject","concat","action","stop","_x","apply","findCode","item","interactionCode","_c","_b","_a","successWithInteractionCode","value","rawIdxState"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/idxState/v1/makeIdxState.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IdxResponse, IdxToPersist } from '../../types/idx-js';\nimport { OktaAuthIdxInterface, RawIdxResponse } from '../../types';    // auth-js/types\nimport { parseIdxResponse } from './idxResponseParser';\n\nexport function makeIdxState( \n  authClient: OktaAuthIdxInterface,\n  idxResponse: RawIdxResponse,\n  toPersist: IdxToPersist,\n  requestDidSucceed: boolean\n): IdxResponse {\n  const rawIdxResponse =  idxResponse;\n  const { remediations, context, actions } = parseIdxResponse( authClient, idxResponse, toPersist );\n  const neededToProceed = [...remediations];\n\n  const proceed: IdxResponse['proceed'] = async function( remediationChoice, paramsFromUser = {} ) {\n    /*\n    remediationChoice is the name attribute on each form\n    name should remain unique for items inside the remediation that are considered forms(identify, select-factor)\n    name can be duplicate for items like redirect where its not considered a form(redirect)\n    when names are not unique its a redirect to a href, so widget wont POST to idx-js layer.\n    */\n    const remediationChoiceObject = remediations.find((remediation) => remediation.name === remediationChoice);\n    if ( !remediationChoiceObject ) {\n      return Promise.reject(`Unknown remediation choice: [${remediationChoice}]`);\n    }\n\n    const actionFn = remediationChoiceObject.action;\n    if (typeof actionFn !== 'function') {\n      return Promise.reject(`Current remediation cannot make form submit action: [${remediationChoice}]`);\n    }\n\n    return remediationChoiceObject.action(paramsFromUser);\n  };\n\n  const findCode = item => item.name === 'interaction_code';\n  const interactionCode = rawIdxResponse.successWithInteractionCode?.value?.find( findCode )?.value as string;\n\n  return {\n    proceed,\n    neededToProceed,\n    actions,\n    context,\n    rawIdxState: rawIdxResponse,\n    interactionCode,\n    toPersist,\n    requestDidSucceed,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAgBM,SAAUA,YAAYA,CAC1BC,UAAgC,EAChCC,WAA2B,EAC3BC,SAAuB,EACvBC,iBAA0B;;EAE1B,IAAMC,cAAc,GAAIH,WAAW;EACnC,IAAAI,iBAAA,GAA2CC,gBAAgB,CAAEN,UAAU,EAAEC,WAAW,EAAEC,SAAS,CAAE;IAAzFK,YAAY,GAAAF,iBAAA,CAAZE,YAAY;IAAEC,OAAO,GAAAH,iBAAA,CAAPG,OAAO;IAAEC,OAAO,GAAAJ,iBAAA,CAAPI,OAAO;EACtC,IAAMC,eAAe,GAAAC,kBAAA,CAAOJ,YAAY,CAAC;EAEzC,IAAMK,OAAO;IAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA2B,SAAAC,QAAgBC,iBAAiB;MAAA,IAAAC,cAAA;QAAAC,uBAAA;QAAAC,QAAA;QAAAC,KAAA,GAAAC,SAAA;MAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAET,cAAc,GAAAG,KAAA,CAAAO,MAAA,QAAAP,KAAA,QAAAQ,SAAA,GAAAR,KAAA,MAAG,EAAE;YAOtFF,uBAAuB,GAAGb,YAAY,CAACwB,IAAI,CAAC,UAACC,WAAW;cAAA,OAAKA,WAAW,CAACC,IAAI,KAAKf,iBAAiB;YAAA,EAAC;YAAA,IACpGE,uBAAuB;cAAAM,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,OAAAF,QAAA,CAAAQ,MAAA,WACpBC,OAAO,CAACC,MAAM,iCAAAC,MAAA,CAAiCnB,iBAAiB,MAAG,CAAC;UAAA;YAGvEG,QAAQ,GAAGD,uBAAuB,CAACkB,MAAM;YAAA,MAC3C,OAAOjB,QAAQ,KAAK,UAAU;cAAAK,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,OAAAF,QAAA,CAAAQ,MAAA,WACzBC,OAAO,CAACC,MAAM,yDAAAC,MAAA,CAAyDnB,iBAAiB,MAAG,CAAC;UAAA;YAAA,OAAAQ,QAAA,CAAAQ,MAAA,WAG9Fd,uBAAuB,CAACkB,MAAM,CAACnB,cAAc,CAAC;UAAA;UAAA;YAAA,OAAAO,QAAA,CAAAa,IAAA;QAAA;MAAA,GAAAtB,OAAA;IAAA,CACtD;IAAA,gBAlBKL,OAAOA,CAAA4B,EAAA;MAAA,OAAA3B,IAAA,CAAA4B,KAAA,OAAAlB,SAAA;IAAA;EAAA,GAkBZ;EAED,IAAMmB,QAAQ,GAAG,SAAXA,QAAQA,CAAGC,IAAI;IAAA,OAAIA,IAAI,CAACV,IAAI,KAAK,kBAAkB;EAAA;EACzD,IAAMW,eAAe,GAAG,CAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAA3C,cAAc,CAAC4C,0BAA0B,MAAE,QAAAD,EAAA,uBAAAA,EAAA,CAAAE,KAAK,cAAAH,EAAA,uBAAAA,EAAA,CAAEf,IAAI,CAAEW,QAAQ,CAAE,cAAAG,EAAA,uBAAAA,EAAA,CAAEI,KAAe;EAE3G,OAAO;IACLrC,OAAO,EAAPA,OAAO;IACPF,eAAe,EAAfA,eAAe;IACfD,OAAO,EAAPA,OAAO;IACPD,OAAO,EAAPA,OAAO;IACP0C,WAAW,EAAE9C,cAAc;IAC3BwC,eAAe,EAAfA,eAAe;IACf1C,SAAS,EAATA,SAAS;IACTC,iBAAiB,EAAjBA;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}