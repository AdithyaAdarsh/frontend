{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWellKnown } from './endpoints/well-known.js';\nimport { btoa as b } from '../crypto/browser.js';\nimport { toQueryString } from '../util/url.js';\nimport { post } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { TokenKind } from './types/Token.js';\nvar hintMap = {\n  accessToken: 'access_token',\n  idToken: 'id_token',\n  refreshToken: 'refresh_token'\n};\nfunction oidcIntrospect(_x, _x2, _x3) {\n  return _oidcIntrospect.apply(this, arguments);\n}\nfunction _oidcIntrospect() {\n  _oidcIntrospect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, kind, token) {\n    var _a, issuer, clientId, clientSecret, _yield$getWellKnown, introspectUrl, authHeader, args;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          clientId = sdk.options.clientId;\n          clientSecret = sdk.options.clientSecret;\n          if (!token) {\n            token = sdk.tokenManager.getTokens()[kind];\n          }\n          if (token) {\n            _context.next = 5;\n            break;\n          }\n          throw new AuthSdkError(\"unable to find \".concat(kind, \" in storage or fn params\"));\n        case 5:\n          if (kind !== TokenKind.ACCESS) {\n            issuer = token === null || token === void 0 ? void 0 : token.issuer;\n          } else {\n            issuer = (_a = token === null || token === void 0 ? void 0 : token.claims) === null || _a === void 0 ? void 0 : _a.iss;\n          }\n          issuer !== null && issuer !== void 0 ? issuer : issuer = sdk.options.issuer;\n          if (clientId) {\n            _context.next = 9;\n            break;\n          }\n          throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to introspect a token');\n        case 9:\n          if (issuer) {\n            _context.next = 11;\n            break;\n          }\n          throw new AuthSdkError('Unable to find issuer');\n        case 11:\n          _context.next = 13;\n          return getWellKnown(sdk, issuer);\n        case 13:\n          _yield$getWellKnown = _context.sent;\n          introspectUrl = _yield$getWellKnown.introspection_endpoint;\n          authHeader = clientSecret ? b(\"\".concat(clientId, \":\").concat(clientSecret)) : b(clientId);\n          args = toQueryString({\n            token_type_hint: hintMap[kind],\n            token: token[kind]\n          }).slice(1);\n          return _context.abrupt(\"return\", post(sdk, introspectUrl, args, {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Authorization': 'Basic ' + authHeader\n            }\n          }));\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _oidcIntrospect.apply(this, arguments);\n}\nexport { oidcIntrospect };","map":{"version":3,"names":["hintMap","accessToken","idToken","refreshToken","oidcIntrospect","_x","_x2","_x3","_oidcIntrospect","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sdk","kind","token","_a","issuer","clientId","clientSecret","_yield$getWellKnown","introspectUrl","authHeader","args","wrap","_callee$","_context","prev","next","options","tokenManager","getTokens","AuthSdkError","concat","TokenKind","ACCESS","claims","iss","getWellKnown","sent","introspection_endpoint","b","toQueryString","token_type_hint","slice","abrupt","post","headers","stop"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/introspect.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { AuthSdkError } from '../errors';\nimport { getWellKnown } from './endpoints/well-known';\nimport { post } from '../http';\nimport { toQueryString } from '../util';\nimport { btoa } from '../crypto';\nimport { Token, TokenKind } from './types';\n\nconst hintMap = {\n  accessToken: 'access_token',\n  idToken: 'id_token',\n  refreshToken: 'refresh_token'\n};\n\n/* eslint complexity: [2, 9] */\nexport async function oidcIntrospect (sdk, kind: TokenKind, token?: Token) {\n  let issuer: string;\n  let clientId: string = sdk.options.clientId;\n  let clientSecret: string | undefined = sdk.options.clientSecret;\n\n  if (!token) {\n    token = sdk.tokenManager.getTokens()[kind];\n  }\n\n  if (!token) {\n    throw new AuthSdkError(`unable to find ${kind} in storage or fn params`);\n  }\n\n  if (kind !== TokenKind.ACCESS) {\n    issuer = (token as any)?.issuer;\n  }\n  else {\n    issuer = (token as any)?.claims?.iss;\n  }\n  issuer ??= sdk.options.issuer;\n\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to introspect a token');\n  }\n  if (!issuer) {\n    throw new AuthSdkError('Unable to find issuer');\n  }\n\n  const { introspection_endpoint: introspectUrl }  = await getWellKnown(sdk, issuer);\n  const authHeader = clientSecret ? btoa(`${clientId}:${clientSecret}`) : btoa(clientId);\n  const args = toQueryString({\n    // eslint-disable-next-line camelcase\n    token_type_hint: hintMap[kind],\n    token: token[kind]    // extract raw token string from token object\n  }).slice(1);\n  return post(sdk, introspectUrl, args, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + authHeader\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}