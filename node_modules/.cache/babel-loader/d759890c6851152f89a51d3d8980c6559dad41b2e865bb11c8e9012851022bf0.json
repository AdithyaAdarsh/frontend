{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport './types/Token.js';\nasync function renewTokens(sdk, options) {\n  var _a;\n  const tokens = (_a = options === null || options === void 0 ? void 0 : options.tokens) !== null && _a !== void 0 ? _a : sdk.tokenManager.getTokensSync();\n  if (tokens.refreshToken) {\n    return renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken);\n  }\n  if (!tokens.accessToken && !tokens.idToken) {\n    throw new AuthSdkError('renewTokens() was called but there is no existing token');\n  }\n  const accessToken = tokens.accessToken || {};\n  const idToken = tokens.idToken || {};\n  const scopes = accessToken.scopes || idToken.scopes;\n  if (!scopes) {\n    throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n  }\n  const authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n  if (!authorizeUrl) {\n    throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n  }\n  const userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n  const issuer = idToken.issuer || sdk.options.issuer;\n  options = Object.assign({\n    scopes,\n    authorizeUrl,\n    userinfoUrl,\n    issuer\n  }, options);\n  if (sdk.options.pkce) {\n    options.responseType = 'code';\n  } else {\n    const {\n      responseType\n    } = getDefaultTokenParams(sdk);\n    options.responseType = responseType;\n  }\n  return getWithoutPrompt(sdk, options).then(res => res.tokens);\n}\nexport { renewTokens };","map":{"version":3,"names":["renewTokens","sdk","options","tokens","_a","tokenManager","getTokensSync","refreshToken","renewTokensWithRefresh","accessToken","idToken","AuthSdkError","scopes","authorizeUrl","userinfoUrl","issuer","Object","assign","pkce","responseType","getDefaultTokenParams","getWithoutPrompt","then","res"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/renewTokens.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { RenewTokensParams, Tokens } from './types';\nimport { getWithoutPrompt } from './getWithoutPrompt';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh';\nimport { getDefaultTokenParams } from './util';\n\n// If we have a refresh token, renew using that, otherwise getWithoutPrompt\n// eslint-disable-next-line complexity\nexport async function renewTokens(sdk, options?: RenewTokensParams): Promise<Tokens> {\n  const tokens = options?.tokens ?? sdk.tokenManager.getTokensSync();\n  if (tokens.refreshToken) {\n    return renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken);\n  }\n\n  if (!tokens.accessToken && !tokens.idToken) {\n    throw new AuthSdkError('renewTokens() was called but there is no existing token');\n  }\n\n  const accessToken = tokens.accessToken || {};\n  const idToken = tokens.idToken || {};\n  const scopes = accessToken.scopes || idToken.scopes;\n  if (!scopes) {\n    throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n  }\n  const authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n  if (!authorizeUrl) {\n    throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n  }\n  const userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n  const issuer = idToken.issuer || sdk.options.issuer;\n\n  // Get tokens using the SSO cookie\n  options = Object.assign({\n    scopes,\n    authorizeUrl,\n    userinfoUrl,\n    issuer\n  }, options);\n\n  if (sdk.options.pkce) {\n    options.responseType = 'code';\n  } else {\n    const { responseType } = getDefaultTokenParams(sdk);\n    options.responseType = responseType;\n  }\n\n  return getWithoutPrompt(sdk, options)\n    .then(res => res.tokens);\n    \n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBO,eAAeA,WAAWA,CAACC,GAAG,EAAEC,OAA2B;;EAChE,MAAMC,MAAM,GAAG,CAAAC,EAAA,GAAAF,OAAO,aAAPA,OAAO,KAAP,kBAAAA,OAAO,CAAEC,MAAM,cAAAC,EAAA,cAAAA,EAAA,GAAIH,GAAG,CAACI,YAAY,CAACC,aAAa,EAAE;EAClE,IAAIH,MAAM,CAACI,YAAY,EAAE;IACvB,OAAOC,sBAAsB,CAACP,GAAG,EAAEC,OAAO,IAAI,EAAE,EAAEC,MAAM,CAACI,YAAY,CAAC;EACvE;EAED,IAAI,CAACJ,MAAM,CAACM,WAAW,IAAI,CAACN,MAAM,CAACO,OAAO,EAAE;IAC1C,MAAM,IAAIC,YAAY,CAAC,yDAAyD,CAAC;EAClF;EAED,MAAMF,WAAW,GAAGN,MAAM,CAACM,WAAW,IAAI,EAAE;EAC5C,MAAMC,OAAO,GAAGP,MAAM,CAACO,OAAO,IAAI,EAAE;EACpC,MAAME,MAAM,GAAGH,WAAW,CAACG,MAAM,IAAIF,OAAO,CAACE,MAAM;EACnD,IAAI,CAACA,MAAM,EAAE;IACX,MAAM,IAAID,YAAY,CAAC,oDAAoD,CAAC;EAC7E;EACD,MAAME,YAAY,GAAGJ,WAAW,CAACI,YAAY,IAAIH,OAAO,CAACG,YAAY;EACrE,IAAI,CAACA,YAAY,EAAE;IACjB,MAAM,IAAIF,YAAY,CAAC,0DAA0D,CAAC;EACnF;EACD,MAAMG,WAAW,GAAGL,WAAW,CAACK,WAAW,IAAIb,GAAG,CAACC,OAAO,CAACY,WAAW;EACtE,MAAMC,MAAM,GAAGL,OAAO,CAACK,MAAM,IAAId,GAAG,CAACC,OAAO,CAACa,MAAM;EAGnDb,OAAO,GAAGc,MAAM,CAACC,MAAM,CAAC;IACtBL,MAAM;IACNC,YAAY;IACZC,WAAW;IACXC;EACD,GAAEb,OAAO,CAAC;EAEX,IAAID,GAAG,CAACC,OAAO,CAACgB,IAAI,EAAE;IACpBhB,OAAO,CAACiB,YAAY,GAAG,MAAM;EAC9B,OAAM;IACL,MAAM;MAAEA;IAAY,CAAE,GAAGC,qBAAqB,CAACnB,GAAG,CAAC;IACnDC,OAAO,CAACiB,YAAY,GAAGA,YAAY;EACpC;EAED,OAAOE,gBAAgB,CAACpB,GAAG,EAAEC,OAAO,CAAC,CAClCoB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACpB,MAAM,CAAC;AAE5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}