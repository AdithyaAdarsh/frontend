{"ast":null,"code":"import _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { SelectAuthenticator } from './Base/SelectAuthenticator.js';\nvar SelectAuthenticatorUnlockAccount = /*#__PURE__*/function (_SelectAuthenticator) {\n  _inherits(SelectAuthenticatorUnlockAccount, _SelectAuthenticator);\n  var _super = _createSuper(SelectAuthenticatorUnlockAccount);\n  function SelectAuthenticatorUnlockAccount() {\n    var _this;\n    _classCallCheck(this, SelectAuthenticatorUnlockAccount);\n    _this = _super.apply(this, arguments);\n    _this.map = {\n      identifier: ['username']\n    };\n    return _this;\n  }\n  _createClass(SelectAuthenticatorUnlockAccount, [{\n    key: \"canRemediate\",\n    value: function canRemediate() {\n      var identifier = this.getData('identifier');\n      return !!identifier && _get(_getPrototypeOf(SelectAuthenticatorUnlockAccount.prototype), \"canRemediate\", this).call(this);\n    }\n  }, {\n    key: \"mapAuthenticator\",\n    value: function mapAuthenticator(remediationValue) {\n      var _a, _b, _c;\n      var authenticatorMap = _get(_getPrototypeOf(SelectAuthenticatorUnlockAccount.prototype), \"mapAuthenticator\", this).call(this, remediationValue);\n      var methodTypeOption = (_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.value.form.value.find(function (_ref) {\n        var name = _ref.name;\n        return name === 'methodType';\n      });\n      var methodTypeValue = this.values.methodType || (methodTypeOption === null || methodTypeOption === void 0 ? void 0 : methodTypeOption.value) || ((_c = (_b = methodTypeOption === null || methodTypeOption === void 0 ? void 0 : methodTypeOption.options) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value);\n      if (methodTypeValue) {\n        return Object.assign(Object.assign({}, authenticatorMap), {\n          methodType: methodTypeValue\n        });\n      }\n      return authenticatorMap;\n    }\n  }, {\n    key: \"getInputUsername\",\n    value: function getInputUsername() {\n      return {\n        name: 'username',\n        type: 'string'\n      };\n    }\n  }]);\n  return SelectAuthenticatorUnlockAccount;\n}(SelectAuthenticator);\nSelectAuthenticatorUnlockAccount.remediationName = 'select-authenticator-unlock-account';\nexport { SelectAuthenticatorUnlockAccount };","map":{"version":3,"names":["SelectAuthenticatorUnlockAccount","_SelectAuthenticator","_inherits","_super","_createSuper","_this","_classCallCheck","map","identifier","_createClass","key","value","canRemediate","getData","_get","_getPrototypeOf","prototype","call","mapAuthenticator","remediationValue","authenticatorMap","methodTypeOption","_a","selectedOption","form","find","_ref","name","methodTypeValue","values","methodType","_c","_b","options","Object","assign","getInputUsername","type","SelectAuthenticator","remediationName"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/SelectAuthenticatorUnlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { Authenticator } from '../types';\nimport { IdxRemediationValue } from '../types/idx-js';\n\n\nexport type SelectAuthenticatorUnlockAccountValues = SelectAuthenticatorValues & {\n  identifier?: string;\n  methodType?: string;\n};\n\nexport class SelectAuthenticatorUnlockAccount extends SelectAuthenticator<SelectAuthenticatorUnlockAccountValues> {\n  static remediationName = 'select-authenticator-unlock-account';\n  authenticator?: Authenticator;\n\n  map = {\n    identifier: ['username']\n  };\n\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = this.selectedOption?.value.form.value.find(({ name }) => name === 'methodType');\n\n    // defaults to 'manually defined' value\n    // 2nd: option may have pre-defined value, like stateHandle\n    // 3rd: if only a single OV option is available, default to that option\n    const methodTypeValue = this.values.methodType ||\n      methodTypeOption?.value as string || methodTypeOption?.options?.[0]?.value as string;\n\n    if (methodTypeValue) {\n      return {\n        ...authenticatorMap,\n        methodType: methodTypeValue\n      };\n    }\n\n    return authenticatorMap;\n  }\n\n  getInputUsername () {\n    return { name: 'username', type: 'string' };\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;IAuBaA,gCAAiC,0BAAAC,oBAAA;EAAAC,SAAA,CAAAF,gCAAA,EAAAC,oBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gCAAA;EAA9C,SAAAA,iCAAA;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,gCAAA;;IAIEK,KAAA,CAAAE,GAAG,GAAG;MACJC,UAAU,EAAE,CAAC,UAAU;KACxB;IAAC,OAAAH,KAAA;EA+BH;EAAAI,YAAA,CAAAT,gCAAA;IAAAU,GAAA;IAAAC,KAAA,EA7BC,SAAAC,aAAA,EAAY;MACV,IAAMJ,UAAU,GAAG,IAAI,CAACK,OAAO,CAAC,YAAY,CAAC;MAC7C,OAAO,CAAC,CAACL,UAAU,IAAAM,IAAA,CAAAC,eAAA,CAAAf,gCAAA,CAAAgB,SAAA,yBAAAC,IAAA,MAAwB;IAC5C;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAED,SAAAO,iBAAiBC,gBAAqC;;MACpD,IAAMC,gBAAgB,GAAAN,IAAA,CAAAC,eAAA,CAAAf,gCAAA,CAAAgB,SAAA,6BAAAC,IAAA,OAA0BE,gBAAgB,CAAC;MACjE,IAAME,gBAAgB,GAAG,CAAAC,EAAA,OAAI,CAACC,cAAc,cAAAD,EAAA,uBAAAA,EAAA,CAAEX,KAAK,CAACa,IAAI,CAACb,KAAK,CAACc,IAAI,CAAC,UAAAC,IAAA;QAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;QAAA,OAAOA,IAAI,KAAK,YAAY;MAAA,EAAC;MAKxG,IAAMC,eAAe,GAAG,IAAI,CAACC,MAAM,CAACC,UAAU,KAC5CT,gBAAgB,aAAhBA,gBAAgB,KAAhB,kBAAAA,gBAAgB,CAAEV,KAAe,MAAI,CAAAoB,EAAA,IAAAC,EAAA,GAAAX,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEY,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAEpB,KAAe;MAEtF,IAAIiB,eAAe,EAAE;QACnB,OAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKf,gBAAgB;UACnBU,UAAU,EAAEF;QAAe,CAC3B;MACH;MAED,OAAOR,gBAAgB;IACxB;EAAA;IAAAV,GAAA;IAAAC,KAAA,EAED,SAAAyB,iBAAA,EAAgB;MACd,OAAO;QAAET,IAAI,EAAE,UAAU;QAAEU,IAAI,EAAE;MAAQ,CAAE;IAC5C;EAAA;EAAA,OAAArC,gCAAA;AAAA,EAnCmDsC,mBAA2D;AACxGtC,gCAAe,CAAAuC,eAAA,GAAG,qCAAqC"},"metadata":{},"sourceType":"module","externalDependencies":[]}