{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { compareAuthenticators } from '../../authenticator/util.js';\nclass AuthenticatorData extends Remediator {\n  constructor(remediation, values = {}) {\n    super(remediation, values);\n    this.authenticator = this.getAuthenticator();\n    this.formatAuthenticatorData();\n  }\n  formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData.push(data);\n      }\n    }\n  }\n  getAuthenticatorData() {\n    return this.values.authenticatorsData.find(data => compareAuthenticators(this.authenticator, data));\n  }\n  canRemediate() {\n    return this.values.authenticatorsData.some(data => compareAuthenticators(this.authenticator, data));\n  }\n  mapAuthenticatorDataFromValues(authenticatorData) {\n    let {\n      methodType,\n      authenticator\n    } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n      methodType = authenticator === null || authenticator === void 0 ? void 0 : authenticator.methodType;\n    }\n    const {\n      id,\n      enrollmentId\n    } = this.authenticator;\n    const data = Object.assign(Object.assign({\n      id,\n      enrollmentId\n    }, authenticatorData && authenticatorData), methodType && {\n      methodType\n    });\n    return data.methodType ? data : null;\n  }\n  getAuthenticatorFromRemediation() {\n    const authenticator = this.remediation.value.find(({\n      name\n    }) => name === 'authenticator');\n    return authenticator;\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticatorsData = this.values.authenticatorsData.filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return Object.assign(Object.assign({}, this.values), {\n      authenticatorsData\n    });\n  }\n}\nexport { AuthenticatorData };","map":{"version":3,"names":["AuthenticatorData","Remediator","constructor","remediation","values","authenticator","getAuthenticator","formatAuthenticatorData","authenticatorData","getAuthenticatorData","authenticatorsData","map","data","compareAuthenticators","mapAuthenticatorDataFromValues","push","find","canRemediate","some","methodType","isAuthenticator","id","enrollmentId","Object","assign","getAuthenticatorFromRemediation","value","name","getValuesAfterProceed","filter"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/Base/AuthenticatorData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { IdxRemediationValue, IdxRemediation, IdxAuthenticator } from '../../types/idx-js';\nimport { isAuthenticator } from '../../types/api';\nimport { compareAuthenticators } from '../../authenticator/util';\n\nexport type AuthenticatorDataValues = RemediationValues & {\n  methodType?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class AuthenticatorData<T extends AuthenticatorDataValues = AuthenticatorDataValues> extends Remediator<T> {\n  authenticator: IdxAuthenticator;\n\n  constructor(remediation: IdxRemediation, values: T = {} as T) {\n    super(remediation, values);\n\n    // set before other data calculation\n    this.authenticator = this.getAuthenticator()!;\n\n    this.formatAuthenticatorData();\n  }\n\n  protected formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData!.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData!.push(data);\n      }\n    }\n  }\n\n  protected getAuthenticatorData() {\n    return this.values.authenticatorsData!\n      .find((data) => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData!\n      .some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  protected mapAuthenticatorDataFromValues(authenticatorData?) {\n    // add methodType to authenticatorData if it exists in values\n    let { methodType, authenticator } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n     methodType = authenticator?.methodType;\n    }\n    \n    const { id, enrollmentId } = this.authenticator;\n    const data = { \n      id,\n      enrollmentId,\n      ...(authenticatorData && authenticatorData),\n      ...(methodType && { methodType }) \n    };\n\n    return data.methodType ? data : null;\n  }\n\n  protected getAuthenticatorFromRemediation(): IdxRemediationValue {\n    const authenticator = this.remediation.value!\n      .find(({ name }) => name === 'authenticator') as IdxRemediationValue;\n    return authenticator;\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticatorData\n    const authenticatorsData = this.values.authenticatorsData!\n      .filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return { ...this.values, authenticatorsData };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAuBM,MAAOA,iBAA+E,SAAQC,UAAa;EAG/GC,WAAYA,CAAAC,WAA2B,EAAEC,MAAA,GAAY,EAAO;IAC1D,KAAK,CAACD,WAAW,EAAEC,MAAM,CAAC;IAG1B,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAG;IAE7C,IAAI,CAACC,uBAAuB,EAAE;EAC/B;EAESA,uBAAuBA,CAAA;IAC/B,MAAMC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;IACrD,IAAID,iBAAiB,EAAE;MACrB,IAAI,CAACJ,MAAM,CAACM,kBAAkB,GAAG,IAAI,CAACN,MAAM,CAACM,kBAAmB,CAACC,GAAG,CAACC,IAAI,IAAG;QAC1E,IAAIC,qBAAqB,CAAC,IAAI,CAACR,aAAa,EAAEO,IAAI,CAAC,EAAE;UACnD,OAAO,IAAI,CAACE,8BAA8B,CAACF,IAAI,CAAC;QACjD;QACD,OAAOA,IAAI;MACb,CAAC,CAAC;IACH,OAAM;MACL,MAAMA,IAAI,GAAG,IAAI,CAACE,8BAA8B,EAAE;MAClD,IAAIF,IAAI,EAAE;QACR,IAAI,CAACR,MAAM,CAACM,kBAAmB,CAACK,IAAI,CAACH,IAAI,CAAC;MAC3C;IACF;EACF;EAESH,oBAAoBA,CAAA;IAC5B,OAAO,IAAI,CAACL,MAAM,CAACM,kBAAmB,CACnCM,IAAI,CAAEJ,IAAI,IAAKC,qBAAqB,CAAC,IAAI,CAACR,aAAa,EAAEO,IAAI,CAAC,CAAC;EACnE;EAEDK,YAAYA,CAAA;IACV,OAAO,IAAI,CAACb,MAAM,CAACM,kBAAmB,CACnCQ,IAAI,CAACN,IAAI,IAAIC,qBAAqB,CAAC,IAAI,CAACR,aAAa,EAAEO,IAAI,CAAC,CAAC;EACjE;EAESE,8BAA8BA,CAACN,iBAAkB;IAEzD,IAAI;MAAEW,UAAU;MAAEd;IAAa,CAAE,GAAG,IAAI,CAACD,MAAM;IAC/C,IAAI,CAACe,UAAU,IAAIC,eAAe,CAACf,aAAa,CAAC,EAAE;MAClDc,UAAU,GAAGd,aAAa,KAAb,QAAAA,aAAa,uBAAbA,aAAa,CAAEc,UAAU;IACtC;IAED,MAAM;MAAEE,EAAE;MAAEC;IAAY,CAAE,GAAG,IAAI,CAACjB,aAAa;IAC/C,MAAMO,IAAI,GAAAW,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;MACRH,EAAE;MACFC;IAAY,CACT,EAACd,iBAAiB,IAAIA,iBAAiB,CAAC,EACvCW,UAAU,IAAI;MAAEA;IAAU,CAAE,CACjC;IAED,OAAOP,IAAI,CAACO,UAAU,GAAGP,IAAI,GAAG,IAAI;EACrC;EAESa,+BAA+BA,CAAA;IACvC,MAAMpB,aAAa,GAAG,IAAI,CAACF,WAAW,CAACuB,KAAM,CAC1CV,IAAI,CAAC,CAAC;MAAEW;IAAM,MAAKA,IAAI,KAAK,eAAe,CAAwB;IACtE,OAAOtB,aAAa;EACrB;EAEDuB,qBAAqBA,CAAA;IACnB,IAAI,CAACxB,MAAM,GAAG,KAAK,CAACwB,qBAAqB,EAAE;IAE3C,MAAMlB,kBAAkB,GAAG,IAAI,CAACN,MAAM,CAACM,kBAAmB,CACvDmB,MAAM,CAACjB,IAAI,IAAIC,qBAAqB,CAAC,IAAI,CAACR,aAAa,EAAEO,IAAI,CAAC,KAAK,IAAI,CAAC;IAC3E,OAAAW,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAY,IAAI,CAACpB,MAAM;MAAEM;IAAkB,CAAG;EAC/C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}