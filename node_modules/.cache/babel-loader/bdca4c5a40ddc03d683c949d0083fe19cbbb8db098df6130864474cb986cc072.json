{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { proceed } from './proceed.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport { warn } from '../util/console.js';\nasync function poll(authClient, options = {}) {\n  var _a;\n  let transaction = await proceed(authClient, {\n    startPolling: true\n  });\n  const meta = getSavedTransactionMeta(authClient);\n  let availablePollingRemeditaions = (_a = meta === null || meta === void 0 ? void 0 : meta.remediations) === null || _a === void 0 ? void 0 : _a.find(remediation => remediation.includes('poll'));\n  if (!(availablePollingRemeditaions === null || availablePollingRemeditaions === void 0 ? void 0 : availablePollingRemeditaions.length)) {\n    warn('No polling remediations available at the current IDX flow stage');\n  }\n  if (Number.isInteger(options.refresh)) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(async function () {\n        var _a, _b;\n        try {\n          const refresh = (_b = (_a = transaction.nextStep) === null || _a === void 0 ? void 0 : _a.poll) === null || _b === void 0 ? void 0 : _b.refresh;\n          if (refresh) {\n            resolve(poll(authClient, {\n              refresh\n            }));\n          } else {\n            resolve(transaction);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      }, options.refresh);\n    });\n  }\n  return transaction;\n}\nexport { poll };","map":{"version":3,"names":["poll","authClient","options","transaction","proceed","startPolling","meta","getSavedTransactionMeta","availablePollingRemeditaions","_a","remediations","find","remediation","includes","length","warn","Number","isInteger","refresh","Promise","resolve","reject","setTimeout","_b","nextStep","err"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/poll.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { proceed } from './proceed';\n\nimport { \n  IdxPollOptions,\n  IdxTransaction,\n  OktaAuthIdxInterface,\n} from './types';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { warn } from '../util';\n\nexport async function poll(authClient: OktaAuthIdxInterface, options: IdxPollOptions = {}): Promise<IdxTransaction> {\n  let transaction = await proceed(authClient, {\n    startPolling: true\n  });\n\n  const meta = getSavedTransactionMeta(authClient);\n  let availablePollingRemeditaions = meta?.remediations?.find(remediation => remediation.includes('poll'));\n  if (!availablePollingRemeditaions?.length) {\n    warn('No polling remediations available at the current IDX flow stage');\n  }\n\n  if (Number.isInteger(options.refresh)) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(async function () {\n        try {\n          const refresh = transaction.nextStep?.poll?.refresh;\n          if (refresh) {\n            resolve(poll(authClient, {\n              refresh\n            }));\n          } else {\n            resolve(transaction);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      }, options.refresh);\n    });\n  }\n\n  return transaction;\n}\n"],"mappings":";;;;;;;;;;;;;;;AAsBO,eAAeA,IAAIA,CAACC,UAAgC,EAAEC,OAAA,GAA0B,EAAE;;EACvF,IAAIC,WAAW,GAAG,MAAMC,OAAO,CAACH,UAAU,EAAE;IAC1CI,YAAY,EAAE;EACf,EAAC;EAEF,MAAMC,IAAI,GAAGC,uBAAuB,CAACN,UAAU,CAAC;EAChD,IAAIO,4BAA4B,GAAG,CAAAC,EAAA,GAAAH,IAAI,aAAJA,IAAI,KAAJ,kBAAAA,IAAI,CAAEI,YAAY,MAAE,QAAAD,EAAA,uBAAAA,EAAA,CAAAE,IAAI,CAACC,WAAW,IAAIA,WAAW,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAC;EACxG,IAAI,EAACL,4BAA4B,KAA5B,QAAAA,4BAA4B,uBAA5BA,4BAA4B,CAAEM,MAAM,GAAE;IACzCC,IAAI,CAAC,iEAAiE,CAAC;EACxE;EAED,IAAIC,MAAM,CAACC,SAAS,CAACf,OAAO,CAACgB,OAAO,CAAC,EAAE;IACrC,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM;MAC1CC,UAAU,CAAC,kBAAK;;QACd,IAAI;UACF,MAAMJ,OAAO,GAAG,CAAAK,EAAA,IAAAd,EAAA,GAAAN,WAAW,CAACqB,QAAQ,MAAE,QAAAf,EAAA,uBAAAA,EAAA,CAAAT,IAAI,MAAE,QAAAuB,EAAA,uBAAAA,EAAA,CAAAL,OAAO;UACnD,IAAIA,OAAO,EAAE;YACXE,OAAO,CAACpB,IAAI,CAACC,UAAU,EAAE;cACvBiB;YACD,EAAC,CAAC;UACJ,OAAM;YACLE,OAAO,CAACjB,WAAW,CAAC;UACrB;QACF,EAAC,OAAOsB,GAAG,EAAE;UACZJ,MAAM,CAACI,GAAG,CAAC;QACZ;MACH,CAAC,EAAEvB,OAAO,CAACgB,OAAO,CAAC;IACrB,CAAC,CAAC;EACH;EAED,OAAOf,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}