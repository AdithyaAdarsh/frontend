{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { Remediator } from '../Base/Remediator.js';\nimport { unwrapFormValue } from './util.js';\nclass GenericRemediator extends Remediator {\n  canRemediate() {\n    if (typeof this.remediation.action !== 'function') {\n      return false;\n    }\n    if (this.remediation.name === 'poll' || this.remediation.name.endsWith('-poll')) {\n      return true;\n    }\n    if (this.options.step) {\n      return true;\n    }\n    return false;\n  }\n  getData() {\n    const data = this.getInputs().reduce((acc, {\n      name\n    }) => {\n      acc[name] = this.values[name];\n      return acc;\n    }, {});\n    return data;\n  }\n  getNextStep(authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const _a = this.remediation,\n      {\n        href,\n        method,\n        rel,\n        accepts,\n        produces,\n        value,\n        action\n      } = _a,\n      rest = __rest(_a, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\", \"value\", \"action\"]);\n    if (action) {\n      return Object.assign(Object.assign(Object.assign({}, rest), !!inputs.length && {\n        inputs\n      }), {\n        action: async params => {\n          return authClient.idx.proceed(Object.assign({\n            step: name\n          }, params));\n        }\n      });\n    }\n    return Object.assign({}, this.remediation);\n  }\n  getInputs() {\n    return (this.remediation.value || []).filter(({\n      name\n    }) => name !== 'stateHandle').map(unwrapFormValue).map(input => {\n      input.type = input.type || 'string';\n      return input;\n    });\n  }\n}\nexport { GenericRemediator };","map":{"version":3,"names":["GenericRemediator","Remediator","canRemediate","remediation","action","name","endsWith","options","step","getData","data","getInputs","reduce","acc","values","getNextStep","authClient","_context","getName","inputs","_a","href","method","rel","accepts","produces","value","rest","__rest","Object","assign","length","params","idx","proceed","filter","map","unwrapFormValue","input","type"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/GenericRemediator/GenericRemediator.ts"],"sourcesContent":["import { OktaAuthIdxInterface, IdxContext, NextStep, Input } from '../../types';\nimport { Remediator } from '../Base/Remediator';\nimport { unwrapFormValue } from './util';\n\nexport class GenericRemediator extends Remediator {\n  canRemediate(): boolean {\n    // only handle remediations that are able to submit form (xhr)\n    if (typeof this.remediation.action !== 'function') {\n      return false;\n    }\n\n    // DO NOT REMOVE - bring it back when enable client side validation for GenericRemediator - OKTA-512003\n    // const inputs = this.getInputs();\n    // const res = inputs.reduce((acc, input) => {\n    //   return acc && hasValidInputValue(input, this.values);\n    // }, true);\n    // return res;\n\n    if (this.remediation.name === 'poll' || this.remediation.name.endsWith('-poll')) {\n      return true;\n    }\n\n    if (this.options.step) {\n      return true;\n    }\n    \n    // disable auto proceed for unknown remediations\n    return false;\n  }\n\n  getData() {\n    const data = this.getInputs().reduce((acc, { name }) => {\n      acc[name] = this.values[name];\n      return acc;\n    }, {});\n    return data;\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    \n    /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n    // excludes transformed fields\n    const { \n      // http metas have been transformed to action\n      href, \n      method, \n      rel, \n      accepts, \n      produces, \n      // value has been transform to inputs\n      value,\n      // will be transformed to a function that resolves IdxTransaction\n      action,\n      ...rest \n    } = this.remediation;\n    /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n\n    // step to handle form submission\n    if (action) {\n      return { \n        ...rest,\n        ...(!!inputs.length && { inputs }),\n        action: async (params?) => {\n          return authClient.idx.proceed({\n            step: name,\n            ...params\n          });\n        }\n      };\n    }\n\n    // return whole remediation data for other steps, eg \"redirect-idp\"\n    return { ...this.remediation } as NextStep;\n    \n  }\n\n  getInputs(): Input[] {\n    return (this.remediation.value || [])\n      .filter(({ name }) => name !== 'stateHandle')\n      .map(unwrapFormValue)\n      .map(input => {\n        // use string as default input type\n        input.type = input.type || 'string';\n        return input;\n      });\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;AAIM,MAAOA,iBAAkB,SAAQC,UAAU;EAC/CC,YAAYA,CAAA;IAEV,IAAI,OAAO,IAAI,CAACC,WAAW,CAACC,MAAM,KAAK,UAAU,EAAE;MACjD,OAAO,KAAK;IACb;IASD,IAAI,IAAI,CAACD,WAAW,CAACE,IAAI,KAAK,MAAM,IAAI,IAAI,CAACF,WAAW,CAACE,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC/E,OAAO,IAAI;IACZ;IAED,IAAI,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE;MACrB,OAAO,IAAI;IACZ;IAGD,OAAO,KAAK;EACb;EAEDC,OAAOA,CAAA;IACL,MAAMC,IAAI,GAAG,IAAI,CAACC,SAAS,CAAE,EAACC,MAAM,CAAC,CAACC,GAAG,EAAE;MAAER;IAAI,CAAE,KAAI;MACrDQ,GAAG,CAACR,IAAI,CAAC,GAAG,IAAI,CAACS,MAAM,CAACT,IAAI,CAAC;MAC7B,OAAOQ,GAAG;IACX,GAAE,CAAE,EAAC;IACN,OAAOH,IAAI;EACZ;EAEDK,WAAWA,CAACC,UAAgC,EAAEC,QAAqB;IACjE,MAAMZ,IAAI,GAAG,IAAI,CAACa,OAAO,EAAE;IAC3B,MAAMC,MAAM,GAAG,IAAI,CAACR,SAAS,EAAE;IAI/B,MAAMS,EAYF,OAAI,CAACjB,WAAW;MAZd;QAEJkB,IAAI;QACJC,MAAM;QACNC,GAAG;QACHC,OAAO;QACPC,QAAQ;QAERC,KAAK;QAELtB;MAAM,IAAAgB,EAEY;MADfO,IAAI,GAXHC,MAAA,CAAAR,EAAA,qEAYL,CAAmB;IAIpB,IAAIhB,MAAM,EAAE;MACV,OACKyB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAH,IAAI,GACH,CAAC,CAACR,MAAM,CAACY,MAAM,IAAI;QAAEZ;MAAQ;QACjCf,MAAM,EAAE,MAAO4B,MAAO,IAAI;UACxB,OAAOhB,UAAU,CAACiB,GAAG,CAACC,OAAO,CAAAL,MAAA,CAAAC,MAAA;YAC3BtB,IAAI,EAAEH;UAAI,GACP2B,MAAM,EACT;QACH;MAAA,CACD;IACH;IAGD,OAAOH,MAAK,CAAAC,MAAA,SAAI,CAAC3B,WAAW,CAAc;EAE3C;EAEDQ,SAASA,CAAA;IACP,OAAO,CAAC,IAAI,CAACR,WAAW,CAACuB,KAAK,IAAI,EAAE,EACjCS,MAAM,CAAC,CAAC;MAAE9B;IAAI,CAAE,KAAKA,IAAI,KAAK,aAAa,CAAC,CAC5C+B,GAAG,CAACC,eAAe,CAAC,CACpBD,GAAG,CAACE,KAAK,IAAG;MAEXA,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACC,IAAI,IAAI,QAAQ;MACnC,OAAOD,KAAK;IACd,CAAC,CAAC;EACL;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}