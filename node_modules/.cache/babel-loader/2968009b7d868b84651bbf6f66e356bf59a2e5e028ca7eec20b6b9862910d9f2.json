{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { SelectAuthenticator } from './Base/SelectAuthenticator.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\nimport { AuthenticatorKey } from '../types/api.js';\nclass SelectAuthenticatorAuthenticate extends SelectAuthenticator {\n  constructor(remediation, values = {}, options = {}) {\n    var _a;\n    super(remediation, values, options);\n    const isRecoveryFlow = this.options.flow === 'recoverPassword';\n    const hasPasswordInOptions = (_a = getAuthenticatorFromRemediation(remediation).options) === null || _a === void 0 ? void 0 : _a.some(({\n      relatesTo\n    }) => (relatesTo === null || relatesTo === void 0 ? void 0 : relatesTo.key) === AuthenticatorKey.OKTA_PASSWORD);\n    if (hasPasswordInOptions && (isRecoveryFlow || this.values.password)) {\n      this.values.authenticators = [...(this.values.authenticators || []), {\n        key: AuthenticatorKey.OKTA_PASSWORD\n      }];\n    }\n  }\n}\nSelectAuthenticatorAuthenticate.remediationName = 'select-authenticator-authenticate';\nexport { SelectAuthenticatorAuthenticate };","map":{"version":3,"names":["SelectAuthenticatorAuthenticate","SelectAuthenticator","constructor","remediation","values","options","isRecoveryFlow","flow","hasPasswordInOptions","_a","getAuthenticatorFromRemediation","some","relatesTo","key","AuthenticatorKey","OKTA_PASSWORD","password","authenticators","remediationName"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/SelectAuthenticatorAuthenticate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { getAuthenticatorFromRemediation } from './util';\nimport { IdxRemediation } from '../types/idx-js';\nimport { AuthenticatorKey, Authenticator, RemediateOptions } from '../types';\n\nexport type SelectAuthenticatorAuthenticateValues = SelectAuthenticatorValues & {\n  password?: string;\n};\n\nexport class SelectAuthenticatorAuthenticate extends SelectAuthenticator<SelectAuthenticatorAuthenticateValues> {\n  static remediationName = 'select-authenticator-authenticate';\n\n  constructor(\n    remediation: IdxRemediation, \n    values: SelectAuthenticatorValues = {}, \n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values, options);\n\n    // Preset password authenticator to trigger recover action\n    const isRecoveryFlow = this.options.flow === 'recoverPassword';\n    const hasPasswordInOptions = getAuthenticatorFromRemediation(remediation)\n      .options?.some(({ relatesTo }) => relatesTo?.key === AuthenticatorKey.OKTA_PASSWORD);\n    if (hasPasswordInOptions && (isRecoveryFlow || this.values.password)) {\n      this.values.authenticators = [\n        ...this.values.authenticators || [],\n        { key: AuthenticatorKey.OKTA_PASSWORD }\n      ] as Authenticator[];\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAsBM,MAAOA,+BAAgC,SAAQC,mBAA0D;EAG7GC,YACEC,WAA2B,EAC3BC,MAAA,GAAoC,EAAE,EACtCC,OAAA,GAA4B,EAAE;;IAE9B,KAAK,CAACF,WAAW,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAGnC,MAAMC,cAAc,GAAG,IAAI,CAACD,OAAO,CAACE,IAAI,KAAK,iBAAiB;IAC9D,MAAMC,oBAAoB,GAAG,CAAAC,EAAA,GAAAC,+BAA+B,CAACP,WAAW,CAAC,CACtEE,OAAO,cAAAI,EAAA,uBAAAA,EAAA,CAAEE,IAAI,CAAC,CAAC;MAAEC;IAAW,MAAK,CAAAA,SAAS,KAAT,QAAAA,SAAS,KAAT,kBAAAA,SAAS,CAAEC,GAAG,MAAKC,gBAAgB,CAACC,aAAa,CAAC;IACtF,IAAIP,oBAAoB,KAAKF,cAAc,IAAI,IAAI,CAACF,MAAM,CAACY,QAAQ,CAAC,EAAE;MACpE,IAAI,CAACZ,MAAM,CAACa,cAAc,GAAG,CAC3B,IAAG,IAAI,CAACb,MAAM,CAACa,cAAc,IAAI,EAAE,GACnC;QAAEJ,GAAG,EAAEC,gBAAgB,CAACC;MAAe,EACrB;IACrB;EACF;;AAnBMf,+BAAe,CAAAkB,eAAA,GAAG,mCAAmC"},"metadata":{},"sourceType":"module","externalDependencies":[]}