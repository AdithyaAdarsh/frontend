{"ast":null,"code":"import _classCallCheck from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { compareAuthenticators } from '../../authenticator/util.js';\nvar AuthenticatorData = /*#__PURE__*/function (_Remediator) {\n  _inherits(AuthenticatorData, _Remediator);\n  var _super = _createSuper(AuthenticatorData);\n  function AuthenticatorData(remediation) {\n    var _this;\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, AuthenticatorData);\n    _this = _super.call(this, remediation, values);\n    _this.authenticator = _this.getAuthenticator();\n    _this.formatAuthenticatorData();\n    return _this;\n  }\n  _createClass(AuthenticatorData, [{\n    key: \"formatAuthenticatorData\",\n    value: function formatAuthenticatorData() {\n      var _this2 = this;\n      var authenticatorData = this.getAuthenticatorData();\n      if (authenticatorData) {\n        this.values.authenticatorsData = this.values.authenticatorsData.map(function (data) {\n          if (compareAuthenticators(_this2.authenticator, data)) {\n            return _this2.mapAuthenticatorDataFromValues(data);\n          }\n          return data;\n        });\n      } else {\n        var data = this.mapAuthenticatorDataFromValues();\n        if (data) {\n          this.values.authenticatorsData.push(data);\n        }\n      }\n    }\n  }, {\n    key: \"getAuthenticatorData\",\n    value: function getAuthenticatorData() {\n      var _this3 = this;\n      return this.values.authenticatorsData.find(function (data) {\n        return compareAuthenticators(_this3.authenticator, data);\n      });\n    }\n  }, {\n    key: \"canRemediate\",\n    value: function canRemediate() {\n      var _this4 = this;\n      return this.values.authenticatorsData.some(function (data) {\n        return compareAuthenticators(_this4.authenticator, data);\n      });\n    }\n  }, {\n    key: \"mapAuthenticatorDataFromValues\",\n    value: function mapAuthenticatorDataFromValues(authenticatorData) {\n      var _this$values = this.values,\n        methodType = _this$values.methodType,\n        authenticator = _this$values.authenticator;\n      if (!methodType && isAuthenticator(authenticator)) {\n        methodType = authenticator === null || authenticator === void 0 ? void 0 : authenticator.methodType;\n      }\n      var _this$authenticator = this.authenticator,\n        id = _this$authenticator.id,\n        enrollmentId = _this$authenticator.enrollmentId;\n      var data = Object.assign(Object.assign({\n        id: id,\n        enrollmentId: enrollmentId\n      }, authenticatorData && authenticatorData), methodType && {\n        methodType: methodType\n      });\n      return data.methodType ? data : null;\n    }\n  }, {\n    key: \"getAuthenticatorFromRemediation\",\n    value: function getAuthenticatorFromRemediation() {\n      var authenticator = this.remediation.value.find(function (_ref) {\n        var name = _ref.name;\n        return name === 'authenticator';\n      });\n      return authenticator;\n    }\n  }, {\n    key: \"getValuesAfterProceed\",\n    value: function getValuesAfterProceed() {\n      var _this5 = this;\n      this.values = _get(_getPrototypeOf(AuthenticatorData.prototype), \"getValuesAfterProceed\", this).call(this);\n      var authenticatorsData = this.values.authenticatorsData.filter(function (data) {\n        return compareAuthenticators(_this5.authenticator, data) !== true;\n      });\n      return Object.assign(Object.assign({}, this.values), {\n        authenticatorsData: authenticatorsData\n      });\n    }\n  }]);\n  return AuthenticatorData;\n}(Remediator);\nexport { AuthenticatorData };","map":{"version":3,"names":["AuthenticatorData","_Remediator","_inherits","_super","_createSuper","remediation","_this","values","arguments","length","undefined","_classCallCheck","call","authenticator","getAuthenticator","formatAuthenticatorData","_createClass","key","value","_this2","authenticatorData","getAuthenticatorData","authenticatorsData","map","data","compareAuthenticators","mapAuthenticatorDataFromValues","push","_this3","find","canRemediate","_this4","some","_this$values","methodType","isAuthenticator","_this$authenticator","id","enrollmentId","Object","assign","getAuthenticatorFromRemediation","_ref","name","getValuesAfterProceed","_this5","_get","_getPrototypeOf","prototype","filter","Remediator"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/Base/AuthenticatorData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { IdxRemediationValue, IdxRemediation, IdxAuthenticator } from '../../types/idx-js';\nimport { isAuthenticator } from '../../types/api';\nimport { compareAuthenticators } from '../../authenticator/util';\n\nexport type AuthenticatorDataValues = RemediationValues & {\n  methodType?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class AuthenticatorData<T extends AuthenticatorDataValues = AuthenticatorDataValues> extends Remediator<T> {\n  authenticator: IdxAuthenticator;\n\n  constructor(remediation: IdxRemediation, values: T = {} as T) {\n    super(remediation, values);\n\n    // set before other data calculation\n    this.authenticator = this.getAuthenticator()!;\n\n    this.formatAuthenticatorData();\n  }\n\n  protected formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData!.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData!.push(data);\n      }\n    }\n  }\n\n  protected getAuthenticatorData() {\n    return this.values.authenticatorsData!\n      .find((data) => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData!\n      .some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  protected mapAuthenticatorDataFromValues(authenticatorData?) {\n    // add methodType to authenticatorData if it exists in values\n    let { methodType, authenticator } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n     methodType = authenticator?.methodType;\n    }\n    \n    const { id, enrollmentId } = this.authenticator;\n    const data = { \n      id,\n      enrollmentId,\n      ...(authenticatorData && authenticatorData),\n      ...(methodType && { methodType }) \n    };\n\n    return data.methodType ? data : null;\n  }\n\n  protected getAuthenticatorFromRemediation(): IdxRemediationValue {\n    const authenticator = this.remediation.value!\n      .find(({ name }) => name === 'authenticator') as IdxRemediationValue;\n    return authenticator;\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticatorData\n    const authenticatorsData = this.values.authenticatorsData!\n      .filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return { ...this.values, authenticatorsData };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;IAuBaA,iBAA+E,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,iBAAA;EAG1F,SAAAA,kBAAYK,WAA2B,EAAqB;IAAA,IAAAC,KAAA;IAAA,IAAnBC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAY,EAAO;IAAAG,eAAA,OAAAX,iBAAA;IAC1DM,KAAA,GAAAH,MAAA,CAAAS,IAAA,OAAMP,WAAW,EAAEE,MAAM;IAGzBD,KAAA,CAAKO,aAAa,GAAGP,KAAA,CAAKQ,gBAAgB,EAAG;IAE7CR,KAAA,CAAKS,uBAAuB,EAAE;IAAC,OAAAT,KAAA;EAChC;EAAAU,YAAA,CAAAhB,iBAAA;IAAAiB,GAAA;IAAAC,KAAA,EAES,SAAAH,wBAAA,EAAuB;MAAA,IAAAI,MAAA;MAC/B,IAAMC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;MACrD,IAAID,iBAAiB,EAAE;QACrB,IAAI,CAACb,MAAM,CAACe,kBAAkB,GAAG,IAAI,CAACf,MAAM,CAACe,kBAAmB,CAACC,GAAG,CAAC,UAAAC,IAAI,EAAG;UAC1E,IAAIC,qBAAqB,CAACN,MAAI,CAACN,aAAa,EAAEW,IAAI,CAAC,EAAE;YACnD,OAAOL,MAAI,CAACO,8BAA8B,CAACF,IAAI,CAAC;UACjD;UACD,OAAOA,IAAI;QACb,CAAC,CAAC;MACH,OAAM;QACL,IAAMA,IAAI,GAAG,IAAI,CAACE,8BAA8B,EAAE;QAClD,IAAIF,IAAI,EAAE;UACR,IAAI,CAACjB,MAAM,CAACe,kBAAmB,CAACK,IAAI,CAACH,IAAI,CAAC;QAC3C;MACF;IACF;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAES,SAAAG,qBAAA,EAAoB;MAAA,IAAAO,MAAA;MAC5B,OAAO,IAAI,CAACrB,MAAM,CAACe,kBAAmB,CACnCO,IAAI,CAAC,UAACL,IAAI;QAAA,OAAKC,qBAAqB,CAACG,MAAI,CAACf,aAAa,EAAEW,IAAI,CAAC;MAAA,EAAC;IACnE;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAED,SAAAY,aAAA,EAAY;MAAA,IAAAC,MAAA;MACV,OAAO,IAAI,CAACxB,MAAM,CAACe,kBAAmB,CACnCU,IAAI,CAAC,UAAAR,IAAI;QAAA,OAAIC,qBAAqB,CAACM,MAAI,CAAClB,aAAa,EAAEW,IAAI,CAAC;MAAA,EAAC;IACjE;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAES,SAAAQ,+BAA+BN,iBAAkB;MAEzD,IAAAa,YAAA,GAAoC,IAAI,CAAC1B,MAAM;QAAzC2B,UAAU,GAAAD,YAAA,CAAVC,UAAU;QAAErB,aAAa,GAAAoB,YAAA,CAAbpB,aAAa;MAC/B,IAAI,CAACqB,UAAU,IAAIC,eAAe,CAACtB,aAAa,CAAC,EAAE;QAClDqB,UAAU,GAAGrB,aAAa,KAAb,QAAAA,aAAa,uBAAbA,aAAa,CAAEqB,UAAU;MACtC;MAED,IAAAE,mBAAA,GAA6B,IAAI,CAACvB,aAAa;QAAvCwB,EAAE,GAAAD,mBAAA,CAAFC,EAAE;QAAEC,YAAY,GAAAF,mBAAA,CAAZE,YAAY;MACxB,IAAMd,IAAI,GAAAe,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;QACRH,EAAE,EAAFA,EAAE;QACFC,YAAY,EAAZA;MAAY,CACT,EAAClB,iBAAiB,IAAIA,iBAAiB,CAAC,EACvCc,UAAU,IAAI;QAAEA,UAAU,EAAVA;MAAU,CAAE,CACjC;MAED,OAAOV,IAAI,CAACU,UAAU,GAAGV,IAAI,GAAG,IAAI;IACrC;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAES,SAAAuB,gCAAA,EAA+B;MACvC,IAAM5B,aAAa,GAAG,IAAI,CAACR,WAAW,CAACa,KAAM,CAC1CW,IAAI,CAAC,UAAAa,IAAA;QAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;QAAA,OAAOA,IAAI,KAAK,eAAe;MAAA,EAAwB;MACtE,OAAO9B,aAAa;IACrB;EAAA;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAA0B,sBAAA,EAAqB;MAAA,IAAAC,MAAA;MACnB,IAAI,CAACtC,MAAM,GAAAuC,IAAA,CAAAC,eAAA,CAAA/C,iBAAA,CAAAgD,SAAA,kCAAApC,IAAA,MAAgC;MAE3C,IAAMU,kBAAkB,GAAG,IAAI,CAACf,MAAM,CAACe,kBAAmB,CACvD2B,MAAM,CAAC,UAAAzB,IAAI;QAAA,OAAIC,qBAAqB,CAACoB,MAAI,CAAChC,aAAa,EAAEW,IAAI,CAAC,KAAK,IAAI;MAAA,EAAC;MAC3E,OAAAe,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAY,IAAI,CAACjC,MAAM;QAAEe,kBAAkB,EAAlBA;MAAkB,CAAG;IAC/C;EAAA;EAAA,OAAAtB,iBAAA;AAAA,EArEiGkD,UAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}