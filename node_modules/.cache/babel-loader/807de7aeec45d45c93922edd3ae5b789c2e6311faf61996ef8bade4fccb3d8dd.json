{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { warn } from '../util/console.js';\nimport { isBrowser } from '../features.js';\nimport { IDX_RESPONSE_STORAGE_NAME } from '../constants.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { SavedObject } from '../storage/SavedObject.js';\nimport { createCoreStorageManager } from '../core/storage.js';\nfunction createIdxStorageManager() {\n  const CoreStorageManager = createCoreStorageManager();\n  return class IdxStorageManager extends CoreStorageManager {\n    constructor(storageManagerOptions, cookieOptions, storageUtil) {\n      super(storageManagerOptions, cookieOptions, storageUtil);\n    }\n    getIdxResponseStorage(options) {\n      let storage;\n      if (isBrowser()) {\n        try {\n          storage = this.storageUtil.getStorageByType('memory', options);\n        } catch (e) {\n          warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n        }\n      } else {\n        const transactionStorage = this.getTransactionStorage(options);\n        if (transactionStorage) {\n          storage = {\n            getItem: key => {\n              const transaction = transactionStorage.getStorage();\n              if (transaction && transaction[key]) {\n                return transaction[key];\n              }\n              return null;\n            },\n            setItem: (key, val) => {\n              const transaction = transactionStorage.getStorage();\n              if (!transaction) {\n                throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n              }\n              transaction[key] = val;\n              transactionStorage.setStorage(transaction);\n            },\n            removeItem: key => {\n              const transaction = transactionStorage.getStorage();\n              if (!transaction) {\n                return;\n              }\n              delete transaction[key];\n              transactionStorage.setStorage(transaction);\n            }\n          };\n        }\n      }\n      if (!storage) {\n        return null;\n      }\n      return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n    }\n  };\n}\nexport { createIdxStorageManager };","map":{"version":3,"names":["createIdxStorageManager","CoreStorageManager","createCoreStorageManager","IdxStorageManager","constructor","storageManagerOptions","cookieOptions","storageUtil","getIdxResponseStorage","options","storage","isBrowser","getStorageByType","e","warn","transactionStorage","getTransactionStorage","getItem","key","transaction","getStorage","setItem","val","AuthSdkError","setStorage","removeItem","SavedObject","IDX_RESPONSE_STORAGE_NAME"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/storage.ts"],"sourcesContent":["import { CookieOptions, StorageManagerOptions, StorageOptions, StorageUtil } from '../storage/types';\nimport {  IdxTransactionMeta } from './types';\nimport { SavedObject } from '../storage';\nimport { IDX_RESPONSE_STORAGE_NAME } from '../constants';\nimport { createCoreStorageManager } from '../core/storage';\nimport { IdxResponseStorage } from './types/storage';\nimport { isBrowser } from '../features';\nimport { warn } from '../util';\nimport AuthSdkError from '../errors/AuthSdkError';\n\nexport function createIdxStorageManager<M extends IdxTransactionMeta>()\n{\n  const CoreStorageManager = createCoreStorageManager<M>();\n  return class IdxStorageManager extends CoreStorageManager\n  {\n    constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n      super(storageManagerOptions, cookieOptions, storageUtil);\n    }\n\n    // intermediate idxResponse\n    // store for network traffic optimazation purpose\n    // TODO: revisit in auth-js 6.0 epic JIRA: OKTA-399791\n    getIdxResponseStorage(options?: StorageOptions): IdxResponseStorage | null {\n      let storage;\n      if (isBrowser()) {\n        // on browser side only use memory storage \n        try {\n          storage = this.storageUtil.getStorageByType('memory', options);\n        } catch (e) {\n          // it's ok to miss response storage\n          // eslint-disable-next-line max-len\n          warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n        }\n      } else {\n        // on server side re-use transaction custom storage\n        const transactionStorage = this.getTransactionStorage(options);\n        if (transactionStorage) {\n          storage = {\n            getItem: (key) => {\n              const transaction = transactionStorage.getStorage();\n              if (transaction && transaction[key]) {\n                return transaction[key];\n              }\n              return null;\n            },\n            setItem: (key, val) => {\n              const transaction = transactionStorage.getStorage();\n              if (!transaction) {\n                throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n              }\n              transaction[key] = val;\n              transactionStorage.setStorage(transaction);\n            },\n            removeItem: (key) => {\n              const transaction = transactionStorage.getStorage();\n              if (!transaction) {\n                return;\n              }\n              delete transaction[key];\n              transactionStorage.setStorage(transaction);\n            }\n          };\n        }\n      }\n\n      if (!storage) {\n        return null;\n      }\n\n      return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;SAUgBA,uBAAuBA,CAAA;EAErC,MAAMC,kBAAkB,GAAGC,wBAAwB,EAAK;EACxD,OAAO,MAAMC,iBAAkB,SAAQF,kBAAkB;IAEvDG,YAAYC,qBAA4C,EAAEC,aAA4B,EAAEC,WAAwB;MAC9G,KAAK,CAACF,qBAAqB,EAAEC,aAAa,EAAEC,WAAW,CAAC;IACzD;IAKDC,qBAAqBA,CAACC,OAAwB;MAC5C,IAAIC,OAAO;MACX,IAAIC,SAAS,EAAE,EAAE;QAEf,IAAI;UACFD,OAAO,GAAG,IAAI,CAACH,WAAW,CAACK,gBAAgB,CAAC,QAAQ,EAAEH,OAAO,CAAC;QAC/D,EAAC,OAAOI,CAAC,EAAE;UAGVC,IAAI,CAAC,yIAAyI,CAAC;QAChJ;MACF,OAAM;QAEL,MAAMC,kBAAkB,GAAG,IAAI,CAACC,qBAAqB,CAACP,OAAO,CAAC;QAC9D,IAAIM,kBAAkB,EAAE;UACtBL,OAAO,GAAG;YACRO,OAAO,EAAGC,GAAG,IAAI;cACf,MAAMC,WAAW,GAAGJ,kBAAkB,CAACK,UAAU,EAAE;cACnD,IAAID,WAAW,IAAIA,WAAW,CAACD,GAAG,CAAC,EAAE;gBACnC,OAAOC,WAAW,CAACD,GAAG,CAAC;cACxB;cACD,OAAO,IAAI;YACZ;YACDG,OAAO,EAAEA,CAACH,GAAG,EAAEI,GAAG,KAAI;cACpB,MAAMH,WAAW,GAAGJ,kBAAkB,CAACK,UAAU,EAAE;cACnD,IAAI,CAACD,WAAW,EAAE;gBAChB,MAAM,IAAII,YAAY,CAAC,uDAAuD,CAAC;cAChF;cACDJ,WAAW,CAACD,GAAG,CAAC,GAAGI,GAAG;cACtBP,kBAAkB,CAACS,UAAU,CAACL,WAAW,CAAC;YAC3C;YACDM,UAAU,EAAGP,GAAG,IAAI;cAClB,MAAMC,WAAW,GAAGJ,kBAAkB,CAACK,UAAU,EAAE;cACnD,IAAI,CAACD,WAAW,EAAE;gBAChB;cACD;cACD,OAAOA,WAAW,CAACD,GAAG,CAAC;cACvBH,kBAAkB,CAACS,UAAU,CAACL,WAAW,CAAC;YAC3C;WACF;QACF;MACF;MAED,IAAI,CAACT,OAAO,EAAE;QACZ,OAAO,IAAI;MACZ;MAED,OAAO,IAAIgB,WAAW,CAAChB,OAAO,EAAEiB,yBAAyB,CAAC;IAC3D;GACF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}