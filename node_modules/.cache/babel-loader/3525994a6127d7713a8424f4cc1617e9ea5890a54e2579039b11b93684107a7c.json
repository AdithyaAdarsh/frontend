{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { isAuthenticator } from '../types/api.js';\nfunction formatAuthenticator(incoming) {\n  var authenticator;\n  if (isAuthenticator(incoming)) {\n    authenticator = incoming;\n  } else if (typeof incoming === 'string') {\n    authenticator = {\n      key: incoming\n    };\n  } else {\n    throw new Error('Invalid format for authenticator');\n  }\n  return authenticator;\n}\nfunction compareAuthenticators(auth1, auth2) {\n  if (!auth1 || !auth2) {\n    return false;\n  }\n  if (auth1.id && auth2.id) {\n    return auth1.id === auth2.id;\n  }\n  if (auth1.key && auth2.key) {\n    return auth1.key === auth2.key;\n  }\n  return false;\n}\nfunction findMatchedOption(authenticators, options) {\n  var option;\n  var _iterator = _createForOfIteratorHelper(authenticators),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var authenticator = _step.value;\n      option = options.find(function (_ref) {\n        var relatesTo = _ref.relatesTo;\n        return relatesTo.key && relatesTo.key === authenticator.key;\n      });\n      if (option) {\n        return \"break\";\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n      if (_ret === \"break\") break;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return option;\n}\nexport { compareAuthenticators, findMatchedOption, formatAuthenticator };","map":{"version":3,"names":["formatAuthenticator","incoming","authenticator","isAuthenticator","key","Error","compareAuthenticators","auth1","auth2","id","findMatchedOption","authenticators","options","option","_iterator","_createForOfIteratorHelper","_step","_loop","value","find","_ref","relatesTo","s","n","done","_ret","err","e","f"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/authenticator/util.ts"],"sourcesContent":["import { Authenticator, isAuthenticator } from '../types';\n\nexport function formatAuthenticator(incoming: unknown): Authenticator {\n  let authenticator: Authenticator;\n  if  (isAuthenticator(incoming)) {\n    authenticator = incoming;\n  } else if (typeof incoming === 'string') {\n    authenticator = {\n      key: incoming\n    };\n  } else {\n    throw new Error('Invalid format for authenticator');\n  }\n  return authenticator;\n}\n\n// Returns true if the authenticators are equivalent\nexport function compareAuthenticators(auth1, auth2) {\n  if (!auth1 || !auth2) {\n    return false;\n  }\n  // by id\n  if (auth1.id && auth2.id) {\n    return (auth1.id === auth2.id);\n  }\n  // by key\n  if (auth1.key && auth2.key) {\n    return (auth1.key === auth2.key);\n  }\n  return false;\n}\n\n// Find matched authenticator in provided order\nexport function findMatchedOption(authenticators, options) {\n  let option;\n  for (let authenticator of authenticators) {\n    option = options\n      .find(({ relatesTo }) => relatesTo.key && relatesTo.key === authenticator.key);\n    if (option) {\n      break;\n    }\n  }\n  return option;\n}"],"mappings":";;;;;;;;;;;;;;AAEM,SAAUA,mBAAmBA,CAACC,QAAiB;EACnD,IAAIC,aAA4B;EAChC,IAAKC,eAAe,CAACF,QAAQ,CAAC,EAAE;IAC9BC,aAAa,GAAGD,QAAQ;EACzB,OAAM,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IACvCC,aAAa,GAAG;MACdE,GAAG,EAAEH;KACN;EACF,OAAM;IACL,MAAM,IAAII,KAAK,CAAC,kCAAkC,CAAC;EACpD;EACD,OAAOH,aAAa;AACtB;AAGgB,SAAAI,qBAAqBA,CAACC,KAAK,EAAEC,KAAK;EAChD,IAAI,CAACD,KAAK,IAAI,CAACC,KAAK,EAAE;IACpB,OAAO,KAAK;EACb;EAED,IAAID,KAAK,CAACE,EAAE,IAAID,KAAK,CAACC,EAAE,EAAE;IACxB,OAAQF,KAAK,CAACE,EAAE,KAAKD,KAAK,CAACC,EAAE;EAC9B;EAED,IAAIF,KAAK,CAACH,GAAG,IAAII,KAAK,CAACJ,GAAG,EAAE;IAC1B,OAAQG,KAAK,CAACH,GAAG,KAAKI,KAAK,CAACJ,GAAG;EAChC;EACD,OAAO,KAAK;AACd;AAGgB,SAAAM,iBAAiBA,CAACC,cAAc,EAAEC,OAAO;EACvD,IAAIC,MAAM;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CACeJ,cAAc;IAAAK,KAAA;EAAA;IAAA,IAAAC,KAAA,YAAAA,MAAA,EAAE;MAAA,IAAjCf,aAAa,GAAAc,KAAA,CAAAE,KAAA;MACpBL,MAAM,GAAGD,OAAO,CACbO,IAAI,CAAC,UAAAC,IAAA;QAAA,IAAGC,SAAS,GAAAD,IAAA,CAATC,SAAS;QAAA,OAAOA,SAAS,CAACjB,GAAG,IAAIiB,SAAS,CAACjB,GAAG,KAAKF,aAAa,CAACE,GAAG;MAAA,EAAC;MAChF,IAAIS,MAAM,EAAE;QAAA;MAEX;IACF;IAND,KAAAC,SAAA,CAAAQ,CAAA,MAAAN,KAAA,GAAAF,SAAA,CAAAS,CAAA,IAAAC,IAAA;MAAA,IAAAC,IAAA,GAAAR,KAAA;MAAA,IAAAQ,IAAA,cAII;IAAM;EAET,SAAAC,GAAA;IAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA;EAAA;IAAAZ,SAAA,CAAAc,CAAA;EAAA;EACD,OAAOf,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}