{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\nimport { OktaPassword } from '../authenticator/OktaPassword.js';\nimport '../types/api.js';\nclass EnrollProfile extends Remediator {\n  constructor(remediation, values = {}, options = {}) {\n    super(remediation, values, options);\n    this.authenticator = null;\n    const credentials = this.getCredentialsFromRemediation();\n    if (credentials) {\n      this.authenticator = this.authenticator = new OktaPassword({});\n    }\n  }\n  canRemediate() {\n    if (this.authenticator && !this.authenticator.canVerify(this.values)) {\n      return false;\n    }\n    const userProfileFromValues = this.getData().userProfile;\n    if (!userProfileFromValues) {\n      return false;\n    }\n    const userProfileFromRemediation = this.remediation.value.find(({\n      name\n    }) => name === 'userProfile');\n    return userProfileFromRemediation.form.value.reduce((canRemediate, curr) => {\n      if (curr.required) {\n        canRemediate = canRemediate && !!userProfileFromValues[curr.name];\n      }\n      return canRemediate;\n    }, true);\n  }\n  getCredentialsFromRemediation() {\n    return this.remediation.value.find(({\n      name\n    }) => name === 'credentials');\n  }\n  mapUserProfile({\n    form: {\n      value: profileAttributes\n    }\n  }) {\n    const attributeNames = profileAttributes.map(({\n      name\n    }) => name);\n    const data = attributeNames.reduce((attributeValues, attributeName) => this.values[attributeName] ? Object.assign(Object.assign({}, attributeValues), {\n      [attributeName]: this.values[attributeName]\n    }) : attributeValues, {});\n    if (Object.keys(data).length === 0) {\n      return;\n    }\n    return data;\n  }\n  mapCredentials() {\n    const val = this.authenticator && this.authenticator.mapCredentials(this.values);\n    if (!val) {\n      return;\n    }\n    return val;\n  }\n  getInputUserProfile(input) {\n    return [...input.form.value];\n  }\n  getInputCredentials(input) {\n    return [...input.form.value];\n  }\n  getErrorMessages(errorRemediation) {\n    return errorRemediation.value[0].form.value.reduce((errors, field) => {\n      if (field.messages) {\n        errors.push(field.messages.value[0].message);\n      }\n      return errors;\n    }, []);\n  }\n}\nEnrollProfile.remediationName = 'enroll-profile';\nexport { EnrollProfile };","map":{"version":3,"names":["EnrollProfile","Remediator","constructor","remediation","values","options","authenticator","credentials","getCredentialsFromRemediation","OktaPassword","canRemediate","canVerify","userProfileFromValues","getData","userProfile","userProfileFromRemediation","value","find","name","form","reduce","curr","required","mapUserProfile","profileAttributes","attributeNames","map","data","attributeValues","attributeName","Object","assign","keys","length","mapCredentials","val","getInputUserProfile","input","getInputCredentials","getErrorMessages","errorRemediation","errors","field","messages","push","message","remediationName"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/EnrollProfile.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { IdxRemediation, IdxRemediationValue, IdxAuthenticator } from '../types/idx-js';\nimport { RemediateOptions } from '../types';\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { Authenticator, Credentials, OktaPassword } from '../authenticator';\n\nexport interface EnrollProfileValues extends RemediationValues {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  credentials?: Credentials;\n  password?: string;\n  passcode?: string;\n}\n\nexport class EnrollProfile extends Remediator<EnrollProfileValues> {\n  static remediationName = 'enroll-profile';\n\n  authenticator: Authenticator<any> | null = null;\n\n  constructor(\n    remediation: IdxRemediation,\n    values: EnrollProfileValues = {},\n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values, options);\n\n    // credentials are only required when Profile Enrollment policy requires them\n    // if credentials are included in the remediation, they are considered required\n    // otherwise it will be omitted\n    const credentials = this.getCredentialsFromRemediation();\n    if (credentials) {\n      this.authenticator = this.authenticator = new OktaPassword({} as IdxAuthenticator);\n    }\n  }\n\n  canRemediate() {\n    // ensure credentials can be verified, if required\n    if (this.authenticator && !this.authenticator.canVerify(this.values)) {\n      return false;\n    }\n\n    const userProfileFromValues = this.getData().userProfile;\n    if (!userProfileFromValues) {\n      return false;\n    }\n    // eslint-disable-next-line max-len\n    const userProfileFromRemediation = this.remediation.value!.find(({ name }) => name === 'userProfile') as IdxRemediationValue;\n    return userProfileFromRemediation.form!.value.reduce((canRemediate, curr) => {\n      if (curr.required) {\n        canRemediate = canRemediate && !!userProfileFromValues[curr.name];\n      }\n      return canRemediate;\n    }, true);\n  }\n\n  getCredentialsFromRemediation () {\n    return this.remediation.value!.find(({ name }) => name === 'credentials');\n  }\n\n  mapUserProfile({form: { value: profileAttributes }}) {\n    const attributeNames = profileAttributes.map(({name}) => name);\n    const data = attributeNames.reduce((attributeValues, attributeName) => (\n      this.values[attributeName] ? {\n      ...attributeValues,\n      [attributeName]: this.values[attributeName]\n    } : attributeValues), {});\n    if (Object.keys(data).length === 0) {\n      return;\n    }\n    return data;\n  }\n\n  mapCredentials() {\n    const val = this.authenticator && this.authenticator.mapCredentials(this.values);\n    if (!val) {\n      return;\n    }\n    return val;\n  }\n\n  getInputUserProfile(input) {\n    return [...input.form.value];\n  }\n\n  getInputCredentials(input) {\n    return [...input.form.value];\n  }\n\n  getErrorMessages(errorRemediation) {\n    return errorRemediation.value[0].form.value.reduce((errors, field) => {\n      if (field.messages) {\n        errors.push(field.messages.value[0].message);\n      }\n      return errors;\n    }, []);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}