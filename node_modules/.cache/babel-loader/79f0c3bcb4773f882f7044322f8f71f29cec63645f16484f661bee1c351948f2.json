{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { SelectAuthenticator } from './Base/SelectAuthenticator.js';\nclass SelectAuthenticatorUnlockAccount extends SelectAuthenticator {\n  constructor() {\n    super(...arguments);\n    this.map = {\n      identifier: ['username']\n    };\n  }\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n  mapAuthenticator(remediationValue) {\n    var _a, _b, _c;\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = (_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.value.form.value.find(({\n      name\n    }) => name === 'methodType');\n    const methodTypeValue = this.values.methodType || (methodTypeOption === null || methodTypeOption === void 0 ? void 0 : methodTypeOption.value) || ((_c = (_b = methodTypeOption === null || methodTypeOption === void 0 ? void 0 : methodTypeOption.options) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value);\n    if (methodTypeValue) {\n      return Object.assign(Object.assign({}, authenticatorMap), {\n        methodType: methodTypeValue\n      });\n    }\n    return authenticatorMap;\n  }\n  getInputUsername() {\n    return {\n      name: 'username',\n      type: 'string'\n    };\n  }\n}\nSelectAuthenticatorUnlockAccount.remediationName = 'select-authenticator-unlock-account';\nexport { SelectAuthenticatorUnlockAccount };","map":{"version":3,"names":["SelectAuthenticatorUnlockAccount","SelectAuthenticator","constructor","map","identifier","canRemediate","getData","mapAuthenticator","remediationValue","authenticatorMap","methodTypeOption","_a","selectedOption","value","form","find","name","methodTypeValue","values","methodType","_c","_b","options","Object","assign","getInputUsername","type","remediationName"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/SelectAuthenticatorUnlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { Authenticator } from '../types';\nimport { IdxRemediationValue } from '../types/idx-js';\n\n\nexport type SelectAuthenticatorUnlockAccountValues = SelectAuthenticatorValues & {\n  identifier?: string;\n  methodType?: string;\n};\n\nexport class SelectAuthenticatorUnlockAccount extends SelectAuthenticator<SelectAuthenticatorUnlockAccountValues> {\n  static remediationName = 'select-authenticator-unlock-account';\n  authenticator?: Authenticator;\n\n  map = {\n    identifier: ['username']\n  };\n\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = this.selectedOption?.value.form.value.find(({ name }) => name === 'methodType');\n\n    // defaults to 'manually defined' value\n    // 2nd: option may have pre-defined value, like stateHandle\n    // 3rd: if only a single OV option is available, default to that option\n    const methodTypeValue = this.values.methodType ||\n      methodTypeOption?.value as string || methodTypeOption?.options?.[0]?.value as string;\n\n    if (methodTypeValue) {\n      return {\n        ...authenticatorMap,\n        methodType: methodTypeValue\n      };\n    }\n\n    return authenticatorMap;\n  }\n\n  getInputUsername () {\n    return { name: 'username', type: 'string' };\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;AAuBM,MAAOA,gCAAiC,SAAQC,mBAA2D;EAAjHC,YAAA;;IAIE,KAAAC,GAAG,GAAG;MACJC,UAAU,EAAE,CAAC,UAAU;KACxB;EA+BF;EA7BCC,YAAYA,CAAA;IACV,MAAMD,UAAU,GAAG,IAAI,CAACE,OAAO,CAAC,YAAY,CAAC;IAC7C,OAAO,CAAC,CAACF,UAAU,IAAI,KAAK,CAACC,YAAY,EAAE;EAC5C;EAEDE,gBAAgBA,CAACC,gBAAqC;;IACpD,MAAMC,gBAAgB,GAAG,KAAK,CAACF,gBAAgB,CAACC,gBAAgB,CAAC;IACjE,MAAME,gBAAgB,GAAG,CAAAC,EAAA,OAAI,CAACC,cAAc,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,KAAK,CAACC,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC;MAAEC;IAAM,MAAKA,IAAI,KAAK,YAAY,CAAC;IAKxG,MAAMC,eAAe,GAAG,IAAI,CAACC,MAAM,CAACC,UAAU,KAC5CT,gBAAgB,aAAhBA,gBAAgB,KAAhB,kBAAAA,gBAAgB,CAAEG,KAAe,MAAI,CAAAO,EAAA,IAAAC,EAAA,GAAAX,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEY,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAEP,KAAe;IAEtF,IAAII,eAAe,EAAE;MACnB,OAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKf,gBAAgB;QACnBU,UAAU,EAAEF;MAAe,CAC3B;IACH;IAED,OAAOR,gBAAgB;EACxB;EAEDgB,gBAAgBA,CAAA;IACd,OAAO;MAAET,IAAI,EAAE,UAAU;MAAEU,IAAI,EAAE;IAAQ,CAAE;EAC5C;;AAlCM1B,gCAAe,CAAA2B,eAAA,GAAG,qCAAqC"},"metadata":{},"sourceType":"module","externalDependencies":[]}