{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticatorFromRemediation } from '../util.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { findMatchedOption, compareAuthenticators } from '../../authenticator/util.js';\nclass SelectAuthenticator extends Remediator {\n  findMatchedOption(authenticators, options) {\n    let option;\n    for (let authenticator of authenticators) {\n      option = options.find(({\n        relatesTo\n      }) => relatesTo.key && relatesTo.key === authenticator.key);\n      if (option) {\n        break;\n      }\n    }\n    return option;\n  }\n  canRemediate(context) {\n    var _a, _b;\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const {\n      options\n    } = authenticatorFromRemediation;\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n    const matchedOption = this.findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      const isCurrentAuthenticator = (context === null || context === void 0 ? void 0 : context.currentAuthenticator) && (context === null || context === void 0 ? void 0 : context.currentAuthenticator.value.id) === ((_a = matchedOption.relatesTo) === null || _a === void 0 ? void 0 : _a.id);\n      const isCurrentAuthenticatorEnrollment = (context === null || context === void 0 ? void 0 : context.currentAuthenticatorEnrollment) && (context === null || context === void 0 ? void 0 : context.currentAuthenticatorEnrollment.value.id) === ((_b = matchedOption.relatesTo) === null || _b === void 0 ? void 0 : _b.id);\n      return !isCurrentAuthenticator && !isCurrentAuthenticatorEnrollment;\n    }\n    return false;\n  }\n  mapAuthenticator(remediationValue) {\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator;\n      return authenticator;\n    }\n    const {\n      options\n    } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo;\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value.form.value.find(({\n        name\n      }) => name === 'id').value\n    };\n  }\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(({\n      label,\n      relatesTo\n    }) => {\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return {\n      name: 'authenticator',\n      type: 'string',\n      options\n    };\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticators = this.values.authenticators.filter(authenticator => {\n      return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n    });\n    return Object.assign(Object.assign({}, this.values), {\n      authenticators\n    });\n  }\n}\nexport { SelectAuthenticator };","map":{"version":3,"names":["SelectAuthenticator","Remediator","findMatchedOption","authenticators","options","option","authenticator","find","relatesTo","key","canRemediate","context","values","authenticatorFromRemediation","getAuthenticatorFromRemediation","remediation","length","isAuthenticator","id","matchedOption","isCurrentAuthenticator","currentAuthenticator","value","_a","isCurrentAuthenticatorEnrollment","currentAuthenticatorEnrollment","_b","mapAuthenticator","remediationValue","selectedAuthenticator","selectedOption","form","name","getInputAuthenticator","map","label","type","getValuesAfterProceed","filter","compareAuthenticators","Object","assign"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/remediators/Base/SelectAuthenticator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { getAuthenticatorFromRemediation } from '../util';\nimport { IdxRemediationValue, IdxContext, IdxOption } from '../../types/idx-js';\nimport { Authenticator, isAuthenticator } from '../../types/api';\nimport { compareAuthenticators, findMatchedOption} from '../../authenticator/util';\n\nexport type SelectAuthenticatorValues = RemediationValues & {\n  authenticator?: string | Authenticator;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class SelectAuthenticator<T extends SelectAuthenticatorValues = SelectAuthenticatorValues>\n  extends Remediator<T> {\n  selectedAuthenticator?: Authenticator;\n  selectedOption?: any;\n\n  // Find matched authenticator in provided order\n  findMatchedOption(authenticators, options) {\n    let option: IdxOption | undefined;\n    for (let authenticator of authenticators) {\n      option = options\n        .find(({ relatesTo }) => relatesTo.key && relatesTo.key === authenticator.key);\n      if (option) {\n        break;\n      }\n    }\n    return option;\n  }\n\n  /* eslint complexity:[0,9] */\n  canRemediate(context?: IdxContext) {\n    const { authenticators, authenticator } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const { options } = authenticatorFromRemediation;\n    // Let users select authenticator if no input is provided\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n\n    // Authenticator is explicitly specified by id\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n\n    // Proceed with provided authenticators\n    const matchedOption = this.findMatchedOption(authenticators, options!);\n    if (matchedOption) {\n      // Don't select current authenticator (OKTA-612939)\n      const isCurrentAuthenticator = context?.currentAuthenticator\n        && context?.currentAuthenticator.value.id === matchedOption.relatesTo?.id;\n      const isCurrentAuthenticatorEnrollment = context?.currentAuthenticatorEnrollment\n        && context?.currentAuthenticatorEnrollment.value.id === matchedOption.relatesTo?.id;\n      return !isCurrentAuthenticator && !isCurrentAuthenticatorEnrollment;\n    }\n    \n    return false;\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const { authenticators, authenticator } = this.values;\n\n    // Authenticator is explicitly specified by id\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator; // track the selected authenticator\n      return authenticator;\n    }\n\n    const { options } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo; // track the selected authenticator\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption?.value.form.value.find(({ name }) => name === 'id').value\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(({ label, relatesTo }) => {\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return { name: 'authenticator', type: 'string', options };\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticators\n    const authenticators = (this.values.authenticators as Authenticator[])\n      .filter(authenticator => {\n        return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n      });\n    return { ...this.values, authenticators };\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}