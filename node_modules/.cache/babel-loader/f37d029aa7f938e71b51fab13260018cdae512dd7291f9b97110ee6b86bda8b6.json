{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { __rest } from '../_virtual/_tslib.js';\nimport { warn } from '../util/console.js';\nimport { split2 } from '../util/misc.js';\nimport * as index from './remediators/index.js';\nimport { GenericRemediator } from './remediators/GenericRemediator/GenericRemediator.js';\nimport { IdxFeature } from './types/api.js';\nfunction isTerminalResponse(idxResponse) {\n  const {\n    neededToProceed,\n    interactionCode\n  } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\nfunction canSkipFn(idxResponse) {\n  return idxResponse.neededToProceed.some(({\n    name\n  }) => name === 'skip');\n}\nfunction canResendFn(idxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\nfunction getMessagesFromIdxRemediationValue(value) {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value];\n    }\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm];\n    }\n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n        optionValues = [...optionValues, option.value];\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions];\n    }\n    return messages;\n  }, []);\n}\nfunction getMessagesFromResponse(idxResponse, options) {\n  var _a;\n  let messages = [];\n  const {\n    rawIdxState,\n    neededToProceed\n  } = idxResponse;\n  const globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages];\n  }\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages];\n      }\n    }\n  }\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    var _a;\n    const key = (_a = message.i18n) === null || _a === void 0 ? void 0 : _a.key;\n    if (key && seen[key] && message.message === seen[key].message) {\n      return filtered;\n    }\n    seen[key] = message;\n    filtered = [...filtered, message];\n    return filtered;\n  }, []);\n  return messages;\n}\nfunction getEnabledFeatures(idxResponse) {\n  const res = [];\n  const {\n    actions,\n    neededToProceed\n  } = idxResponse;\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY);\n  }\n  if (neededToProceed.some(({\n    name\n  }) => name === 'select-enroll-profile')) {\n    res.push(IdxFeature.REGISTRATION);\n  }\n  if (neededToProceed.some(({\n    name\n  }) => name === 'redirect-idp')) {\n    res.push(IdxFeature.SOCIAL_IDP);\n  }\n  if (neededToProceed.some(({\n    name\n  }) => name === 'unlock-account')) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK);\n  }\n  return res;\n}\nfunction getAvailableSteps(authClient, idxResponse, useGenericRemediator) {\n  var _a;\n  const res = [];\n  const remediatorMap = Object.values(index).reduce((map, remediatorClass) => {\n    if (remediatorClass.remediationName) {\n      map[remediatorClass.remediationName] = remediatorClass;\n    }\n    return map;\n  }, {});\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, {\n      useGenericRemediator,\n      remediators: remediatorMap\n    });\n    if (T) {\n      const remediator = new T(remediation);\n      res.push(remediator.getNextStep(authClient, idxResponse.context));\n    }\n  }\n  for (const [name] of Object.entries(idxResponse.actions || {})) {\n    let stepObj = {\n      name,\n      action: async params => {\n        return authClient.idx.proceed({\n          actions: [{\n            name,\n            params\n          }]\n        });\n      }\n    };\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n      const rest = __rest(actionObj, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\"]);\n      const value = (_a = actionObj.value) === null || _a === void 0 ? void 0 : _a.filter(item => item.name !== 'stateHandle');\n      stepObj = Object.assign(Object.assign(Object.assign({}, rest), value && {\n        value\n      }), stepObj);\n    }\n    res.push(stepObj);\n  }\n  return res;\n}\nfunction filterValuesForRemediation(idxResponse, remediationName, values) {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n  if (!remediation) {\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n  const valuesForRemediation = remediation.value.reduce((res, entry) => {\n    const {\n      name,\n      value\n    } = entry;\n    if (name === 'stateHandle') {\n      res[name] = value;\n    } else {\n      res[name] = values[name];\n    }\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\nfunction getRemediatorClass(remediation, options) {\n  const {\n    useGenericRemediator,\n    remediators\n  } = options;\n  if (!remediation) {\n    return undefined;\n  }\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n  return remediators[remediation.name];\n}\nfunction getRemediator(idxResponse, values, options) {\n  const remediators = options.remediators;\n  const useGenericRemediator = options.useGenericRemediator;\n  const {\n    neededToProceed: idxRemediations,\n    context\n  } = idxResponse;\n  let remediator;\n  if (options.step) {\n    const remediation = idxRemediations.find(({\n      name\n    }) => name === options.step);\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n  const remediatorCandidates = [];\n  if (useGenericRemediator) {\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators).includes(remediation.name);\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n      const T = getRemediatorClass(remediation, options);\n      remediator = new T(remediation, values, options);\n      if (remediator.canRemediate(context)) {\n        return remediator;\n      }\n      remediatorCandidates.push(remediator);\n    }\n  }\n  return remediatorCandidates[0];\n}\nfunction getNextStep(authClient, remediator, idxResponse) {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return Object.assign(Object.assign(Object.assign({}, nextStep), canSkip && {\n    canSkip\n  }), canResend && {\n    canResend\n  });\n}\nfunction handleFailedResponse(authClient, idxResponse, options = {}) {\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n  if (terminal) {\n    return {\n      idxResponse,\n      terminal,\n      messages\n    };\n  } else {\n    const remediator = getRemediator(idxResponse, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return Object.assign({\n      idxResponse,\n      messages\n    }, nextStep && {\n      nextStep\n    });\n  }\n}\nexport { canResendFn, canSkipFn, filterValuesForRemediation, getAvailableSteps, getEnabledFeatures, getMessagesFromIdxRemediationValue, getMessagesFromResponse, getNextStep, getRemediator, handleFailedResponse, isTerminalResponse };","map":{"version":3,"names":["isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","name","canResendFn","Object","keys","actions","actionName","includes","getMessagesFromIdxRemediationValue","value","Array","isArray","reduce","messages","form","messagesFromForm","options","optionValues","forEach","option","messagesFromOptions","getMessagesFromResponse","rawIdxState","globalMessages","_a","map","message","useGenericRemediator","remediation","fieldMessages","seen","filtered","key","i18n","getEnabledFeatures","res","push","IdxFeature","PASSWORD_RECOVERY","REGISTRATION","SOCIAL_IDP","ACCOUNT_UNLOCK","getAvailableSteps","authClient","remediatorMap","values","index","remediatorClass","remediationName","T","getRemediatorClass","remediators","remediator","getNextStep","context","entries","stepObj","action","params","idx","proceed","startsWith","part1","part2","split2","actionObj","rest","__rest","filter","item","assign","filterValuesForRemediation","remediations","find","r","warn","valuesForRemediation","entry","undefined","GenericRemediator","getRemediator","idxRemediations","step","remediatorCandidates","isRemeditionInFlow","canRemediate","nextStep","canSkip","canResend","handleFailedResponse","terminal"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/util.ts"],"sourcesContent":["import { warn, split2 } from '../util';\nimport * as remediators from './remediators';\nimport { RemediationValues, Remediator, RemediatorConstructor } from './remediators';\nimport { GenericRemediator } from './remediators/GenericRemediator';\nimport { OktaAuthIdxInterface, IdxFeature, NextStep, RemediateOptions, RemediationResponse, RunOptions } from './types';\nimport { IdxMessage, IdxRemediation, IdxRemediationValue, IdxResponse } from './types/idx-js';\n\nexport function isTerminalResponse(idxResponse: IdxResponse) {\n  const { neededToProceed, interactionCode } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nexport function canSkipFn(idxResponse: IdxResponse) {\n  return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\n\nexport function canResendFn(idxResponse: IdxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nexport function getMessagesFromIdxRemediationValue(\n  value?: IdxRemediationValue[]\n): IdxMessage[] | undefined {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value] as never;\n    }\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm] as never;\n    } \n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n        optionValues = [...optionValues, option.value] as never;\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions] as never;\n    }\n    return messages;\n  }, []);\n}\n\nexport function getMessagesFromResponse(idxResponse: IdxResponse, options: RunOptions): IdxMessage[] {\n  let messages: IdxMessage[] = [];\n  const { rawIdxState, neededToProceed } = idxResponse;\n\n  // Handle global messages\n  const globalMessages = rawIdxState.messages?.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages] as never;\n  }\n\n  // Handle field messages for current flow\n  // Preserve existing logic for general cases, remove in the next major version\n  // Follow ion response format for top level messages when useGenericRemediator is true\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages] as never;\n      }\n    }\n  }\n\n  // API may return identical error on same field, filter by i18n key\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    const key = message.i18n?.key;\n    if (key && seen[key] && message.message === seen[key].message) {\n      return filtered;\n    }\n    seen[key] = message;\n    filtered = [...filtered, message] as never;\n    return filtered;\n  }, []);\n\n  return messages;\n}\n\n\nexport function getEnabledFeatures(idxResponse: IdxResponse): IdxFeature[] {\n  const res = [];\n  const { actions, neededToProceed } = idxResponse;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'select-enroll-profile')) {\n    res.push(IdxFeature.REGISTRATION as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'redirect-idp')) {\n    res.push(IdxFeature.SOCIAL_IDP as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'unlock-account')) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK as never);\n  }\n\n  return res;\n}\n\nexport function getAvailableSteps(\n  authClient: OktaAuthIdxInterface, \n  idxResponse: IdxResponse, \n  useGenericRemediator?: boolean\n): NextStep[] {\n  const res: NextStep[] = [];\n\n  const remediatorMap: Record<string, RemediatorConstructor> = Object.values(remediators)\n    .reduce((map, remediatorClass) => {\n      // Only add concrete subclasses to the map\n      if (remediatorClass.remediationName) {\n        map[remediatorClass.remediationName] = remediatorClass;\n      }\n      return map;\n    }, {});\n\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, { useGenericRemediator, remediators: remediatorMap });\n    if (T) {\n      const remediator: Remediator = new T(remediation);\n      res.push (remediator.getNextStep(authClient, idxResponse.context) as never);\n    }\n  }\n\n  for (const [name] of Object.entries((idxResponse.actions || {}))) {\n    let stepObj = {\n      name, \n      action: async (params?) => {\n        return authClient.idx.proceed({ \n          actions: [{ name, params }] \n        });\n      }\n    };\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n      /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const {\n        href, \n        method, \n        rel, \n        accepts, \n        produces, \n        ...rest\n      } = actionObj;\n      /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const value = actionObj.value?.filter(item => item.name !== 'stateHandle');\n      stepObj = { \n        ...rest,  \n        ...(value && { value }),\n        ...stepObj,\n      };\n    }\n    res.push(stepObj);\n  }\n\n  return res;\n}\n\nexport function filterValuesForRemediation(\n  idxResponse: IdxResponse,\n  remediationName: string,\n  values: RemediationValues\n): RemediationValues {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n  if (!remediation) {\n    // step was specified, but remediation was not found. This is unexpected!\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const valuesForRemediation = remediation.value!.reduce((res, entry) => {\n    const { name, value } = entry;\n    if (name === 'stateHandle') {\n      res[name] = value; // use the stateHandle value in the remediation\n    } else {\n      res[name] = values[name]; // use the value provided by the caller\n    }\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation: IdxRemediation, options: RemediateOptions) {\n  const { useGenericRemediator, remediators } = options;\n  \n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return remediators![remediation.name];\n}\n\n// Return first match idxRemediation in allowed remediators\n// eslint-disable-next-line complexity\nexport function getRemediator(\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RemediateOptions,\n): Remediator | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const remediators = options.remediators!;\n  const useGenericRemediator = options.useGenericRemediator;\n  const {neededToProceed: idxRemediations, context} = idxResponse;\n\n  let remediator: Remediator;\n  // remediation name specified by caller - fast-track remediator lookup \n  if (options.step) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const remediation = idxRemediations.find(({ name }) => name === options.step)!;\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      // step was specified, but remediation was not found. This is unexpected!\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n\n  const remediatorCandidates: Remediator[] = [];\n  if (useGenericRemediator) {\n    // always pick the first remediation for when use GenericRemediator\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators as object).includes(remediation.name);\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const T = getRemediatorClass(remediation, options)!;\n      remediator = new T(remediation, values, options);\n      if (remediator.canRemediate(context)) {\n        // found the remediator\n        return remediator;\n      }\n      // remediator cannot handle the current values\n      // maybe return for next step\n      remediatorCandidates.push(remediator);  \n    }\n  }\n  \n  return remediatorCandidates[0];\n}\n\n\nexport function getNextStep(\n  authClient: OktaAuthIdxInterface, remediator: Remediator, idxResponse: IdxResponse\n): NextStep {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return {\n    ...nextStep,\n    ...(canSkip && {canSkip}),\n    ...(canResend && {canResend}),\n  };\n}\n\nexport function handleFailedResponse(\n  authClient: OktaAuthIdxInterface,\n  idxResponse: IdxResponse,\n  options = {}\n): RemediationResponse {\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n  if (terminal) {\n    return { idxResponse, terminal, messages };\n  } else {\n    const remediator = getRemediator(idxResponse, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      messages,\n      ...(nextStep && { nextStep }),\n    };\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}