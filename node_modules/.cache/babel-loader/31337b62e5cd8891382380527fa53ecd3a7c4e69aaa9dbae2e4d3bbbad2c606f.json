{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport './remediators/EnrollAuthenticator.js';\nimport './remediators/EnrollPoll.js';\nimport './remediators/SelectEnrollmentChannel.js';\nimport './remediators/EnrollmentChannelData.js';\nimport './remediators/ChallengeAuthenticator.js';\nimport './remediators/ChallengePoll.js';\nimport './remediators/ResetAuthenticator.js';\nimport './remediators/EnrollProfile.js';\nimport './remediators/Identify.js';\nimport './remediators/ReEnrollAuthenticator.js';\nimport './remediators/RedirectIdp.js';\nimport './remediators/SelectAuthenticatorAuthenticate.js';\nimport './remediators/SelectAuthenticatorEnroll.js';\nimport './remediators/SelectAuthenticatorUnlockAccount.js';\nimport './remediators/SelectEnrollProfile.js';\nimport './remediators/AuthenticatorVerificationData.js';\nimport './remediators/AuthenticatorEnrollmentData.js';\nimport './remediators/Skip.js';\nimport { getFlowSpecification } from './flow/FlowSpecification.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\nfunction initializeValues(options) {\n  var knownOptions = ['flow', 'remediators', 'actions', 'withCredentials', 'step', 'useGenericRemediator', 'exchangeCodeForTokens'];\n  var values = Object.assign({}, options);\n  knownOptions.forEach(function (option) {\n    delete values[option];\n  });\n  return values;\n}\nfunction initializeData(authClient, data) {\n  var options = data.options;\n  options = Object.assign(Object.assign({}, authClient.options.idx), options);\n  var _options = options,\n    flow = _options.flow,\n    withCredentials = _options.withCredentials,\n    remediators = _options.remediators,\n    actions = _options.actions;\n  var status = IdxStatus.PENDING;\n  flow = flow || authClient.idx.getFlow() || 'default';\n  if (flow) {\n    authClient.idx.setFlow(flow);\n    var flowSpec = getFlowSpecification(authClient, flow);\n    withCredentials = typeof withCredentials !== 'undefined' ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n  return Object.assign(Object.assign({}, data), {\n    options: Object.assign(Object.assign({}, options), {\n      flow: flow,\n      withCredentials: withCredentials,\n      remediators: remediators,\n      actions: actions\n    }),\n    status: status\n  });\n}\nfunction getDataFromIntrospect(_x, _x2) {\n  return _getDataFromIntrospect.apply(this, arguments);\n}\nfunction _getDataFromIntrospect() {\n  _getDataFromIntrospect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient, data) {\n    var options, stateHandle, withCredentials, version, state, scopes, recoveryToken, activationToken, maxAge, acrValues, nonce, idxResponse, meta, interactionHandle, interactResponse;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = data.options;\n          stateHandle = options.stateHandle, withCredentials = options.withCredentials, version = options.version, state = options.state, scopes = options.scopes, recoveryToken = options.recoveryToken, activationToken = options.activationToken, maxAge = options.maxAge, acrValues = options.acrValues, nonce = options.nonce;\n          meta = getSavedTransactionMeta(authClient, {\n            state: state,\n            recoveryToken: recoveryToken,\n            activationToken: activationToken\n          });\n          if (!stateHandle) {\n            _context.next = 9;\n            break;\n          }\n          _context.next = 6;\n          return introspect(authClient, {\n            withCredentials: withCredentials,\n            version: version,\n            stateHandle: stateHandle\n          });\n        case 6:\n          idxResponse = _context.sent;\n          _context.next = 20;\n          break;\n        case 9:\n          interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n          if (interactionHandle) {\n            _context.next = 17;\n            break;\n          }\n          authClient.transactionManager.clear();\n          _context.next = 14;\n          return interact(authClient, {\n            withCredentials: withCredentials,\n            state: state,\n            scopes: scopes,\n            activationToken: activationToken,\n            recoveryToken: recoveryToken,\n            maxAge: maxAge,\n            acrValues: acrValues,\n            nonce: nonce\n          });\n        case 14:\n          interactResponse = _context.sent;\n          interactionHandle = interactResponse.interactionHandle;\n          meta = interactResponse.meta;\n        case 17:\n          _context.next = 19;\n          return introspect(authClient, {\n            withCredentials: withCredentials,\n            version: version,\n            interactionHandle: interactionHandle\n          });\n        case 19:\n          idxResponse = _context.sent;\n        case 20:\n          return _context.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n            idxResponse: idxResponse,\n            meta: meta\n          }));\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getDataFromIntrospect.apply(this, arguments);\n}\nfunction getDataFromRemediate(_x3, _x4) {\n  return _getDataFromRemediate.apply(this, arguments);\n}\nfunction _getDataFromRemediate() {\n  _getDataFromRemediate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(authClient, data) {\n    var idxResponse, options, values, autoRemediate, remediators, actions, flow, step, useGenericRemediator, shouldRemediate, _yield$remediate, idxResponseFromRemediation, nextStep, canceled;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          idxResponse = data.idxResponse, options = data.options, values = data.values;\n          autoRemediate = options.autoRemediate, remediators = options.remediators, actions = options.actions, flow = options.flow, step = options.step, useGenericRemediator = options.useGenericRemediator;\n          shouldRemediate = autoRemediate !== false && (remediators || actions || step);\n          if (shouldRemediate) {\n            _context2.next = 5;\n            break;\n          }\n          return _context2.abrupt(\"return\", data);\n        case 5:\n          values = Object.assign(Object.assign({}, values), {\n            stateHandle: idxResponse.rawIdxState.stateHandle\n          });\n          _context2.next = 8;\n          return remediate(authClient, idxResponse, values, {\n            remediators: remediators,\n            actions: actions,\n            flow: flow,\n            step: step,\n            useGenericRemediator: useGenericRemediator\n          });\n        case 8:\n          _yield$remediate = _context2.sent;\n          idxResponseFromRemediation = _yield$remediate.idxResponse;\n          nextStep = _yield$remediate.nextStep;\n          canceled = _yield$remediate.canceled;\n          idxResponse = idxResponseFromRemediation;\n          return _context2.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n            idxResponse: idxResponse,\n            nextStep: nextStep,\n            canceled: canceled\n          }));\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getDataFromRemediate.apply(this, arguments);\n}\nfunction getTokens(_x5, _x6) {\n  return _getTokens.apply(this, arguments);\n}\nfunction _getTokens() {\n  _getTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(authClient, data) {\n    var meta, idxResponse, interactionCode, clientId, codeVerifier, ignoreSignature, redirectUri, urls, scopes, tokenResponse;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          meta = data.meta, idxResponse = data.idxResponse;\n          interactionCode = idxResponse.interactionCode;\n          clientId = meta.clientId, codeVerifier = meta.codeVerifier, ignoreSignature = meta.ignoreSignature, redirectUri = meta.redirectUri, urls = meta.urls, scopes = meta.scopes;\n          _context3.next = 5;\n          return authClient.token.exchangeCodeForTokens({\n            interactionCode: interactionCode,\n            clientId: clientId,\n            codeVerifier: codeVerifier,\n            ignoreSignature: ignoreSignature,\n            redirectUri: redirectUri,\n            scopes: scopes\n          }, urls);\n        case 5:\n          tokenResponse = _context3.sent;\n          return _context3.abrupt(\"return\", tokenResponse.tokens);\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getTokens.apply(this, arguments);\n}\nfunction finalizeData(_x7, _x8) {\n  return _finalizeData.apply(this, arguments);\n}\nfunction _finalizeData() {\n  _finalizeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(authClient, data) {\n    var options, idxResponse, canceled, status, exchangeCodeForTokens, shouldSaveResponse, shouldClearTransaction, clearSharedStorage, interactionCode, tokens, enabledFeatures, availableSteps, messages, terminal, hasActions, hasErrors, isTerminalSuccess;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          options = data.options, idxResponse = data.idxResponse, canceled = data.canceled, status = data.status;\n          exchangeCodeForTokens = options.exchangeCodeForTokens;\n          shouldSaveResponse = false;\n          shouldClearTransaction = false;\n          clearSharedStorage = true;\n          if (idxResponse) {\n            shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n            enabledFeatures = getEnabledFeatures(idxResponse);\n            availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n            messages = getMessagesFromResponse(idxResponse, options);\n            terminal = isTerminalResponse(idxResponse);\n          }\n          if (!terminal) {\n            _context4.next = 15;\n            break;\n          }\n          status = IdxStatus.TERMINAL;\n          hasActions = Object.keys(idxResponse.actions).length > 0;\n          hasErrors = !!messages.find(function (msg) {\n            return msg.class === 'ERROR';\n          });\n          isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n          if (isTerminalSuccess) {\n            shouldClearTransaction = true;\n          } else {\n            shouldSaveResponse = !!hasActions;\n          }\n          clearSharedStorage = false;\n          _context4.next = 32;\n          break;\n        case 15:\n          if (!canceled) {\n            _context4.next = 20;\n            break;\n          }\n          status = IdxStatus.CANCELED;\n          shouldClearTransaction = true;\n          _context4.next = 32;\n          break;\n        case 20:\n          if (!(idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode)) {\n            _context4.next = 32;\n            break;\n          }\n          interactionCode = idxResponse.interactionCode;\n          if (!(exchangeCodeForTokens === false)) {\n            _context4.next = 27;\n            break;\n          }\n          status = IdxStatus.SUCCESS;\n          shouldClearTransaction = false;\n          _context4.next = 32;\n          break;\n        case 27:\n          _context4.next = 29;\n          return getTokens(authClient, data);\n        case 29:\n          tokens = _context4.sent;\n          status = IdxStatus.SUCCESS;\n          shouldClearTransaction = true;\n        case 32:\n          return _context4.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n            status: status,\n            interactionCode: interactionCode,\n            tokens: tokens,\n            shouldSaveResponse: shouldSaveResponse,\n            shouldClearTransaction: shouldClearTransaction,\n            clearSharedStorage: clearSharedStorage,\n            enabledFeatures: enabledFeatures,\n            availableSteps: availableSteps,\n            messages: messages,\n            terminal: terminal\n          }));\n        case 33:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _finalizeData.apply(this, arguments);\n}\nfunction run(_x9) {\n  return _run.apply(this, arguments);\n}\nfunction _run() {\n  _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(authClient) {\n    var options,\n      _a,\n      data,\n      _data,\n      idxResponse,\n      meta,\n      shouldSaveResponse,\n      shouldClearTransaction,\n      clearSharedStorage,\n      status,\n      enabledFeatures,\n      availableSteps,\n      tokens,\n      nextStep,\n      messages,\n      error,\n      interactionCode,\n      rawIdxResponse,\n      _requestDidSucceed,\n      _ref,\n      actions,\n      context,\n      neededToProceed,\n      proceed,\n      rawIdxState,\n      requestDidSucceed,\n      stepUp,\n      _args5 = arguments;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n          data = {\n            options: options,\n            values: initializeValues(options)\n          };\n          data = initializeData(authClient, data);\n          _context5.next = 5;\n          return getDataFromIntrospect(authClient, data);\n        case 5:\n          data = _context5.sent;\n          _context5.next = 8;\n          return getDataFromRemediate(authClient, data);\n        case 8:\n          data = _context5.sent;\n          _context5.next = 11;\n          return finalizeData(authClient, data);\n        case 11:\n          data = _context5.sent;\n          _data = data, idxResponse = _data.idxResponse, meta = _data.meta, shouldSaveResponse = _data.shouldSaveResponse, shouldClearTransaction = _data.shouldClearTransaction, clearSharedStorage = _data.clearSharedStorage, status = _data.status, enabledFeatures = _data.enabledFeatures, availableSteps = _data.availableSteps, tokens = _data.tokens, nextStep = _data.nextStep, messages = _data.messages, error = _data.error, interactionCode = _data.interactionCode;\n          if (shouldClearTransaction) {\n            authClient.transactionManager.clear({\n              clearSharedStorage: clearSharedStorage\n            });\n          } else {\n            saveTransactionMeta(authClient, Object.assign({}, meta));\n            if (shouldSaveResponse) {\n              rawIdxResponse = idxResponse.rawIdxState, _requestDidSucceed = idxResponse.requestDidSucceed;\n              authClient.transactionManager.saveIdxResponse({\n                rawIdxResponse: rawIdxResponse,\n                requestDidSucceed: _requestDidSucceed,\n                stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n                interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n              });\n            }\n          }\n          _ref = idxResponse || {}, actions = _ref.actions, context = _ref.context, neededToProceed = _ref.neededToProceed, proceed = _ref.proceed, rawIdxState = _ref.rawIdxState, requestDidSucceed = _ref.requestDidSucceed, stepUp = _ref.stepUp;\n          return _context5.abrupt(\"return\", Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n            status: status\n          }, meta && {\n            meta: meta\n          }), enabledFeatures && {\n            enabledFeatures: enabledFeatures\n          }), availableSteps && {\n            availableSteps: availableSteps\n          }), tokens && {\n            tokens: tokens\n          }), nextStep && {\n            nextStep: nextStep\n          }), messages && messages.length && {\n            messages: messages\n          }), error && {\n            error: error\n          }), stepUp && {\n            stepUp: stepUp\n          }), {\n            interactionCode: interactionCode,\n            actions: actions,\n            context: context,\n            neededToProceed: neededToProceed,\n            proceed: proceed,\n            rawIdxState: rawIdxState,\n            requestDidSucceed: requestDidSucceed\n          }));\n        case 16:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _run.apply(this, arguments);\n}\nexport { run };","map":{"version":3,"names":["initializeValues","options","knownOptions","values","Object","assign","forEach","option","initializeData","authClient","data","idx","_options","flow","withCredentials","remediators","actions","status","IdxStatus","PENDING","getFlow","setFlow","flowSpec","getFlowSpecification","getDataFromIntrospect","_x","_x2","_getDataFromIntrospect","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","stateHandle","version","state","scopes","recoveryToken","activationToken","maxAge","acrValues","nonce","idxResponse","meta","interactionHandle","interactResponse","wrap","_callee$","_context","prev","next","getSavedTransactionMeta","introspect","sent","transactionManager","clear","interact","abrupt","stop","getDataFromRemediate","_x3","_x4","_getDataFromRemediate","_callee2","autoRemediate","step","useGenericRemediator","shouldRemediate","_yield$remediate","idxResponseFromRemediation","nextStep","canceled","_callee2$","_context2","rawIdxState","remediate","getTokens","_x5","_x6","_getTokens","_callee3","interactionCode","clientId","codeVerifier","ignoreSignature","redirectUri","urls","tokenResponse","_callee3$","_context3","token","exchangeCodeForTokens","tokens","finalizeData","_x7","_x8","_finalizeData","_callee4","shouldSaveResponse","shouldClearTransaction","clearSharedStorage","enabledFeatures","availableSteps","messages","terminal","hasActions","hasErrors","isTerminalSuccess","_callee4$","_context4","requestDidSucceed","stepUp","getEnabledFeatures","getAvailableSteps","getMessagesFromResponse","isTerminalResponse","TERMINAL","keys","length","find","msg","class","CANCELED","SUCCESS","run","_x9","_run","_callee5","_a","_data","error","rawIdxResponse","_requestDidSucceed","_ref","context","neededToProceed","proceed","_args5","_callee5$","_context5","undefined","saveTransactionMeta","saveIdxResponse"],"sources":["/Users/aadar00/Documents/image-moderation-app/frontend/node_modules/@okta/lib/idx/run.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, complexity, max-depth */\nimport { interact } from './interact';\nimport { introspect } from './introspect';\nimport { remediate } from './remediate';\nimport { getFlowSpecification } from './flow';\nimport * as remediators from './remediators';\nimport { \n  OktaAuthIdxInterface,\n  IdxStatus,\n  IdxTransaction,\n  IdxFeature,\n  NextStep,\n  RunOptions,\n  IdxTransactionMeta,\n} from './types';\nimport { IdxMessage, IdxResponse } from './types/idx-js';\nimport { getSavedTransactionMeta, saveTransactionMeta } from './transactionMeta';\nimport { getAvailableSteps, getEnabledFeatures, getMessagesFromResponse, isTerminalResponse } from './util';\nimport { Tokens } from '../oidc/types';\nimport { APIError } from '../errors/types';\ndeclare interface RunData {\n  options: RunOptions;\n  values: remediators.RemediationValues;\n  status?: IdxStatus;\n  tokens?: Tokens;\n  nextStep?: NextStep;\n  messages?: IdxMessage[];\n  error?: APIError | IdxResponse;\n  meta?: IdxTransactionMeta;\n  enabledFeatures?: IdxFeature[];\n  availableSteps?: NextStep[];\n  idxResponse?: IdxResponse;\n  canceled?: boolean;\n  interactionCode?: string;\n  shouldSaveResponse?: boolean;\n  shouldClearTransaction?: boolean;\n  clearSharedStorage?: boolean;\n  terminal?: boolean;\n}\n\nfunction initializeValues(options: RunOptions) {\n  // remove known options, everything else is assumed to be a value\n  const knownOptions = [\n    'flow', \n    'remediators', \n    'actions', \n    'withCredentials', \n    'step',\n    'useGenericRemediator',\n    'exchangeCodeForTokens',\n  ];\n  const values = { ...options };\n  knownOptions.forEach(option => {\n    delete values[option];\n  });\n  return values;\n}\n\nfunction initializeData(authClient, data: RunData): RunData {\n  let { options } = data;\n  options = {\n    ...authClient.options.idx,\n    ...options\n  };\n  let {\n    flow,\n    withCredentials,\n    remediators,\n    actions,\n  } = options;\n\n  const status = IdxStatus.PENDING;\n\n  // certain options can be set by the flow specification\n  flow = flow || authClient.idx.getFlow() || 'default';\n  if (flow) {\n    authClient.idx.setFlow(flow);\n    const flowSpec = getFlowSpecification(authClient, flow);\n    // Favor option values over flow spec\n    withCredentials = (typeof withCredentials !== 'undefined') ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n\n  return { \n    ...data,\n    options: { \n      ...options, \n      flow, \n      withCredentials, \n      remediators, \n      actions,\n    },\n    status\n  };\n}\n\nasync function getDataFromIntrospect(authClient, data: RunData): Promise<RunData> {\n  const { options } = data;\n  const {\n    stateHandle,\n    withCredentials,\n    version,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken,\n    maxAge,\n    acrValues,\n    nonce,\n  } = options;\n\n  let idxResponse;\n  let meta = getSavedTransactionMeta(authClient, { state, recoveryToken, activationToken }); // may be undefined\n\n  if (stateHandle) {\n    idxResponse = await introspect(authClient, { withCredentials, version, stateHandle });\n  } else {\n    let interactionHandle = meta?.interactionHandle; // may be undefined\n    if (!interactionHandle) {\n      // start a new transaction\n      authClient.transactionManager.clear();\n      const interactResponse = await interact(authClient, {\n        withCredentials,\n        state,\n        scopes,\n        activationToken,\n        recoveryToken,\n        maxAge,\n        acrValues,\n        nonce,\n      }); \n      interactionHandle = interactResponse.interactionHandle;\n      meta = interactResponse.meta;\n    }\n  \n    // Introspect to get idx response\n    idxResponse = await introspect(authClient, { withCredentials, version, interactionHandle });\n  }\n  return { ...data, idxResponse, meta };\n}\n\nasync function getDataFromRemediate(authClient, data: RunData): Promise<RunData> {\n  let {\n    idxResponse,\n    options,\n    values\n  } = data;\n\n  const {\n    autoRemediate,\n    remediators,\n    actions,\n    flow,\n    step,\n    useGenericRemediator,\n  } = options;\n  \n  const shouldRemediate = (autoRemediate !== false && (remediators || actions || step));\n  if (!shouldRemediate) {\n    return data;\n  }\n\n  values = { \n    ...values, \n    stateHandle: idxResponse!.rawIdxState.stateHandle \n  };\n\n  // Can we handle the remediations?\n  const { \n    idxResponse: idxResponseFromRemediation, \n    nextStep,\n    canceled,\n  } = await remediate(\n    authClient,\n    idxResponse!, \n    values, \n    {\n      remediators,\n      actions,\n      flow,\n      step,\n      useGenericRemediator,\n    }\n  );\n  idxResponse = idxResponseFromRemediation;\n\n  return { ...data, idxResponse, nextStep, canceled };\n}\n\nasync function getTokens(authClient, data: RunData): Promise<Tokens> {\n  let { meta, idxResponse } = data;\n  const { interactionCode } = idxResponse as IdxResponse;\n  const {\n    clientId,\n    codeVerifier,\n    ignoreSignature,\n    redirectUri,\n    urls,\n    scopes,\n  } = meta as IdxTransactionMeta;\n  const tokenResponse = await authClient.token.exchangeCodeForTokens({\n    interactionCode,\n    clientId,\n    codeVerifier,\n    ignoreSignature,\n    redirectUri,\n    scopes\n  }, urls);\n  return tokenResponse.tokens;\n}\n\nasync function finalizeData(authClient, data: RunData): Promise<RunData> {\n  let {\n    options,\n    idxResponse,\n    canceled,\n    status,\n  } = data;\n  const { exchangeCodeForTokens } = options;\n  let shouldSaveResponse = false;\n  let shouldClearTransaction = false;\n  let clearSharedStorage = true;\n  let interactionCode;\n  let tokens;\n  let enabledFeatures;\n  let availableSteps;\n  let messages;\n  let terminal;\n\n  if (idxResponse) {\n    shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n    enabledFeatures = getEnabledFeatures(idxResponse);\n    availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n    messages = getMessagesFromResponse(idxResponse, options);\n    terminal = isTerminalResponse(idxResponse);\n  }\n\n  if (terminal) {\n    status = IdxStatus.TERMINAL;\n\n    // In most cases a terminal response should not clear transaction data. The user should cancel or skip to continue.\n    // A terminal \"success\" is a non-error response with no further actions available.\n    // In these narrow cases, saved transaction data should be cleared.\n    // One example of a terminal success is when the email verify flow is continued in another tab\n    const hasActions = Object.keys(idxResponse!.actions).length > 0;\n    const hasErrors = !!messages.find(msg => msg.class === 'ERROR');\n    const isTerminalSuccess = !hasActions && !hasErrors && idxResponse!.requestDidSucceed === true;\n    if (isTerminalSuccess) {\n      shouldClearTransaction = true;\n    } else {\n      // save response if there are actions available (ignore messages)\n      shouldSaveResponse = !!hasActions;\n    }\n    // leave shared storage intact so the transaction can be continued in another tab\n    clearSharedStorage = false;\n  } else if (canceled) {\n    status = IdxStatus.CANCELED;\n    shouldClearTransaction = true;\n  } else if (idxResponse?.interactionCode) { \n    interactionCode = idxResponse.interactionCode;\n    if (exchangeCodeForTokens === false) {\n      status = IdxStatus.SUCCESS;\n      shouldClearTransaction = false;\n    } else {\n      tokens = await getTokens(authClient, data);\n      status = IdxStatus.SUCCESS;\n      shouldClearTransaction = true;\n    }\n  }\n  return {\n    ...data,\n    status,\n    interactionCode,\n    tokens,\n    shouldSaveResponse,\n    shouldClearTransaction,\n    clearSharedStorage,\n    enabledFeatures,\n    availableSteps,\n    messages,\n    terminal\n  };\n}\n\nexport async function run(\n  authClient: OktaAuthIdxInterface, \n  options: RunOptions = {},\n): Promise<IdxTransaction> {\n  let data: RunData = {\n    options,\n    values: initializeValues(options)\n  };\n\n  data = initializeData(authClient, data);\n  data = await getDataFromIntrospect(authClient, data);\n  data = await getDataFromRemediate(authClient, data);\n  data = await finalizeData(authClient, data);\n\n  const {\n    idxResponse,\n    meta,\n    shouldSaveResponse,\n    shouldClearTransaction,\n    clearSharedStorage,\n    status,\n    enabledFeatures,\n    availableSteps,\n    tokens,\n    nextStep,\n    messages,\n    error,\n    interactionCode\n  } = data;\n\n  if (shouldClearTransaction) {\n    authClient.transactionManager.clear({ clearSharedStorage });\n  }\n  else {\n    // ensures state is saved to sessionStorage\n    saveTransactionMeta(authClient, { ...meta });\n\n    if (shouldSaveResponse) {\n      // Save intermediate idx response in storage to reduce introspect call\n      const { rawIdxState: rawIdxResponse, requestDidSucceed } = idxResponse!;\n      authClient.transactionManager.saveIdxResponse({\n        rawIdxResponse,\n        requestDidSucceed,\n        stateHandle: idxResponse!.context?.stateHandle,\n        interactionHandle: meta?.interactionHandle\n      });\n    }\n  }\n  \n  // copy all fields from idxResponse which are needed by the widget\n  const { actions, context, neededToProceed, proceed, rawIdxState, requestDidSucceed, stepUp } = idxResponse || {};\n  return {\n    status: status!,\n    ...(meta && { meta }),\n    ...(enabledFeatures && { enabledFeatures }),\n    ...(availableSteps && { availableSteps }),\n    ...(tokens && { tokens }),\n    ...(nextStep && { nextStep }),\n    ...(messages && messages.length && { messages }),\n    ...(error && { error }),\n    ...(stepUp && { stepUp }),\n    interactionCode, // if options.exchangeCodeForTokens is false\n\n    // from idx-js\n    actions: actions!,\n    context: context!,\n    neededToProceed: neededToProceed!,\n    proceed: proceed!,\n    rawIdxState: rawIdxState!,\n    requestDidSucceed\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}