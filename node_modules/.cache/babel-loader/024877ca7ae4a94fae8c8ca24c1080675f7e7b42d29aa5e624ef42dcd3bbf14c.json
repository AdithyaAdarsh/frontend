{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getOAuthUrls } from './oauth.js';\nfunction createOAuthMeta(sdk, tokenParams) {\n  const issuer = sdk.options.issuer;\n  const urls = getOAuthUrls(sdk, tokenParams);\n  const oauthMeta = {\n    issuer,\n    urls,\n    clientId: tokenParams.clientId,\n    redirectUri: tokenParams.redirectUri,\n    responseType: tokenParams.responseType,\n    responseMode: tokenParams.responseMode,\n    scopes: tokenParams.scopes,\n    state: tokenParams.state,\n    nonce: tokenParams.nonce,\n    ignoreSignature: tokenParams.ignoreSignature,\n    acrValues: tokenParams.acrValues\n  };\n  if (tokenParams.pkce === false) {\n    return oauthMeta;\n  }\n  const pkceMeta = Object.assign(Object.assign({}, oauthMeta), {\n    codeVerifier: tokenParams.codeVerifier,\n    codeChallengeMethod: tokenParams.codeChallengeMethod,\n    codeChallenge: tokenParams.codeChallenge\n  });\n  return pkceMeta;\n}\nexport { createOAuthMeta };","map":{"version":3,"names":["createOAuthMeta","sdk","tokenParams","issuer","options","urls","getOAuthUrls","oauthMeta","clientId","redirectUri","responseType","responseMode","scopes","state","nonce","ignoreSignature","acrValues","pkce","pkceMeta","Object","assign","codeVerifier","codeChallengeMethod","codeChallenge"],"sources":["/Users/aadar00/Library/CloudStorage/OneDrive-BlackhawkNetwork,Inc/Documents/image-moderation-app/frontend/node_modules/@okta/lib/oidc/util/oauthMeta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { OAuthTransactionMeta, OktaAuthOAuthInterface, PKCETransactionMeta, TokenParams } from '../types';\nimport { getOAuthUrls } from './oauth';\n\nexport function createOAuthMeta(\n  sdk: OktaAuthOAuthInterface, \n  tokenParams: TokenParams\n): OAuthTransactionMeta | PKCETransactionMeta {\n  const issuer = sdk.options.issuer!;\n  const urls = getOAuthUrls(sdk, tokenParams);\n  const oauthMeta: OAuthTransactionMeta = {\n    issuer,\n    urls,\n    clientId: tokenParams.clientId!,\n    redirectUri: tokenParams.redirectUri!,\n    responseType: tokenParams.responseType!,\n    responseMode: tokenParams.responseMode!,\n    scopes: tokenParams.scopes!,\n    state: tokenParams.state!,\n    nonce: tokenParams.nonce!,\n    ignoreSignature: tokenParams.ignoreSignature!,\n    acrValues: tokenParams.acrValues,\n  };\n\n  if (tokenParams.pkce === false) {\n    // Implicit flow or authorization_code without PKCE\n    return oauthMeta;\n  }\n\n  const pkceMeta: PKCETransactionMeta = {\n    ...oauthMeta,\n    codeVerifier: tokenParams.codeVerifier!,\n    codeChallengeMethod: tokenParams.codeChallengeMethod!,\n    codeChallenge: tokenParams.codeChallenge!,\n  };\n\n  return pkceMeta;\n}\n"],"mappings":";;;;;;;;;;;;;AAIgB,SAAAA,eAAeA,CAC7BC,GAA2B,EAC3BC,WAAwB;EAExB,MAAMC,MAAM,GAAGF,GAAG,CAACG,OAAO,CAACD,MAAO;EAClC,MAAME,IAAI,GAAGC,YAAY,CAACL,GAAG,EAAEC,WAAW,CAAC;EAC3C,MAAMK,SAAS,GAAyB;IACtCJ,MAAM;IACNE,IAAI;IACJG,QAAQ,EAAEN,WAAW,CAACM,QAAS;IAC/BC,WAAW,EAAEP,WAAW,CAACO,WAAY;IACrCC,YAAY,EAAER,WAAW,CAACQ,YAAa;IACvCC,YAAY,EAAET,WAAW,CAACS,YAAa;IACvCC,MAAM,EAAEV,WAAW,CAACU,MAAO;IAC3BC,KAAK,EAAEX,WAAW,CAACW,KAAM;IACzBC,KAAK,EAAEZ,WAAW,CAACY,KAAM;IACzBC,eAAe,EAAEb,WAAW,CAACa,eAAgB;IAC7CC,SAAS,EAAEd,WAAW,CAACc;GACxB;EAED,IAAId,WAAW,CAACe,IAAI,KAAK,KAAK,EAAE;IAE9B,OAAOV,SAAS;EACjB;EAED,MAAMW,QAAQ,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACTb,SAAS;IACZc,YAAY,EAAEnB,WAAW,CAACmB,YAAa;IACvCC,mBAAmB,EAAEpB,WAAW,CAACoB,mBAAoB;IACrDC,aAAa,EAAErB,WAAW,CAACqB;EAAc,EAC1C;EAED,OAAOL,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}